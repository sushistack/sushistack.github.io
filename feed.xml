<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://deeplify.dev/feed.xml" rel="self" type="application/atom+xml" /><link href="https://deeplify.dev/" rel="alternate" type="text/html" hreflang="ko" /><updated>2024-10-14T10:43:06+09:00</updated><id>https://deeplify.dev/feed.xml</id><title type="html">Deeplify</title><entry><title type="html">CKAD 자격증 취득 후기</title><link href="https://deeplify.dev/back-end/etc/ckad" rel="alternate" type="text/html" title="CKAD 자격증 취득 후기" /><published>2024-10-10T00:00:00+09:00</published><updated>2024-10-10T00:00:00+09:00</updated><id>https://deeplify.dev/back-end/etc/ckad</id><content type="html" xml:base="https://deeplify.dev/back-end/etc/ckad"><![CDATA[<p>이 번 글은 CKAD 자격증을 취득 후기입니다. 회사 동료 분이 이 자격증을 위해 공부한다는 소식을 듣고, 저도 자격증을 갖고 싶다는 생각이 들었습니다.
동료 분이 엄청 착하신 분이라서 강의를 듣고 싶으면 들으라고 하셔서 udemy 라는 강의 사이트에서 CKAD 취득을 위한 강의를 듣게 되었습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://training.linuxfoundation.org/certification/certified-kubernetes-application-developer-ckad" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Certified Kubernetes Application Developer (CKAD) - Linux Foundation - Education</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">training.linuxfoundation.org</span>
        </div>
      </div>
    </a>
</div>

<p>위 링크를 보면 CKAD 자격증에 대한 정보를 볼 수 있습니다.</p>

<h2 id="ckad란">CKAD란?</h2>

<div class="hint-container success">
  <div class="hint-type success">
    <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor"><g><path d="M22 11.07V12a10 10 0 1 1-5.93-9.14"></path><polyline points="23 3 12 14 9 11"></polyline></g></svg>
  </div>
  <div class="hint-body-container">
    <div class="hint-body">
      
        <span class="hint-body-text">CKAD(Certified Kubernetes Application Developer)는 Cloud Native Computing Foundation (CNCF)에서 제공하는 인증으로, Kubernetes 환경에서 애플리케이션을 개발, 관리, 배포할 수 있는 능력을 검증하는 자격증입니다.</span>
      
    </div>
  </div>
</div>

<h3 id="시험-목적">시험 목적</h3>

<blockquote>
  <ol>
    <li>Kubernetes 클러스터에서 애플리케이션을 배포, 관리, 스케일링, 문제 해결하는 능력</li>
    <li>Kubernetes 리소스를 이해하고, Pod, Deployment, Service, ConfigMap, Secret 등의 리소스를 활용할 수 있는 능력</li>
    <li>컨테이너화된 애플리케이션의 동작과 구조를 이해하고, 애플리케이션 개발에 Kubernetes를 효과적으로 사용하는 능력</li>
  </ol>
</blockquote>

<p>CKAD 자격증은 위와 같은 능력을 가진 개발자를 인증합니다.</p>

<h3 id="시험-후기">시험 후기</h3>

<p>우선 시험에 대한 정보를 말씀드리면, 시험 시간은 <strong>2 시간</strong>이고, 환경은 PSI(?) 라는 가상 환경에 접근 가능한 브라우저에서 치뤄집니다.</p>

<p>시험을 치루기 전에 회사 동료 분에게 여러가지 팁들을 들어둔 상태여서, 스터디 룸을 3시간 빌려서 시험을 진행했습니다.
들었던 것 보다 엄청 깐깐하게 시험환경을 체크합니다. 책상 위에 아무 것도 없는지, 물은 투명한 컵에 들어 있는지 바닥에 누가 있는지, 스마트폰이 꺼져 있는지 등을 체크했습니다.</p>

<p>시험을 치룰 떄도 귀에 에어팟이 없는지, 입을 가리고 있는지, 혼잣말을 하는지 등을 체크힙니다.
저는 ‘자 시작해볼까?’ 한마디 했다가 경고 받았습니다. 또 생각한다고 잠시 입을 가렸는데, 메신저로 입 가리지 말라고 하더군요.</p>

<p>아무튼 2시간 동안 열심히 풀었습니다.
제가 생각했을 때는 1문제를 제외하고 다 풀었지만, 푼 문제가 맞는다는 보장이 없으니 약간 걱정이 되었습니다.</p>

<h3 id="결과">결과</h3>

<blockquote>
  <ul>
    <li>합격 커트라인: 66점</li>
    <li>받은 점수: 90점</li>
  </ul>
</blockquote>

<p>통과했습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/sushistack/CKAD" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">sushistack/CKAD at CKAD study documents</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<p>공부했던 내용과 기억나는 대로 적은 기출 문제는 위 레파지토리에 정리해두었습니다.</p>

<h2 id="맺음">맺음</h2>

<p>이 번 글에서는 CKAD 취득에 대한 후기를 작성해 보았습니다. CKAD 자격증 시험은 $395 로 엄첨 비싸지만, 블랙프라이 데이 등에 할인을 잘 받으면 50% 넘게 까지도 할인된 가격에 구매할 수 있습니다.
저 같은 경우, 40% 정도 할인 된 가격에 구매한 후 2달 정도 여유롭게 공부한 뒤 취득했습니다.</p>

<p>감사합니다.</p>]]></content><author><name>deeplify</name></author><category term="back-end" /><category term="etc" /><category term="ckad" /><category term="k8s" /><category term="kube" /><category term="kubernetes" /><summary type="html"><![CDATA[쿠버네티스 자격증인 CKAD를 취득한 후기를 공유합니다.]]></summary></entry><entry><title type="html">토쓰 Slash 2024 참여</title><link href="https://deeplify.dev/back-end/etc/toss-slash24" rel="alternate" type="text/html" title="토쓰 Slash 2024 참여" /><published>2024-09-14T00:00:00+09:00</published><updated>2024-09-14T00:00:00+09:00</updated><id>https://deeplify.dev/back-end/etc/toss-slash24</id><content type="html" xml:base="https://deeplify.dev/back-end/etc/toss-slash24"><![CDATA[<p>얼마 전에 MongoDB.local 2024를 다녀온지 얼마 안되었지만, 팀원 한 분이 토쓰 Slash24에 당첨되었는데 일정상 가지 못하게 되어 양도 받을 사람을 구하셨습니다.
그런데 아무도 가지 않는다고 하여 제가 낚아챘습니다. 최근 컨퍼런스 몇 개를 참석해 봤는데 재미도 있고, 다양한 아이디어도 얻을 수 있어서 연차를 쓰더라도 가야겠다고 생각했습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://toss.im/slash-24" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">SLASH24</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">toss.im</span>
        </div>
      </div>
    </a>
</div>

<p>위 링크를 보면 컨퍼런스에 대한 정보를 볼 수 있습니다. 다양한 세션과 행사들이 많아서 재밌는 시간을 보낼 수 있을 것이라고 확신했습니다.</p>

<h2 id="slash24">SLASH24</h2>

<p>슬래시(/)24 컨퍼런스 이름을 보고 처음 든 생각은 무슨 뜻일까 였습니다.
그 뜻을 세션을 듣다가 알게되었는데 <code class="language-plaintext highlighter-rouge">SLASH는 개발 시 명령어 앞에 사용되는 기호이자, 기술 혁신으로 세상에 한 획을 긋는다</code>는 의미를 담고 있다고 합니다.</p>

<p>행사 당일에 비가와서 살짝 늦을 뻔 했지만 시작전에 무사히 도착할 수 있었습니다.
그리고 입장권을 키오스크 같은 곳에서 출력 후 입장 했습니다, 역시나 컨퍼런스 외부에는 다양한 부스들과 이벤트들이 진행중이었습니다.</p>

<p>선물은 놓칠 수 없어서 쉬는 시간에 무조건 다 받겠다고 다짐했습니다.</p>

<h3 id="다양한-세션들">다양한 세션들</h3>

<p><img src="/assets/images/toss-no-limit01.jpg" alt="toss-slash24" /></p>

<p>위 사진처럼 듣고 싶은 세션을 찾아 트랙에 입장했습니다. 크게 세션을 3가지 트랙으로 나누는데 data, Server, FrontEnd로 나누어서 세션이 진행되었습니다.</p>

<p>저 같은 경우, 서버 쪽에 관심이 많기 때문에 거의 대부분을 서버 쪽 세션 들었습니다.</p>

<blockquote>
  <ol>
    <li>리플레이 검증으로 새로운 금융 시스템 안전하게 도입하기</li>
    <li>CPU Observability 높이는 Hyperthread 톺아보기</li>
    <li>Next 코어뱅킹, MSA와 MySQL로 여는 평생 무료 환전 시대</li>
    <li>SSE 이벤트 푸쉬로 불필요한 Polling 제거하기</li>
    <li>미처 알지 못했던 Kernel까지 Observability 향상시키기</li>
    <li>보상 트랜잭션으로 분산 환경에서도 안전하게 환전하기</li>
    <li>대규모 사용자 기반의 마이데이터 서비스 안정적으로 운영하기</li>
  </ol>
</blockquote>

<p>위와 같은 세션들을 모두 들었습니다. 세션들이 20분 정도로 짧기 때문에 지루하지 않고 집중해서 보고 들을 수 있었습니다.</p>

<p>무엇보다도 진행자의 진행과 발표자들의 발표력이 어마어마 했습니다. 뿐만이 아니라 준비된 발표 자료들도 엄청난 퀄리티로 보는 내내 감탄만 나왔습니다.</p>

<p>세션들을 보면서 느낀점은 역시 금융과 관련된 앱의 개발자들이다 보니, 안전성과 성능을 중요 시 한다는 것을 느꼈습니다, 뿐만 아니라 다양한 기술과 노하우를 통해 문제를 해결하는 능력을 보니 너무 대단하고 존경스러움까지 느껴졌습니다.</p>

<h2 id="맺음">맺음</h2>

<p>토쓰 Slash24에 참여해서 좋은 경험과 아이디어들을 얻을 수 있었습니다.</p>

<p>Slash23을 Youtube를 통해서 봤었던적이 있었는데, 이번에는 직접적으로 컨퍼런스에 참여해 볼 수 있어서 너무 좋은 경험이었고 토쓰 개발자는 어떻게 일하는지도 느낄 수 있었습니다.</p>]]></content><author><name>deeplify</name></author><category term="back-end" /><category term="etc" /><category term="toss" /><category term="slash24" /><category term="toss slash24" /><summary type="html"><![CDATA[토쓰 Slash 2024에 참여하고 느낀점들을 공유합니다.]]></summary></entry><entry><title type="html">MongoDB.local Seoul 2024 참여</title><link href="https://deeplify.dev/database/concept/mongodb" rel="alternate" type="text/html" title="MongoDB.local Seoul 2024 참여" /><published>2024-09-04T00:00:00+09:00</published><updated>2024-09-04T00:00:00+09:00</updated><id>https://deeplify.dev/database/concept/mongodb</id><content type="html" xml:base="https://deeplify.dev/database/concept/mongodb"><![CDATA[<p>Spring I/O 2024에 참석 했을 때, MongoDB가 스폰서로 있어 메일을 작성했더니 <code class="language-plaintext highlighter-rouge">MongoDB.local 2024</code> 컨퍼런스 초대장을 받았습니다.</p>

<p>최근에 참석했던 컨퍼런스에서 반성과 함께 신선한 충격을 얻어서인지 다른 컨퍼런스들도 참석해보고 싶다는 생각이 들었습니다. 게다가 컨퍼런스 위치도 서울이기 때문에 개인적으로 연차를 사용하고 다녀왔습니다.</p>

<p>컨퍼런스를 다녀오면 다양한 회사 서비스들의 시스템 구조나 아이디어들을 옅볼 수 있는 장점이 있고, Youtube와 같은 영상으로 보는 것 보다 집중이 잘 되는 장점이 있는 것 같습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://web.cvent.com/event/26bea781-499f-4c6a-b65e-49f9f225ac82/websitePage:f4bf8f99-a758-4be7-b845-4a2621c846a4" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">행사 개요 - MongoDB.local Seoul</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">web.cvent.com</span>
        </div>
      </div>
    </a>
</div>

<p>위 링크를 통해서 전체적인 행사 순서와 세션들을 확인할 수 있습니다. 오전 타임 중간 정도부터 섹션이 2개로 나뉘어졌습니다.</p>

<h2 id="mongodblocal">MongoDB.local</h2>

<p>우선 아침 9시부터 시작이라 오전 8시 30분 쯤 롯데호텔에 도착했습니다. 3층에 들어섰을 때 AWS, Megasoft 등 몇몇 스폰서들의 부스들이 있었고 사람들이 줄서 있는 모습이 보였습니다.</p>

<p>저도 이런 것은 못 참는 성격이어서 바로 줄서서 다양한 선물들을 받을 수 있었습니다. 제일 맘에 들었던 것은 후드집업 이었습니다.</p>

<h3 id="오프닝">오프닝</h3>

<p>환영사와 기조연설이 끝나고, 바로 MongoDB에 대한 소개가 시작되었습니다.</p>

<p><img src="/assets/images/mongodbdotlocal01.jpg" alt="mongodbdotlocal01" /></p>

<p>간단하게 요약하자면? 이제 AI의 시대가 열리는데, 질의 벡터 어디에 저장하고 검색할꺼야? 우리꺼 써봐 성능도 좋고 사용하기 쉽고 이식성도 좋아! 인 것 같습니다.</p>

<h3 id="활용-사례-세션">활용 사례 세션</h3>

<p>MongoDB에 대한 기능과 장점들을 소개하고 난 후, 스폰서 혹은 MongoDB를 사용하고 있는 회사 내에서 실제로 MongoDB가 어떻게 사용되고 있는지? 어떻게 적용했는지 등을 소개해주었습니다.</p>

<p>제가 들었던 세션 중 흥미로웠던 세션 몇 가지만 꼽아보면 다음과 같습니다.</p>

<blockquote>
  <ol>
    <li>서비스의 품질과 생산성 향상을 위한 MongoDB 생성형 AI 애플리케이션 아키텍처</li>
    <li>MongoDB 데이터 모델링의 원리와 방법론</li>
    <li>LG U+ Cloud Management Platform의 MongoDB 활용 사례</li>
  </ol>
</blockquote>

<p>1번의 경우 삼성 임직원 분이 발표를 해주셨는데, 삼성에서 사용하는 내부 Chat Client가 어떤 아키텍쳐로 되어 있고, 
어떤 요구 사항에 의해 기술 혹은 상품을 선택했는지 자세하게 볼 수 있었습니다.</p>

<p>2번은 개인적으로 궁금해서 선택해서 듣게되었습니다. 단순 RDB와 비교하여 Docment 형태로 저장 하는 NoSQL 형태인 MongoDB의 모델링 방법을 확인할 수 있었습니다.
보면서 시스템 요구사항과 환경을 고려해서 MongoDB를 사용하는 것이 좋을 수 있겠다는 생각을 했습니다.</p>

<p>3번을 듣는 순간 2번에서 생각했던 좋을 수도 있겠다라는 생각이 좋겠다라는 확신을 바뀌었습니다.</p>

<p><img src="/assets/images/mongodbdotlocal02.jpg" alt="mongodbdotlocal02" /></p>

<p>3번은 LG U+ 직원분께서 사내 서비스를 예로 들어주며 MongoDB로 마이그레이션 했던 내용을 공유해주셨습니다.
그러면서 MongoDB의 특성으로 유연하게 데이터 스키마를 변경할 수 있어 큰 장점으로 작용했다고 말씀해주셨습니다.</p>

<h2 id="맺음">맺음</h2>

<p>MongoDB.local 2024에 참여해서 좋은 경험과 아이디어들을 얻을 수 있었습니다.</p>

<p>단순히 MongoDB에 대한 소개와 특징만 듣는 것이 아니라 활용 사례를 통해 다른 회사의 서비스들의 구조도 확인 할 수 있었고, 
어떻게 유연하게 적용할 수 있는지에 대한 노하우도 알 수 있었습니다.</p>]]></content><author><name>deeplify</name></author><category term="database" /><category term="concept" /><category term="mongodb" /><category term="seoul" /><category term="mongodb.local" /><category term="mongodb ai" /><summary type="html"><![CDATA[MongoDB.local Seoul에 참여하고 느낀점들을 공유합니다.]]></summary></entry><entry><title type="html">Spring AI 사용해보기</title><link href="https://deeplify.dev/back-end/spring/spring-ai" rel="alternate" type="text/html" title="Spring AI 사용해보기" /><published>2024-06-18T00:00:00+09:00</published><updated>2024-06-18T00:00:00+09:00</updated><id>https://deeplify.dev/back-end/spring/spring-ai</id><content type="html" xml:base="https://deeplify.dev/back-end/spring/spring-ai"><![CDATA[<p>이 번 글에서는 Spring AI에 대해서 알아보는 시간을 가져보겠습니다.
이 글이 최초 작성된 날짜는 2024년 6월 입니다, 따라서 현재 기준으로 Spring AI 최신 버전은 <code class="language-plaintext highlighter-rouge">1.0.0-SNAPSHOT</code>으로 다른 버전과 호화되는 않을 수 있습니다.</p>

<h2 id="spring-ai-란">Spring AI 란?</h2>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Spring AI :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Spring AI 프로젝트는 AI 기능을 포함하는 애플리케이션 개발을 불필요한 복잡성 없이 간소화하는 것을 목표로 합니다.
</code></pre></div></div>

<p>스프링 공식 문서에 따르면, 다양한 구현을 유연하게 개발할 수 있도록 설계되었으며, 최소한의 코드 변경으로 쉽게 변경할 수 있는 추상화를 제공하는 하나의 독립적인 프로젝트로 출시된 것으로 보입니다.</p>

<p>이렇게 독립적인 프로젝트로 출시되면서 개발자들이 얻는 이점은 더 이상 외부 LLM API와 HTTP 연결 하는 로직을 직접 구현하지 않아도 된다는 점이 가장 큰 장점이라고 생각합니다.</p>

<h2 id="spring-ai-적용해보기">Spring AI 적용해보기</h2>

<div class="related-link-wrap">
    <a class="related-link" href="https://www.youtube.com/watch?v=XUz4LKZx83g" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Spring I/O 2024 Keynote - YouTube</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">www.youtube.com</span>
        </div>
      </div>
    </a>
</div>

<p>저는 Youtube 동영상을 참고해서 프로젝트를 만들어보도록 하겠습니다.</p>

<h3 id="1-gradle-프로젝트-생성">1. Gradle 프로젝트 생성</h3>

<blockquote>
  <p>프로젝트 생성 정보</p>
  <ul>
    <li>Gradle 8.x</li>
    <li>SpringBoot: 3.3.1</li>
    <li>Language: Java</li>
    <li>JDK: 21, GraalVM</li>
    <li>Dependencies: Spring Web, OpenAI, Spring Data JDBC, PGvector Vector Database, GraalVM Native Support</li>
  </ul>
</blockquote>

<p>저는 Visual Studio를 이용해서 프로젝트를 생성해보도록 하겠습니다. VS코드 Spring Initializr Extension을 통해서 위와 같이 생성을 진행했습니다.</p>

<h3 id="2-chatgpt-api-설정-및-key-발급-받기">2. ChatGPT API 설정 및 Key 발급 받기</h3>

<p>Spring AI 프로젝트에 연결할 ChatGPT의 API를 설정하여 진행하도록 하겠습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://platform.openai.com/apps" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">OpenAI Platform</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">platform.openai.com</span>
        </div>
      </div>
    </a>
</div>

<p><img src="/assets/images/spring-ai-00_1.png" alt="spring ai 00 1" /></p>

<p>위 링크로 이동하여 위 그림과 같이 오른쪽 API를 선택해줍니다.</p>

<p><img src="/assets/images/spring-ai-00_3.png" alt="spring ai 00 3" /></p>

<p>오른쪽 상단의 톱니바퀴 모양 &gt; Project &gt; Create project 순서로 선택하여 프로젝트를 생성해줍니다.</p>

<p><img src="/assets/images/spring-ai-00_5.png" alt="spring ai 00 5" /></p>

<p>왼쪽 상단의 Your profile을 선택 후, 위와 같이 API Key를 생성하기 위해 인증을 진행해줍니다.</p>

<p><img src="/assets/images/spring-ai-00_6.png" alt="spring ai 00 3" /></p>

<p>성공적으로 인증을 하면 위와 같이 API Key를 발급 받을 수 있습니다.</p>

<h3 id="3-프로젝트에-api-key-등록">3. 프로젝트에 API Key 등록</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application.name</span><span class="pi">:</span> <span class="s">private-ai</span>
  <span class="c1"># database</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:postgresql://localhost/mydatabase</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">myuser</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">secret</span>
  <span class="na">sql.init.mode</span><span class="pi">:</span> <span class="s">always</span>
  <span class="c1"># ai settings</span>
  <span class="na">ai.openai</span><span class="pi">:</span>
    <span class="na">api-key</span><span class="pi">:</span> <span class="s">&lt;Your-API-KEY&gt;</span>
    <span class="na">chat</span><span class="pi">:</span>
      <span class="na">options</span><span class="pi">:</span>
        <span class="na">model</span><span class="pi">:</span> <span class="s">gpt-4o</span>
  <span class="c1"># virual thread</span>
  <span class="na">threads.virtual.enabled</span><span class="pi">:</span> <span class="kc">true</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code>파일에 위와 같은 내용을 작성했습니다.</p>

<h3 id="4-chatgpt에게-질문하기">4. ChatGPT에게 질문하기</h3>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">package com.sushistack.spring.private_ai;
</span><span class="err">
</span><span class="p">import org.springframework.ai.chat.client.ChatClient;
import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
</span><span class="err">
</span>@SpringBootApplication
<span class="p">public class PrivateAiApplication {
</span><span class="err">
</span>	public static void main(String[] args) {
		SpringApplication.run(PrivateAiApplication.class, args);
	}
<span class="err">
</span><span class="gi">+	@Bean
+   ChatClient chatClient (ChatClient.Builder builder) {
+		return builder.build();
+	}
+
+	@Bean
+	ApplicationRunner applicationRunner (ChatClient ai) {
+		return new ApplicationRunner () {
+			@Override
+			public void run (ApplicationArguments args) throws Exception {
+
+				var query = """
+						안녕?
+						""";
+
+				ChatClient.ChatClientRequest req = ai.prompt().user(query);
+				String content = req.call().content();
+				System.out.println(content);
+			}
+		};
+	}
</span><span class="err">
</span>}
<span class="err">
</span></code></pre></div></div>

<p>위 처럼 ChantClient와 ChatClient를 이용하여 ChatGPT에게 쿼리를 요청하는 ApplicationRunner를 Bean으로 각각 등록해줍니다.</p>

<p><img src="/assets/images/springai-01.png" alt="spring ai 01" /></p>

<p>그리고 프로젝트를 실행하면 위 처럼 간단한 코드로 ChatGPT와 채팅할 수 있는 앱을 만들었습니다.</p>

<h2 id="spring-ai-apis">Spring AI APIs</h2>

<p>Spring AI는 다양한 기능들을 포함하고 있습니다. Spring AI API의 주요 기능들을 하나씩 알아보도록 하겠습니다.</p>

<h3 id="ai-model-api">AI Model API</h3>

<p><img src="/assets/images/springai-02.jpg" alt="spring ai 02" /></p>

<p>모델(Model) API는 위 처럼 Chat, TTS(Text to Seepch), TTI(Text to Image), Audio Transcription, embedding 등을 제공하고 있습니다. 뿐만 아니라 비동기와 스트리밍 API 옵션도 지원합니다.</p>

<p><img src="/assets/images/springai-03.jpg" alt="spring ai 03" /></p>

<p>위와 같이 이미 너무나 유명한 AI 모델들(OpenAI, Bedrock, Gemini 등)은 이미 구현이 되어 있습니다.</p>

<h4 id="chat-model-구성도">Chat Model 구성도</h4>

<p><img src="/assets/images/springai-04.jpg" alt="spring ai 04" /></p>

<h5 id="prompt">Prompt</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Prompt</span> <span class="kd">implements</span> <span class="nc">ModelRequest</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Message</span><span class="o">&gt;&gt;</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Message</span><span class="o">&gt;</span> <span class="n">messages</span><span class="o">;</span>

	<span class="kd">private</span> <span class="nc">ChatOptions</span> <span class="n">modelOptions</span><span class="o">;</span>

  <span class="c1">// ... 생략</span>
<span class="o">}</span>
</code></pre></div></div>

<p>프롬프트는 AI 모델이 특정 출력을 유도하도록 해주는 부분입니다. RunTime에 Chat에 대한 옵션을 설정할 수 있고, 입력 값(Messages)들은 ChatModel의 전달됩니다.</p>

<h4 id="chatmodel--streamingchatmodel">ChatModel (+ StreamingChatModel)</h4>

<p>Prompt로 부터 전달 받은 옵션과 데이터를 각 외부 LLM 모델 API를에 요청하는 역할을 합니다.</p>

<h4 id="chatresponse">ChatResponse</h4>

<p>채팅 응답에 대한 메타데이터와 LLM 모델의 출력 값을 가지는 응답 객체입니다.</p>

<h4 id="refs">Refs.</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/chatmodel.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Chat Model API :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/embeddings.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Embeddings Model API :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/imageclient.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Image Model API :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/audio/transcriptions.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Transcription API :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/audio/speech.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Text-To-Speech (TTS) API :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<h3 id="vector-store-api">Vector Store API</h3>

<p>벡터 저장소(Vector Store)는 벡터 검색을 위해서 사용하게 됩니다. 예를 들어 다음과 같은 과정으로 벡터 저장소가 사용될 수 있습니다.</p>

<blockquote>
  <p>벡터의 사용</p>
  <ol>
    <li>임배딩 생성: 텍스트, 이미지, 오디오 등을 AI 모델(GPT 등)을 통해 벡터를 생성합니다.</li>
    <li>벡터 저장소에 저장: 생성된 벡터를 저장합니다.</li>
    <li>새로운 검색: 새로운 입력 데이터가 들어오면 이를 벡터로 변환하고, 벡터 저장소에서 유사한 벡터를 검색합니다.</li>
    <li>AI 모델에 전달: 검색된 벡터와 관련된 데이터를 AI 모델에 전달하여 적절한 응답을 생성하거나 추가 분석을 수행합니다.</li>
  </ol>
</blockquote>

<h4 id="refs-1">Refs.</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/vectordbs.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Vector Databases :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<h3 id="function-calling-api">Function Calling API</h3>

<p><img src="/assets/images/springai-05.jpg" alt="spring ai 05" /></p>

<p>위 처럼 Spring AI는 함수형을 지원하기 때문에, 개발자가 함수를 통해 내부를 건드리지 않고 로직을 실행 시킬 수 있습니다.</p>

<h3 id="etl-data-engineering">ETL Data Engineering</h3>

<p><img src="/assets/images/springai-06.jpg" alt="spring ai 06" /></p>

<p>데이터 엔지니어링을 위한 ETL 프레임워크는 다양한 외부 벡터 데이터를 벡터 데이터베이스에 로드할 수 있도록 해줍니다. 이를 통해서 AI 모델에 더 많고 벡터 데이터 전달할 수 있습니다.</p>

<h2 id="맺음">맺음</h2>

<p>Spring I/O 2024에 참여해서 직접 참여했던 세션인데요, 좋은 경험이었던 것 같습니다. 아래는 Spring AI 세션 Youtube 링크입니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://www.youtube.com/watch?v=umKbaXsiCOY" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Introducing Spring AI by Christian Tzolov / Mark Pollack @ Spring I/O 2024 - YouTube</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">www.youtube.com</span>
        </div>
      </div>
    </a>
</div>

<p>감사합니다.</p>]]></content><author><name>deeplify</name></author><category term="back-end" /><category term="spring" /><category term="spring" /><category term="spring I/O 2024" /><category term="spring AI" /><summary type="html"><![CDATA[Spring I/O 2024에 소개된 Spring AI에 대해서 알아보고 예제를 통해 사용법을 익혀보는 시간을 가져보겠습니다.]]></summary></entry><entry><title type="html">[Java] GraalVM 이란?</title><link href="https://deeplify.dev/back-end/java/graalVM" rel="alternate" type="text/html" title="[Java] GraalVM 이란?" /><published>2024-06-16T00:00:00+09:00</published><updated>2024-06-16T00:00:00+09:00</updated><id>https://deeplify.dev/back-end/java/graalvm</id><content type="html" xml:base="https://deeplify.dev/back-end/java/graalVM"><![CDATA[<p>Oracle GraalVM은 고성능의 JIT(Just-In-Time) 컴파일러를 사용하여 Java 및 JVM 기반 애플리케이션의 성능을 가속화할 수 있는 고성능 JDK입니다. 이 솔루션은 애플리케이션 대기 시간을 줄이고 가비지 수집 시간을 단축하여 최대 처리량을 개선할 수 있습니다.</p>

<p>또한 AOT(Ahead-Of-Time) 컴파일러를 사용하여 미리 Java 바이트코드를 개별 운영체제 혹은 시스템에서 실행 가능한 이미지를 만드는 네이티브 이미지 유틸리티가 있습니다.</p>

<h2 id="graalvm-얼마나-좋은데">GraalVM 얼마나 좋은데?</h2>

<h3 id="graalvm-설치">GraalVM 설치</h3>

<p><a href="https://www.graalvm.org/latest/docs/getting-started/macos/">Installation on macOS</a></p>

<h4 id="java_home-설정">JAVA_HOME 설정</h4>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>java <span class="nt">--version</span>
java 22.0.1 2024-04-16
Java<span class="o">(</span>TM<span class="o">)</span> SE Runtime Environment Oracle GraalVM 22.0.1+8.1 <span class="o">(</span>build 22.0.1+8-jvmci-b01<span class="o">)</span>
Java HotSpot<span class="o">(</span>TM<span class="o">)</span> 64-Bit Server VM Oracle GraalVM 22.0.1+8.1 <span class="o">(</span>build 22.0.1+8-jvmci-b01, mixed mode, sharing
</code></pre></div></div>

<h3 id="spring-boot-벤치마크">Spring Boot 벤치마크</h3>

<p>GraalVM의 가장 독특한 기능인 AOT 컴파일러를 이용한 Native 이미지를 생성하여 기존 방식과의 차이점을 확인해보겠습니다.</p>

<p>일반적으로 많이 사용하는 Spring boot를 이용하여 실행 시간을 비교해보도록 하겠습니다.</p>

<blockquote>
  <p>비교 요소</p>
  <blockquote>
    <ol>
      <li>JDK 버전</li>
      <li>컴파일 방식 (JIT, AOT)</li>
    </ol>
  </blockquote>
</blockquote>

<h4 id="case1-jdk-11--boot-275">Case1) JDK 11 + Boot 2.7.5</h4>

<p><img src="/assets/images/benchmark-graalvm01.png" alt="graalvm01" /></p>

<p>=&gt; 8초</p>

<h4 id="case2-jdk-21-temurin--boot-330">Case2) JDK 21 (temurin) + Boot 3.3.0</h4>

<p><img src="/assets/images/benchmark-graalvm02.png" alt="graalvm02" /></p>

<p>=&gt; 2초</p>

<h4 id="case3-graalvm-22--aot--boot-330">Case3) GraalVM 22 + AOT + Boot 3.3.0</h4>

<p><img src="/assets/images/benchmark-graalvm03.png" alt="graalvm03" /></p>

<p>=&gt; 0.084초 !!</p>

<p>Case1에 비해 약 100배 정도 빠름.</p>

<p><br /></p>

<h2 id="java-컴파일러-비교">Java 컴파일러 비교</h2>

<p>Java는 C, C++ 등과 다르게 플랫폼에 대한 종속없이 실행될 수 있도록 JVM을 도입했습니다.</p>

<p>JVM의 사용은 플랫폼 종속성은 없앨 수 있었지만, 실행 시점에 JVM 위에서 바이트코드가 실시간으로 기계어로 번역(JIT Complie)하는 작업이 추가로 들어가야합니다.</p>

<p>이러한 이유로 실행 시, Java가 다른 언어보다 느리다고 알려져 있습니다.</p>

<h3 id="jit-just-in-time-컴파일러">JIT (Just-In-Time) 컴파일러</h3>

<p><img src="/assets/images/benchmark-graalvm04.png" alt="graalvm04" /></p>

<p>Java의 느린 단점을 보완하기 위해 HotSpot VM 기반의 고성능 JIT (Just-In-Time) 컴파일러가 Java 1.3 버전부터 추가되었습니다.</p>

<p>이 JIT 컴파일러의 목표는 빠른 컴파일 및 특정 환경에 맞춤화된 최적화입니다.</p>

<h3 id="aot-ahead-of-time-컴파일러">AOT (Ahead-Of-Time) 컴파일러</h3>

<p><img src="/assets/images/benchmark-graalvm03-1.png" alt="graalvm05" /></p>

<p>C, C++ 등에서 사용하는 컴파일러로 플랫폼에서 동작할 수 있는 네이티브 코드로 이루어진 실행 파일을 만들어냅니다.</p>

<p><br /></p>

<h2 id="java의-aot-컴파일러">Java의 AOT 컴파일러</h2>

<p><img src="/assets/images/benchmark-graalvm05.png" alt="graalvm05" /></p>

<p>사실 상 JIT 컴파일러는 애플리케이션 초기 웜업 시간이 필요하여 느리지만, 굉장히 오랜 연구 끝에 극도로 최적화가 잘되어 있어 실행 중인 시점에는 AOT 컴파일러를 능가하는 성능을 보여주기도 합니다.</p>

<p>그럼에도 Java에서 AOT 컴파일러를 적용하려는 이유는 아래와 같습니다.</p>

<ol>
  <li>JIT 컴파일러는 C++ 로 되어 있으나, C++ 개발자를 구하기 힘듬.</li>
  <li>JIT 컴파일러는 오랜 기간 연구된 만큼 엄청 복잡 함.</li>
  <li>최적화 측면에서 거의 한계에 봉착 함.</li>
</ol>

<h3 id="native-이미지의-한계">Native 이미지의 한계</h3>

<p><img src="/assets/images/benchmark-graalvm06.png" alt="graalvm06" /></p>

<p>위 그림을 보면 AOT와 JIT 컴파일러에 따른 초당 요청 처리 수를 보여주고 있습니다. AOT 컴파일러의 경우 Compile Time에 최적화를 진행하기 때문에 거의 일정한 성능을 보여줍니다, 반면 JIT의 경우 Run Time에 현재 실행 환경에 맞게 최적화를 진행합니다.</p>

<p>AOT 컴파일러가 초반의 빠른 실행과 처리에 초점이 맞춰져 있다면, JIT는 현재 실행환경에 맞게 최적화하는데 초점이 맞춰져 있다고 볼 수 있습니다.</p>

<p>또한 AOT 컴파일러를 통해 생성된 Native 이미지의 스타트가 빠른 이유는 바로 힙(Heap) 이미지 때문입니다. static 블록, 클래스 로딩 등을 미리 이미지화 시켜서 힙 이미지에 저장하여 빠른 실행이 가능합니다.</p>

<p>하지만 이렇게 정적으로 미리 이미지화 해두는 방식은 Java, Spring에서 사용하는 리플렉션, 클래스 로딩, 동적 프록시 등 다양한 동적 기술에 대해서 문제가 발생합니다.</p>

<h2 id="jit-vs-aot">JIT vs AOT</h2>

<p><img src="/assets/images/benchmark-graalvm07.png" alt="graalvm07" /></p>

<p>위 그림과 JIT 컴파일러와 AOT 컴파일러의 장단점을 구분할 수 있습니다.</p>

<p>따라서 적은 메모리 사용량, 작은 패키징, 빠른 실행이 필요한 경우 AOT를 레이턴시, 성능 등이 중요한 경우 JIT를 사용하는 식으로 시스템 요구사항에 맞게 선택하여 사용하면 좋을 것 같습니다.</p>]]></content><author><name>deeplify</name></author><category term="back-end" /><category term="java" /><category term="java" /><category term="oracle" /><category term="graalVM" /><category term="AOT" /><category term="spring" /><summary type="html"><![CDATA[Oracle GraalVM에 대해서 알아보고, 장단점을 자세하게 알아봅시다.]]></summary></entry><entry><title type="html">Spring I/O 2024 참여 후기</title><link href="https://deeplify.dev/back-end/spring/spring-io-2024" rel="alternate" type="text/html" title="Spring I/O 2024 참여 후기" /><published>2024-06-12T00:00:00+09:00</published><updated>2024-06-12T00:00:00+09:00</updated><id>https://deeplify.dev/back-end/spring/spring-io-2024</id><content type="html" xml:base="https://deeplify.dev/back-end/spring/spring-io-2024"><![CDATA[<p>운이 좋게도 Spring I/O 2024에 참여할 수 있는 기회를 얻게 되었습니다. 컨퍼런스에 참석해서 보고 들었던 내용들을 공유해보면 어떨까하여 이 글을 작성해봅니다.</p>

<p>Spring I/O는 매년 1회 스페인 바르셀로나에서만 진행하는 것 같습니다. 2022년부터 올해 2024년까지 모두 스페인 바르셀로나에서만 진행습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://2024.springio.net/" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Spring I/O 2024 - The Spring Developer Conference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text"></span>
        </div>
      </div>
    </a>
</div>

<p>위 링크를 통해서 Spring I/O 공식 홈페이지로 이동하실 수 있습니다.</p>

<p><img src="/assets/images/springio-01.png" alt="spring-io1" /></p>

<div class="related-link-wrap">
    <a class="related-link" href="https://2024.springio.net/sessions" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Sessions | Spring I/O 2024 - The Spring Developer Conference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text"></span>
        </div>
      </div>
    </a>
</div>

<p>위와 같이 5월 30일과 31일 2일간 Spring과 관련된 다양한 주제의 세션을 들을 수가 있었습니다.</p>

<h2 id="spring-io">Spring I/O</h2>

<p><img src="/assets/images/springio-02.jpg" alt="spring-io2" /></p>

<p>네이버, 삼성, NHN 등의 회사의 컨퍼런스를 몇 번 가본적이 있는데, 해외의 컨퍼런스의 키노트는 어떨지 너무 궁금했습니다.</p>

<h3 id="오프닝">오프닝</h3>

<style>.embed-container { position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%; } .embed-container iframe, .embed-container object, .embed-container embed { position: absolute; top: 0; left: 0; width: 100%; height: 100%; }</style>

<div class="embed-container">
  <iframe src="https://www.youtube.com/embed//LwP94kgKzKM" frameborder="0" allowfullscreen=""></iframe>
</div>

<p>키노트가 시작되기 전에 자리에 앉아 있었는데, 갑자기 음악과 함께 무대 위에서 드론들이 움직이기 시작했습니다.</p>

<p>역시 입장권 값하는구나 싶은 생각이 들었습니다.</p>

<h3 id="keynote-시작">keynote 시작</h3>

<p>키노트는 세션을 준비한 스피커들이 짧게짧게 자신의 세션에 대해서 소개하는 시간이었습니다.</p>

<h2 id="내가-들었던-세션들">내가 들었던 세션들</h2>

<p>저는 영어를 잘하는 편이 아니기 때문에 스피커가 말하는 내용을 완전히 이해한 것은 아니지만, 다양한 시각 자료들과 코드들을 함께 보여줬기 때문에 그나마 다행이었던 것 같습니다.</p>

<p>제가 선택한 세션들은 다음과 같습니다.</p>

<blockquote>
  <p>5월 30일</p>
  <ol>
    <li>Keynote</li>
    <li>Distributed Scheduling with Spring Boot: the challenges &amp; pitfalls of implementing a background job</li>
    <li>Spring Security Architecture Principles</li>
    <li>Build faster persistence layers with Spring Data JPA 3</li>
    <li>Spring Framework 6.2: Core Container Revisited</li>
    <li>Going AOT: Everything you need to know about GraalVM for Java applications</li>
    <li>Introducing Spring AI</li>
  </ol>
</blockquote>

<blockquote>
  <p>5월 31일</p>
  <ol>
    <li>Platform Engineering with Spring Boot</li>
    <li>The Modern Monolith, with Spring Modulith</li>
    <li>The Future of Java Performance in Serverless: Native Java, CRaC and Project Leydens</li>
    <li>Bootiful Spring Boot 3.x</li>
    <li>Implementing Domain Driven Design with Spring</li>
    <li>Lean Spring Boot Applications for The Cloud</li>
    <li>Beyond Built-in: Advanced Testing Techniques for Spring Boot Applications</li>
  </ol>
</blockquote>

<h3 id="만남">만남</h3>

<p>컨퍼런스용 앱인 Whova에서 같은 국가에서 온 참여자들을 추천해주는 기능이 있어, 컨퍼런스에 참여한 한국 사람들을 만날 수 있었습니다.</p>

<p>그 중 한 분은 깜짝 놀랐던 것이 제가 예전에 사서 읽었던 책의 저자이신 toby님이었고, 함께 사진도 찍고 점심도 먹고하는 시간을 가질 수 있었습니다.</p>

<h2 id="맺음">맺음</h2>

<p>Spring I/O 2024에 참여해서 너무너무 좋은 경험 얻을 수 있었습니다.</p>

<p>새로운 기술과 이론 등을 접할 수 있는 기회를 실시간으로 참여하여 볼 수 있어서 너무 좋았습니다.</p>

<p>제가 들었던 것을 포함하여 제가 보지 못했던 세션들은 모두 Youtube에 Spring IO 채널에서 확인 하실 수 있습니다.</p>]]></content><author><name>deeplify</name></author><category term="back-end" /><category term="spring" /><category term="spring" /><category term="spring I/O 2024" /><category term="spring boot 3" /><category term="spring AI" /><category term="spring modulith" /><summary type="html"><![CDATA[Spring I/O에 참여한 후기 및 Spring 관련 다양한 기술들을 소개합니다.]]></summary></entry><entry><title type="html">Self hosted Github Actions Runner 설치 가이드 (With. Docker)</title><link href="https://deeplify.dev/tools/git/self-hosted-github-actions-runner-install-guide" rel="alternate" type="text/html" title="Self hosted Github Actions Runner 설치 가이드 (With. Docker)" /><published>2024-03-23T00:00:00+09:00</published><updated>2024-03-23T00:00:00+09:00</updated><id>https://deeplify.dev/tools/git/self-hosted-github-actions-install-guide</id><content type="html" xml:base="https://deeplify.dev/tools/git/self-hosted-github-actions-runner-install-guide"><![CDATA[<p>이번 포스팅에서는 Self hosted Github Actions Runner를 설치 하는 방법과 설치된 Actions Runner 위에서 실행되는 workflow를 만들어보고 실행해보는 시간을 가져 보겠습니다.</p>

<h2 id="github-설정">Github 설정</h2>

<blockquote>
  <p>환경</p>
  <ol>
    <li>Github Enterprise를 사용 중입니다.</li>
    <li>권한은 Organization 어드민 권한입니다. (Enterprise Owers 아님)</li>
    <li>Actions Runner가 설치될 서버의 OS는 Ubuntu 22.04 입니다.</li>
    <li>Actions Runner는 Docker로 래핑하여 구성합니다.</li>
    <li>쿠버네티스는 사용하지 않고, docker-compose를 통해 단순 배포하는 형식으로 진행합니다.</li>
  </ol>
</blockquote>

<h3 id="1-github-설정">1. github 설정</h3>

<h4 id="러너-그룹-설정">러너 그룹 설정</h4>

<p>우선 러너 그룹은 Enterprise에서만 사용 가능합니다. 러너들의 그룹을 설정하는 이유는 리소스 관리와 캐시의 사용성 등을 위함입니다. 예를 들어 java 빌드용 러너가 있을 수 있고, python 빌드용 러너가 있을 수 있습니다.</p>

<p><img src="/assets/images/gh-actions-runner-01.jpg" alt="gh-action-runner-01" /></p>

<p>위 사진과 같이 Orgaization의 설정으로 이동합니다.</p>

<p><img src="/assets/images/gh-actions-runner-02.jpg" alt="gh-action-runner-02" /></p>

<p>왼쪽 메뉴의 Actions &gt; Runner Groups로 이동하여 <code class="language-plaintext highlighter-rouge">New runner group</code>을 눌러줍니다.</p>

<p><img src="/assets/images/gh-actions-runner-03.jpg" alt="gh-action-runner-03" /></p>

<p>러너 그룹 이름과 해당 그룹이 사용될 repository, workflow에 대한 접근 권한 설정을 할 수 있습니다.</p>

<h4 id="러너-생성">러너 생성</h4>

<p>Self-hosted Runner 의 경우, github 설정 페이지를 통해서 생성할 수도 있고 PAT(Personal-Access-Token)을 이용하여 외부에서 설치하면서 연동할 수도 있습니다.</p>

<p><img src="/assets/images/gh-actions-runner-04.jpg" alt="gh-action-runner-04" /></p>

<p>위 사진과 같이 왼쪽 메뉴에서 Actions &gt; Runners로 이동하여 <code class="language-plaintext highlighter-rouge">New runner</code>를 눌러줍니다.</p>

<p><img src="/assets/images/gh-actions-runner-05.jpg" alt="gh-action-runner-05" /></p>

<p>위와 같이 러너를 설치 가이드가 상세하게 작성되어 있습니다.</p>

<h3 id="2-외부에서-러너-설치-및-연동">2. 외부에서 러너 설치 및 연동</h3>

<blockquote>
  <p>사전 조건</p>
  <ol>
    <li>러너 그룹은 생성되어 있다고 가정합니다.</li>
    <li>PAT(Personal-Access-Token)은 발급 받은 상태여야 합니다. (최소 admin:org, admin:enterprise 권한 필요)</li>
    <li>도커가 설치되어 있어야 합니다.</li>
  </ol>
</blockquote>

<h4 id="도커-이미지-선택하기">도커 이미지 선택하기</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/actions/runner-images" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">actions/runner-images: GitHub Actions runner images</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<p>Github Actions에서 공식으로 제공하는 Runner 이미지 입니다. 위 레포지토리에서 필요한 이미지를 선택해서 다운 받아서 진행해도 무방합니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">runner-images/images/ubuntu/Ubuntu2204-Readme.md at main · actions/runner-images</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<p>하지만 위 내용을 읽어보시면, 러너 이미지 내에 잘 사용하지도 않는 너무 많은 패키지들과 툴들이 설치되어 있어 저는 새롭게 Dockerfile을 만들어서 진행하도록 하겠습니다.</p>

<h4 id="커스텀-액션-러너-이미지-만들기-및-설치">커스텀 액션 러너 이미지 만들기 및 설치</h4>

<h5 id="dockerfile">Dockerfile</h5>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Base Image</span>
<span class="k">FROM</span><span class="s"> ubuntu:22.04</span>

<span class="c"># 기본 패키지 설치 &amp; 그룹 및 유저 추가</span>
<span class="k">RUN </span>apt-get update <span class="nt">-y</span> <span class="o">&amp;&amp;</span> apt-get upgrade <span class="nt">-y</span> <span class="o">&amp;&amp;</span> useradd <span class="nt">-m</span> docker

<span class="c"># 패키지 설치</span>
<span class="k">RUN </span><span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span>noninteractive apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="se">\
</span>    <span class="nt">--no-install-recommends</span> <span class="se">\
</span>    curl <span class="se">\
</span>    wget <span class="se">\
</span>    unzip <span class="se">\
</span>    jq <span class="se">\
</span>    build-essential <span class="se">\
</span>    libssl-dev <span class="se">\
</span>    libffi-dev <span class="se">\
</span>    ca-certificates <span class="se">\
</span>    git <span class="se">\
</span>    gnupg <span class="se">\
</span>    gpg <span class="se">\
</span>    locales <span class="se">\
</span>    tzdata

<span class="c"># Locale 설정</span>
<span class="k">RUN </span>locale-gen en_US.UTF-8
<span class="k">ENV</span><span class="s"> LC_ALL en_US.UTF-8</span>

<span class="c"># Timezone 설정</span>
<span class="k">ENV</span><span class="s"> TZ=Asia/Seoul</span>

<span class="c"># GitHub CLI 설치</span>
<span class="k">RUN </span>curl <span class="nt">-fsSL</span> https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg <span class="nt">--dearmor</span> <span class="nt">-o</span> /usr/share/keyrings/githubcli-archive-keyring.gpg<span class="p">;</span>
<span class="k">RUN </span><span class="nb">echo</span> <span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"</span> | <span class="nb">tee</span> /etc/apt/sources.list.d/github-cli.list <span class="o">&gt;</span> /dev/null<span class="p">;</span>
<span class="k">RUN </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> gh

<span class="c"># Gradle 설치</span>
<span class="k">ENV</span><span class="s"> GRADLE_VERSION=8.7</span>
<span class="k">ENV</span><span class="s"> GRADLE_HOME=/opt/gradle</span>
<span class="k">ENV</span><span class="s"> PATH=$PATH:$GRADLE_HOME/bin</span>
<span class="k">RUN </span>curl <span class="nt">-L</span> https://services.gradle.org/distributions/gradle-<span class="k">${</span><span class="nv">GRADLE_VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip <span class="nt">-o</span> gradle-<span class="k">${</span><span class="nv">GRADLE_VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip <span class="o">&amp;&amp;</span> <span class="se">\
</span>   unzip <span class="nt">-d</span> /opt gradle-<span class="k">${</span><span class="nv">GRADLE_VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip <span class="o">&amp;&amp;</span> <span class="se">\
</span>   <span class="nb">ln</span> <span class="nt">-s</span> /opt/gradle-<span class="k">${</span><span class="nv">GRADLE_VERSION</span><span class="k">}</span> /opt/gradle <span class="o">&amp;&amp;</span> <span class="se">\
</span>   <span class="nb">rm </span>gradle-<span class="k">${</span><span class="nv">GRADLE_VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip

<span class="c"># Maven 다운로드 및 설치</span>
<span class="k">ENV</span><span class="s"> MAVEN_VERSION=3.9.6</span>
<span class="k">ENV</span><span class="s"> MAVEN_HOME /opt/maven</span>
<span class="k">ENV</span><span class="s"> PATH $MAVEN_HOME/bin:$PATH</span>
<span class="k">RUN </span>wget <span class="nt">-q</span> <span class="nt">-O</span> /tmp/apache-maven.zip https://dlcdn.apache.org/maven/maven-3/<span class="k">${</span><span class="nv">MAVEN_VERSION</span><span class="k">}</span>/binaries/apache-maven-<span class="k">${</span><span class="nv">MAVEN_VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip <span class="o">&amp;&amp;</span> <span class="se">\
</span>   unzip <span class="nt">-q</span> /tmp/apache-maven.zip <span class="nt">-d</span> /opt <span class="o">&amp;&amp;</span> <span class="se">\
</span>   <span class="nb">ln</span> <span class="nt">-s</span> /opt/apache-maven-<span class="k">${</span><span class="nv">MAVEN_VERSION</span><span class="k">}</span> /opt/maven <span class="o">&amp;&amp;</span> <span class="se">\
</span>   <span class="nb">rm</span> <span class="nt">-f</span> /tmp/apache-maven.zip

<span class="c"># GitHub Actions Runner 다운로드 및 설치</span>
<span class="k">ENV</span><span class="s"> RUNNER_VERSION=2.315.0</span>
<span class="k">RUN </span><span class="nb">mkdir</span> <span class="nt">-p</span> /home/docker/actions-runner <span class="o">&amp;&amp;</span> <span class="nb">cd</span> /home/docker/actions-runner <span class="o">&amp;&amp;</span> <span class="se">\
</span>    curl <span class="nt">-O</span> <span class="nt">-L</span> https://github.com/actions/runner/releases/download/v<span class="k">${</span><span class="nv">RUNNER_VERSION</span><span class="k">}</span>/actions-runner-linux-x64-<span class="k">${</span><span class="nv">RUNNER_VERSION</span><span class="k">}</span>.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">tar </span>xzf /home/docker/actions-runner/actions-runner-linux-x64-<span class="k">${</span><span class="nv">RUNNER_VERSION</span><span class="k">}</span>.tar.gz <span class="o">&amp;&amp;</span> ./bin/installdependencies.sh <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">rm</span> <span class="nt">-rf</span> /home/docker/actions-runner/actions-runner-linux-x64-<span class="k">${</span><span class="nv">RUNNER_VERSION</span><span class="k">}</span>.tar.gz

<span class="c"># docker 디렉토리 소유주 변경</span>
<span class="k">RUN </span><span class="nb">cd</span> /home <span class="o">&amp;&amp;</span> <span class="nb">chown</span> <span class="nt">-R</span> docker:docker docker

<span class="c"># copy over the entrypoint.sh script</span>
<span class="k">COPY</span><span class="s"> entrypoint.sh entrypoint.sh</span>

<span class="c"># make the script executable</span>
<span class="k">RUN </span><span class="nb">chmod</span> +x entrypoint.sh

<span class="c"># Set Host OS User</span>
<span class="k">USER</span><span class="s"> docker</span>

<span class="c"># set the entrypoint to the entrypoint.sh script</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["./entrypoint.sh"]</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">GITHUB_HOST</span><span class="o">=</span><span class="nv">$GITHUB_HOST</span>                        <span class="c"># github.com / enterprise host</span>
<span class="nv">RUNNER_GROUP</span><span class="o">=</span><span class="nv">$RUNNER_GROUP</span>                      <span class="c"># ex) group-1</span>
<span class="nv">ORGANIZATION</span><span class="o">=</span><span class="nv">$ORGANIZATION</span>                      <span class="c"># ex) your organization</span>
<span class="nv">CONTAINER_NUM</span><span class="o">=</span><span class="nv">$CONTAINER_NUM</span>                    <span class="c"># ex) 1,2,3 ...</span>
<span class="nv">GITHUB_API_URI</span><span class="o">=</span><span class="nv">$GITHUB_API_URI</span>                  <span class="c"># ex) orgs, api/v3/orgs</span>
<span class="nv">GITHUB_API_HOST</span><span class="o">=</span><span class="nv">$GITHUB_API_HOST</span>                <span class="c"># ex) api.github.com</span>
<span class="nv">PERSONAL_ACCESS_TOKEN</span><span class="o">=</span><span class="nv">$PERSONAL_ACCESS_TOKEN</span>    <span class="c"># ex) ghp_xxx</span>
<span class="nv">GITHUB_API_URL</span><span class="o">=</span><span class="s2">"https://</span><span class="nv">$GITHUB_API_HOST</span><span class="s2">/</span><span class="nv">$GITHUB_API_URI</span><span class="s2">/</span><span class="nv">$ORGANIZATION</span><span class="s2">/actions/runners/registration-token"</span>

<span class="c"># Github CLI Login</span>
gh <span class="nt">--version</span>
<span class="nb">echo</span> <span class="nv">$PERSONAL_ACCESS_TOKEN</span> | gh auth login <span class="nt">--hostname</span> <span class="nv">$GITHUB_HOST</span> <span class="nt">--with-token</span>

<span class="c"># Getting registration token for action runner</span>
<span class="nv">RUNNER_REG_TOKEN</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-sX</span> POST <span class="nt">-H</span> <span class="s2">"Accept: application/vnd.github+json"</span> <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="k">${</span><span class="nv">PERSONAL_ACCESS_TOKEN</span><span class="k">}</span><span class="s2">"</span> <span class="k">${</span><span class="nv">GITHUB_API_URL</span><span class="k">}</span> | jq .token <span class="nt">--raw-output</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"reg token := </span><span class="nv">$RUNNER_REG_TOKEN</span><span class="s2">"</span>

<span class="nb">cd</span> /home/docker/actions-runner

./config.sh <span class="se">\</span>
    <span class="nt">--replace</span> <span class="se">\</span>
    <span class="nt">--token</span> <span class="k">${</span><span class="nv">RUNNER_REG_TOKEN</span><span class="k">}</span> <span class="se">\</span>
    <span class="nt">--url</span> https://<span class="k">${</span><span class="nv">GITHUB_HOST</span><span class="k">}</span>/<span class="k">${</span><span class="nv">ORGANIZATION</span><span class="k">}</span> <span class="se">\</span>
    <span class="nt">--name</span> <span class="k">${</span><span class="nv">RUNNER_GROUP</span><span class="k">}</span><span class="nt">-runner-</span><span class="k">${</span><span class="nv">CONTAINER_NUM</span><span class="k">}</span> <span class="se">\</span>
    <span class="nt">--runnergroup</span> <span class="k">${</span><span class="nv">RUNNER_GROUP</span><span class="k">}</span> <span class="se">\</span>
    <span class="nt">--labels</span> ubuntu,<span class="k">${</span><span class="nv">RUNNER_GROUP</span><span class="k">}</span>

cleanup<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"Removing runner..."</span>
    ./config.sh remove <span class="nt">--unattended</span> <span class="nt">--token</span> <span class="k">${</span><span class="nv">RUNNER_REG_TOKEN</span><span class="k">}</span>
<span class="o">}</span>

<span class="nb">trap</span> <span class="s1">'cleanup; exit 130'</span> INT
<span class="nb">trap</span> <span class="s1">'cleanup; exit 143'</span> TERM

./run.sh &amp; <span class="nb">wait</span> <span class="nv">$!</span>
</code></pre></div></div>

<p>위와 같은 내용으로 필요한 것만 설치하여 Dockerfile을 생성했습니다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Dockerfile이 있는 위치로 이동 후</span>
<span class="c"># Dockerfile과 entrypoint.sh가 같은 디렉토리에 있어야 합니다.</span>
<span class="nv">$ </span>docker build <span class="nt">-t</span> &lt;your-docker-hub-name&gt;/github-actions-runner:1.0.0 <span class="nb">.</span>

<span class="c"># 빌드 완료 후, 이미지가 잘 만들어졌는지 확인.</span>
<span class="nv">$ </span>docker images
REPOSITORY                                                     TAG         IMAGE ID       CREATED         SIZE
&lt;your-docker-hub-name&gt;/github-actions-runner                                 1.0.0       71667fbff8f4   1 days ago     1.9GB
</code></pre></div></div>

<p>위와 같이 빌드를 실행해줍니다.</p>

<h5 id="docker-composeyml">docker-compose.yml</h5>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">build-runner1</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">&lt;your-docker-hub-name&gt;/github-actions-runner:1.0.0</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">github-actions_runner-1:/home/docker/actions-runner</span>
    <span class="na">logging</span><span class="pi">:</span>
      <span class="na">driver</span><span class="pi">:</span> <span class="s1">'</span><span class="s">json-file'</span>
      <span class="na">options</span><span class="pi">:</span>
        <span class="na">max-size</span><span class="pi">:</span> <span class="s1">'</span><span class="s">20m'</span>
        <span class="na">max-file</span><span class="pi">:</span> <span class="s1">'</span><span class="s">10'</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">TZ=Asia/Seoul</span>
      <span class="pi">-</span> <span class="s">GITHUB_HOST=&lt;Your-Github-Enterprise-Host&gt;</span>
      <span class="pi">-</span> <span class="s">RUNNER_GROUP=build</span>
      <span class="pi">-</span> <span class="s">ORGANIZATION=&lt;Your-Organization&gt;</span>
      <span class="pi">-</span> <span class="s">CONTAINER_NUM=1</span>
      <span class="pi">-</span> <span class="s">GITHUB_API_URI=api/v3/orgs</span>
      <span class="pi">-</span> <span class="s">GITHUB_API_HOST=&lt;Your-Github-Enterprise-Host&gt;</span>
      <span class="pi">-</span> <span class="s">PERSONAL_ACCESS_TOKEN=&lt;Your-PAT&gt;</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">github-actions_runner-1</span><span class="pi">:</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker compose up
<span class="c"># docker compose up -d 데몬으로 실행</span>
</code></pre></div></div>

<p>docker compose 파일을 위와 같이 생성한 뒤, compose 명령으로 해당 컨테이너를 띄워줍니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker compose up
WARNING: Some services (runner) use the 'deploy' key, which will be ignored. Compose does not support 'deploy' configuration - use `docker stack deploy` to deploy to a swarm.
Recreating github-action-runner_runner_1 ... done
Attaching to github-action-runner_runner_1
runner_1  | --------------------------------------------------------------------------------
runner_1  | |        ____ _ _   _   _       _          _        _   _                      |
runner_1  | |       / ___(_) |_| | | |_   _| |__      / \   ___| |_(_) ___  _ __  ___      |
runner_1  | |      | |  _| | __| |_| | | | | '_ \    / _ \ / __| __| |/ _ \| '_ \/ __|     |
runner_1  | |      | |_| | | |_|  _  | |_| | |_) |  / ___ \ (__| |_| | (_) | | | \__ \     |
runner_1  | |       \____|_|\__|_| |_|\__,_|_.__/  /_/   \_\___|\__|_|\___/|_| |_|___/     |
runner_1  | |                                                                              |
runner_1  | |                       Self-hosted runner registration                        |
runner_1  | |                                                                              |
runner_1  | --------------------------------------------------------------------------------
runner_1  | 
runner_1  | # Authentication
runner_1  | 
runner_1  | 
runner_1  | √ Connected to GitHub
runner_1  | 
runner_1  | # Runner Registration
runner_1  | 
runner_1  | 
runner_1  | 
runner_1  | 
runner_1  | √ Runner successfully added
runner_1  | √ Runner connection is good
runner_1  | 
runner_1  | # Runner settings
runner_1  | 
runner_1  | Enter name of work folder: [press Enter for _work] 
runner_1  | √ Settings Saved.
runner_1  | 
runner_1  | 
runner_1  | √ Connected to GitHub
runner_1  | 
runner_1  | Current runner version: '2.315.0'
runner_1  | 2024-03-23 Listening for Jobs
</code></pre></div></div>

<p>compose 명령어 실행 시, 위 처럼 떳다면 러너가 정상적으로 설치 및 연결되었다는 의미 입니다.</p>

<p><img src="/assets/images/gh-actions-runner-06.jpg" alt="gh-action-runner-06" /></p>

<p>위 사진과 같이 설정 &gt; Actions &gt; Runners 로 이동하여 러너의 연결 상태 등을 확인 할 수 있습니다.</p>

<h3 id="3-간단한-workflow-작성">3. 간단한 workflow 작성</h3>

<p>레파지토리 &gt; Actions 탭 &gt; New workflow로 이동하고, 1<code class="language-plaintext highlighter-rouge">setup a workflow yourself</code> 를 클릭하여 이동합니다.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Check Tools in Runner</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="c1"># 사용자가 워크플로우를 수동으로 실행할 수 있도록 설정</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-tools</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span>
      <span class="na">group</span><span class="pi">:</span> <span class="s">build</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="c1"># $GITHUB_WORKSPACE 밑의 레파지토리로 접근이 가능하도록 체크아웃</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="c1"># Java 설정</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-java@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">distribution</span><span class="pi">:</span> <span class="s1">'</span><span class="s">temurin'</span>
          <span class="na">java-version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">17'</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print java default version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">java --version</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print maven version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">mvn --version</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print gradle version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">gradle --version</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print git version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">git --version</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print gh version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">gh --version</span>
</code></pre></div></div>

<p>위 내용을 넣고, 다시 Actions 탭으로 이동하면 왼쪽 탭에 해당 <code class="language-plaintext highlighter-rouge">Check Tools in Runner</code> 라는 메뉴를 클릭합니다.</p>

<p>오른쪽에 Run workflow 를 이용하여 해당 workflow를 실행할 수 있습니다.</p>

<h2 id="맺음">맺음</h2>

<p>Github Actions Self-hosted Runner 를 설치해보고 해당 러너에서 workflow를 실행 시켜보는 예제를 소개해드렸습니다. 혹시 궁금한 점이 있으시면 댓글 부탁드리겠습니다.</p>]]></content><author><name>deeplify</name></author><category term="tools" /><category term="git" /><category term="git" /><category term="github" /><category term="github actions" /><category term="actions" /><category term="self-hosted" /><summary type="html"><![CDATA[Self hosted Github Actions 설치하는 방법을 알아보도록 하겠습니다.]]></summary></entry><entry><title type="html">[Spring Boot] OAuth2 소셜 로그인 가이드 (구글, 페이스북, 네이버, 카카오)</title><link href="https://deeplify.dev/back-end/spring/oauth2-social-login" rel="alternate" type="text/html" title="[Spring Boot] OAuth2 소셜 로그인 가이드 (구글, 페이스북, 네이버, 카카오)" /><published>2023-08-28T00:00:00+09:00</published><updated>2023-08-28T00:00:00+09:00</updated><id>https://deeplify.dev/back-end/spring/ouath2-social-login</id><content type="html" xml:base="https://deeplify.dev/back-end/spring/oauth2-social-login"><![CDATA[<p>웹 또는 앱 서비스에서 로그인을 구현하는 것은 간단하지 않은 일입니다. 로그인을 구현하기 위해서는 다양한 사전 지식들을 가지고 있어야합니다. 특히 세션이나 쿠키 등의 역할 등을 알아야하고, 보안적인 측면에서도 신경을 써주어야합니다.</p>

<p>하지만 로그인을 구현하기 위헤서 개발 시간을 단축시켜줄 수 있는 것이 있다면 어떨까요? 이번 글에서는 스프링부트에서 <code class="language-plaintext highlighter-rouge">Spring Security</code> 및 <code class="language-plaintext highlighter-rouge">OAuth2</code>를 포함한 여러가지 프레임워크와 라이브러리를 이용하여 REST API 기반의 소셜 로그인 기능을 구현하는 방법을 소개해리도록 하겠습니다.</p>

<h2 id="스프링부트-소셜-로그인">스프링부트 소셜 로그인</h2>

<p>스프링부트에서 구글, 페이스북, 네이버, 카카오 등 다양한 서비스를 이용하여 소셜 로그인을 구현할 수 있습니다.</p>

<blockquote>
  <ol>
    <li>스프링 보안 프레임워크 Spring Security 소개</li>
    <li>OAuth2.0 및 Spring OAuth 프레임워크 소개</li>
    <li>예제: 각 Provider에서 OAuth 로그인 서비스 등록</li>
    <li>예제: 스프링부트 OAuth 로그인 설정</li>
    <li>예제: 프론트엔드 및 백엔드 예제 프로젝트 연동 테스트</li>
  </ol>
</blockquote>

<p>위와 같은 순서로 Spring Security, OAuth2.0, Spring OAuth 프레임워크를 소개하고, 구글 로그인, 페이스북 로그인, 네이버 로그인, 카카오 로그인 등을 적용하는 예제 프로젝트를 만들어보도록 하겠습니다.</p>

<h3 id="oauth-로그인을-위한-spring-하위-프레임워크">OAuth 로그인을 위한 Spring 하위 프레임워크</h3>

<p>스프링부트로 생성된 프로젝트에서 OAuth 로그인을 구현하기 위해서는 일반적으로 스프링 시큐리티와 스프링 시큐리티 OAuth2 클라이언트를 이용합니다.</p>

<h4 id="spring-security">Spring Security</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-security/site/docs/current/reference/html5" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Spring Security Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<p><code class="language-plaintext highlighter-rouge">Spring Security</code>는 Spring 기반의 어플리케이션 권한과 인증, 인가 등의 보안을 담당하는 하위 프레임워크입니다. 스프링 시큐리티는 <strong>인증</strong>과 <strong>권한</strong>을 Filter 흐름에 따라 처리하게 구현되어 있고, 이미 대부분의 보안적인 로직들이 포함되어 있어 개발자가 추가로 개발하지 않아도 된다는 장점이 있습니다.</p>

<h4 id="oauth2란">OAuth2란?</h4>

<p>OAuth2란 Open Authentication2의 약자로 인증 및 권한획득을 위한 <strong>업계표준 프로토콜</strong>입니다.</p>

<p>OAuth2는 보안수준이 어느정도 검증된 플랫폼의 API를 이용하여 사용자 인증과 리소스에 대한 권한 획득(인가)을 할 수 있도록 해주는 역할을 하고, 대부분의 영향력이 있고 OAuth2 인증을 제공하는 플랫폼들은 모두 OAuth2 규칙을 지키는 API를 제공하고 있습니다.</p>

<p>그렇다면 왜 OAuth라는 프로토콜이 탄생하게 되었을까요? 그 이유는 보안수준이 검증되지 않은 플랫폼에 동일한 아이디와 패스워드를 사용하는 상황이 자주 발생했기 때문입니다. 여러 플랫폼에 회원 가입을 하게 되면 사용자는 일반적으로 동일한 아이디와 비밀번호를 사용하는 경우가 많기 때문에 보안에 취약해 질 수 밖에 없습니다.</p>

<p>반대로 OAuth 인증을 통하면 신뢰할 수 있는 플랫폼이 인증과 리소스에 대한 권한을 외부 플랫폼에 부여하므로써 위에서 언급했던 문제를 해결할 수 있고, 사용자는 회원가입을 한 번 더 하지 않아도되기 때문에 사용자 경험 측면에서도 장점이 있습니다.</p>

<h5 id="oauth20-구성-요소">OAuth2.0 구성 요소</h5>

<div class="hint-container info">
  <div class="hint-type info">
    <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke="none" class="icon-7f6730be--text-3f89f380"><g><path d="M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11" fill-rule="evenodd"></path></g></svg>
  </div>
  <div class="hint-body-container">
    <div class="hint-body">
      
      <ol class="hint-list">
      
      
        <li>1. Resource Owner: 사용자</li>
      
        <li>2. Client: 리소스 서버에서 제공해주는 자원을 사용하는 외부 플랫폼</li>
      
        <li>3. Authorization Server: 외부 플랫폼이 리소스 서버의 사용자 자원을 사용하기 위한 인증 서버</li>
      
        <li>4. Resource Server: 사용자의 자원을 제공해주는 서버</li>
      
      </ol>
      
    </div>
  </div>
</div>

<p>OAuth2.0는 위와 같이 4개의 구성요소를 가지고 있습니다. 예를 들어 저는 페이스북 계정이 있고, 페이스북 로그인 기능을 지원하는 외부 플랫폼에 로그인 하려고합니다. 이런 경우 외부 플랫폼을 통해 페이스북 인증 서버(Authorization Server)에 인증 요청을 하게 되고 외부 플랫폼은 저의 페이스북 정보들(이름, 나이, 프로필 사진 등)을 사용할 수 있는 권한을 얻게 됩니다.</p>

<h5 id="oauth20-인증-종류">OAuth2.0 인증 종류</h5>

<div class="hint-container info">
  <div class="hint-type info">
    <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke="none" class="icon-7f6730be--text-3f89f380"><g><path d="M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11" fill-rule="evenodd"></path></g></svg>
  </div>
  <div class="hint-body-container">
    <div class="hint-body">
      
      <ol class="hint-list">
      
      
        <li>1. Authorization Code Grant: 권한 코드 승인 방식</li>
      
        <li>2. Implicit Grant: 암시적 승인 방식</li>
      
        <li>3. Password Credentials Grant: 비밀번호 자격 증명 방식</li>
      
        <li>4. Client Credentials Grant: 클라이언트 자격 증명 방식</li>
      
      </ol>
      
    </div>
  </div>
</div>

<p>OAuth2.0에 명시된 인증 종류는 위와 같이 크게 4가지로 구분됩니다.</p>

<h6 id="authorization-code-grant">Authorization Code Grant</h6>

<p>일반적으로 서버 사이드에서 인증을 처리할 때 이용하는 방식으로 Resource Owner로부터 리소스 사용에 대한 허락을 의미하는 <code class="language-plaintext highlighter-rouge">Authorization Code</code>를 이용하여 Access Token을 요청하는 방식입니다. 이 방식은 Access Token이 바로 클라이언트로 전달되지 않기 때문에 다른 방식보다 보안에 좋은 특징을 가지고 있습니다.</p>

<h6 id="implicit-grant">Implicit Grant</h6>

<p>권한 코드 없이 바로 토큰을 발급하여 사용하는 방식으로 브라우저나 앱과 같은 서버와의 연동이 없는 어플리케이션에서 주로 사용됩니다. 권한 코드 검증이 들어가지 않기 때문에 보통 Read Only 서비스에서만 사용하는 것이 좋습니다.</p>

<h6 id="password-credentials-grant">Password Credentials Grant</h6>

<p>Client에 Service Provider(구글, 페이스북 등)의 아이디와 비밀번호를 저장해두고 사용하는 방식입니다. 일반적으로 Client와 Service Provider의 관계가 아주 긴밀한 관계일때만 사용하는 것이 좋습니다.</p>

<h6 id="client-credentials-grant">Client Credentials Grant</h6>

<p>Client와 Resource Owner가 같을 때 사용하는 인증 방식입니다. Client와 Resource Owner가 같기 때문에 추가적인 인증이 필요하지 않고 Authorization Server로부터 바로 토큰을 받을 수 있습니다.</p>

<h5 id="spring-oauth2-client">Spring OAuth2 Client</h5>

<p>일반적으로 OAuth 인증을 하기 위해서는 인증을 위한 여러가지 절차대로 진행해야만 인증이 가능합니다. 이러한 일련의 절차들을 설정 한번으로 간단하게 사용할 수 있도록 도와주는 것이 <code class="language-plaintext highlighter-rouge">Spring OAuth2 Client</code>입니다.</p>

<div class="hint-container success">
  <div class="hint-type success">
    <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor"><g><path d="M22 11.07V12a10 10 0 1 1-5.93-9.14"></path><polyline points="23 3 12 14 9 11"></polyline></g></svg>
  </div>
  <div class="hint-body-container">
    <div class="hint-body">
      
        <span class="hint-body-text">OAuth2 Client 또한 위에서 언급한대로 OAuth2.0 표준에 맞게 잘 설계가 되어 있습니다.</span>
      
    </div>
  </div>
</div>

<h2 id="spring-oauth-로그인-예제">Spring OAuth 로그인 예제</h2>

<p>프로젝트를 처음부터 만들면서 스프링에서 OAuth 로그인을 적용하는 방법을 소개해드리도록 하겠습니다.</p>

<h3 id="예제-작성에-참고한-프로젝트">예제 작성에 참고한 프로젝트</h3>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/callicoder/spring-boot-react-oauth2-social-login-demo" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Spring Boot React OAuth2 Social Login with Google, Facebook, and Github</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<h3 id="필요한-프레임워크-또는-라이브러리">필요한 프레임워크 또는 라이브러리</h3>

<div class="hint-container info">
  <div class="hint-type info">
    <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke="none" class="icon-7f6730be--text-3f89f380"><g><path d="M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11" fill-rule="evenodd"></path></g></svg>
  </div>
  <div class="hint-body-container">
    <div class="hint-body">
      
      <ol class="hint-list">
      
      
        <li>1. Spring Security</li>
      
        <li>2. OAuth2 Client</li>
      
        <li>3. Json Web Token(JWT)</li>
      
      </ol>
      
    </div>
  </div>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://ko.wikipedia.org/wiki/JSON_%EC%9B%B9_%ED%86%A0%ED%81%B0" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">JSON 웹 토큰 - 위키백과, 우리 모두의 백과사전</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">ko.wikipedia.org</span>
        </div>
      </div>
    </a>
</div>

<p>Spring Security와 OAuth2 Client에 대해서는 간단하게 소개해드렸습니다. JWT에 대해서 궁금하시다면 상단 링크에서 자세하게 확인해보실 수 있습니다.</p>

<h3 id="서비스-등록">서비스 등록</h3>

<p>OAuth 로그인을 구현하기 위해서는 꼭 각 플랫폼에서 제공하는 OAuth 앱 또는 서비스를 등록해야합니다. 많이들 사용하는 구글, 페이스북, 네이버, 카카오 총 네 가지의 플랫폼에 서비스를 등록하는 방법을 소개해드리도록 하겠습니다.</p>

<p>각 플랫폼에서 서비스 등록하면 각 플랫폼별 <code class="language-plaintext highlighter-rouge">클라이언트ID</code>와 <code class="language-plaintext highlighter-rouge">클라이언트 secret</code>을 얻어야합니다.</p>

<h4 id="구글-oauth-서비스-등록">구글 OAuth 서비스 등록</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://console.cloud.google.com/apis" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">API 및 서비스 – API 및 서비스 – CommentAlert – Google Cloud Platform</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">console.cloud.google.com</span>
        </div>
      </div>
    </a>
</div>

<p>기본적으로 구글 계정은 있다는 가정하에 서비스 등록방법을 소개해보도록 하겠습니다. 구글 OAuth 서비스를 등록하기 위해서는 위 링크를 통해 콘솔로 접속해야합니다.</p>

<p><img src="/assets/images/google-oauth-registration01.jpg" alt="google oauth registration 01" /></p>

<p>콘솔 대시보드화면에서 프로젝트 만들기를 클릭하여 프로젝트를 생성화면으로 이동합니다.</p>

<p><img src="/assets/images/google-oauth-registration02.jpg" alt="google oauth registration 02" /></p>

<p>자신의 서비스에 대한 프로젝트 이름을 작성하고, 프로젝트를 생성합니다.</p>

<p><img src="/assets/images/google-oauth-registration03.jpg" alt="google oauth registration 03" /></p>

<p>구글 OAuth 클라이언트를 사용하기 위해서는 OAuth 동의화면이 먼저 구성되어 있어야합니다. 위 사진과 같이 <code class="language-plaintext highlighter-rouge">OAuth 동의 화면</code> 탭을 클릭하여 설정화면으로 이동합니다.</p>

<p><img src="/assets/images/google-oauth-registration04.jpg" alt="google oauth registration 04" /></p>

<p>앱 이름, 이메일, 로고(Optional)를 입력합니다.</p>

<p><img src="/assets/images/google-oauth-registration05.jpg" alt="google oauth registration 05" /></p>

<p>테스트용으로 만들 앱이라 <code class="language-plaintext highlighter-rouge">앱 도메인</code>은 입력하지 않고 넘어갑니다.</p>

<p><img src="/assets/images/google-oauth-registration06.jpg" alt="google oauth registration 06" /></p>

<p>역시 테스트용 앱이라서 승인된 도메인이 없으므로 도메인은 추가하지 않고, 개발자 연락처 정보만 입력해줍니다.</p>

<p><img src="/assets/images/google-oauth-registration07.jpg" alt="google oauth registration 07" /></p>

<p>범위(scope)는 사용할 데이터의 권한 범위를 의미합니다. 구글로부터 어떤 데이터에 접근하고 싶은지 선택할 수 있습니다.</p>

<p><img src="/assets/images/google-oauth-registration08.jpg" alt="google oauth registration 08" /></p>

<p>이메일 정보와 프로필정보만 필요하므로 위 사진과 같이 선택합니다.</p>

<p><img src="/assets/images/google-oauth-registration09.jpg" alt="google oauth registration 09" /></p>

<p>그 이외에는 건들지 않고 다음으로 넘어갑니다.</p>

<p><img src="/assets/images/google-oauth-registration10.jpg" alt="google oauth registration 10" /></p>

<p>테스트 사용자를 설정하는 화면입니다. 계정 주인 이외의 다른 테스터를 추가할 때 설정할 수 있습니다.</p>

<p><img src="/assets/images/google-oauth-registration11.jpg" alt="google oauth registration 11" /></p>

<p>OAuth 동의 화면 설정은 완료되었고, <code class="language-plaintext highlighter-rouge">사용자 인증 정보</code> 탭으로 이동합니다.</p>

<p><img src="/assets/images/google-oauth-registration12.jpg" alt="google oauth registration 12" /></p>

<p>상단의 사용자 인증정보 만들기를 클릭합니다.</p>

<p><img src="/assets/images/google-oauth-registration13.jpg" alt="google oauth registration 13" /></p>

<p>OAuth 클라이언트 ID를 선택합니다.</p>

<p><img src="/assets/images/google-oauth-registration14.jpg" alt="google oauth registration 14" /></p>

<p>클라이언트ID의 이름을 작성합니다.</p>

<p><img src="/assets/images/google-oauth-registration15.jpg" alt="google oauth registration 15" /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://localhost:8080/login/oauth2/code/google
</code></pre></div></div>

<p>리다이렉션 URI에 위와 같이 작성해줍니다. 이 URI는 밑에서 설명하겠지만 구글 로그인이 완료된 후 리다이렉션되는 페이지를 말합니다.</p>

<p><img src="/assets/images/google-oauth-registration16.jpg" alt="google oauth registration 16" /></p>

<p>OAuth 클라이언트를 생성하고 나면 클라이언트 ID(client-id)와 클라이언트 보안 비밀번호(client-secret)을 얻을 수 있습니다.</p>

<p>client-id와 client-secret은 스프링 OAuth 설정 시 사용되므로 잘 복사해두어야합니다.</p>

<h4 id="페이스북-oauth-서비스-등록">페이스북 OAuth 서비스 등록</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://developers.facebook.com" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Facebook for Developers</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">developers.facebook.com</span>
        </div>
      </div>
    </a>
</div>

<p>역시나 페이스북 계정은 있다는 가정하에 서비스 등록방법을 소개해보도록 하겠습니다. 페이스북 로그인을 사용하기위해서는 위 링크를 통해 페이스북 개발자 페이지로 이동해야합니다.</p>

<p><img src="/assets/images/facebook-oauth-registration01.jpg" alt="facebook oauth registration 01" /></p>

<p>오른쪽 상단에 내 앱이라는 탭을 선택하고, 앱 만들기를 클릭합니다.</p>

<p><img src="/assets/images/facebook-oauth-registration02.jpg" alt="facebook oauth registration 02" /></p>

<p>앱 유형 선택은 <code class="language-plaintext highlighter-rouge">비즈니스</code>로 선택합니다.</p>

<p><img src="/assets/images/facebook-oauth-registration03.jpg" alt="facebook oauth registration 03" /></p>

<p>자신의 서비스에 맞는 앱 이름을 설정해줍니다.</p>

<p><img src="/assets/images/facebook-oauth-registration04.jpg" alt="facebook oauth registration 04" /></p>

<p>앱 목적에는 클라이언트를 선택합니다.</p>

<p><img src="/assets/images/facebook-oauth-registration05.jpg" alt="facebook oauth registration 05" /></p>

<p>앱이 생성되면 위 사진과 같이 앱ID가 생성된 것을 보실 수 있습니다. 그 이후 왼쪽 상단의 선택 박스를 클릭합니다.</p>

<p><img src="/assets/images/facebook-oauth-registration06.jpg" alt="facebook oauth registration 06" /></p>

<p>저희는 테스트용으로 로그인을 할 것이기 때문에 <code class="language-plaintext highlighter-rouge">테스트 앱 만들기</code>를 선택합니다.</p>

<p><img src="/assets/images/facebook-oauth-registration07.jpg" alt="facebook oauth registration 07" /></p>

<p>테스트 앱 이름을 적절하게 넣어주고 테스트 앱을 만듭니다.</p>

<p><img src="/assets/images/facebook-oauth-registration08.jpg" alt="facebook oauth registration 08" /></p>

<p>위 사진과 같이 테스트 앱이 만들어지면 앱ID가 새로 생성됩니다. 이 후 대시보드에서 Facebook 로그인의 설정 버튼을 클릭합니다.</p>

<p><img src="/assets/images/facebook-oauth-registration09.jpg" alt="facebook oauth registration 09" /></p>

<p>Spring REST API로 OAuth 로그인을 구현할 것이기 때문에 웹 플랫폼을 선택합니다.</p>

<p><img src="/assets/images/facebook-oauth-registration10.jpg" alt="facebook oauth registration 10" /></p>

<p>사이트 URL은 위 사진과 같이 <code class="language-plaintext highlighter-rouge">http://localhost:30000</code>으로 설정하고 저장합니다.</p>

<p><img src="/assets/images/facebook-oauth-registration11.jpg" alt="facebook oauth registration 11" /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://localhost:8080/login/oauth2/code/google
</code></pre></div></div>

<p>왼쪽 탭 하단의 Facebook 설정으로 들어가서 리다이렉션 URL 설정하는 부분이 있습니다. 위 처럼 리다이렉션 URL을 설정해주고 저장합니다.</p>

<p><img src="/assets/images/facebook-oauth-registration12.jpg" alt="facebook oauth registration 12" /></p>

<p>기본 설정 탭으로 들어가면 앱ID(client-id)와 앱 시크릿 코드(client-secret)을 확인하실 수 있습니다.</p>

<p>앱ID와 앱 시크릿 코드를 복사해둡니다.</p>

<h4 id="네이버-oauth-서비스-등록">네이버 OAuth 서비스 등록</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://developers.naver.com" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">네이버 개발자 센터 - NAVER Developers</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">developers.naver.com</span>
        </div>
      </div>
    </a>
</div>

<p>역시나 네이버 계정을 이미 가지고 있다고 생각하고 서비스 등록 방법을 소개하겠습니다. 위 링크를 통해서 네이버 개발자 센터로 이동합니다.</p>

<p><img src="/assets/images/naver-oauth-registration01.jpg" alt="naver oauth registration 01" /></p>

<p>로그인을 한 후, 상단 탭의 내 어플리케이션을 선택합니다.</p>

<p><img src="/assets/images/naver-oauth-registration02.jpg" alt="naver oauth registration 02" /></p>

<p><code class="language-plaintext highlighter-rouge">Application 등록</code> 버튼을 클릭하여 새로운 어플리케이션을 등록합니다.</p>

<p><img src="/assets/images/naver-oauth-registration03.jpg" alt="naver oauth registration 03" /></p>

<p>어플리케이션의 이름을 설정합니다.</p>

<p><img src="/assets/images/naver-oauth-registration04.jpg" alt="naver oauth registration 04" /></p>

<p>사용할 API 중 네아로(네이버 아이디로 로그인) API를 선택하고, 위 사진과 같이 제공 정보(scope) 설정을 해줍니다.</p>

<p><img src="/assets/images/naver-oauth-registration05.jpg" alt="naver oauth registration 05" /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>서비스 URL: http://localhost:3000
Callback URL: http://localhost:8080/login/ouath2/code/naver
</code></pre></div></div>

<p>환경은 PC 웹으로 선택하고 위 와 같이 서비스 URL과 Callback URL을 설정해줍니다.</p>

<p><img src="/assets/images/naver-oauth-registration06.jpg" alt="naver oauth registration 06" /></p>

<p>전부 설정이 완료되었으면 등록하기를 눌러 어플리케이션을 생성해줍니다.</p>

<p><img src="/assets/images/naver-oauth-registration07.jpg" alt="naver oauth registration 07" /></p>

<p>어플리케이션 생성이 완료되면 어플리케이션 정보를 확인할 수 있고, Client ID(client-id)와 Client Secret(client-secret)을 복사해둡니다.</p>

<h4 id="카카오-oauth-서비스-등록">카카오 OAuth 서비스 등록</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://developers.kakao.com" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Kakao Developers</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">developers.kakao.com</span>
        </div>
      </div>
    </a>
</div>

<p>카카오 계정이 있다고 가정하고 서비스 등록 방법 소개하도록 하겠습니다. 위 링크를 통해서 카카오 개발자 페이지로 이동합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration01.jpg" alt="kakao oauth registration 01" /></p>

<p>로그인을 한 후, 상단 탬의 내 어플리케이션을 선택합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration02.jpg" alt="kakao oauth registration 02" /></p>

<p>위 사진과 같이 어플리케이션을 추가합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration03.jpg" alt="kakao oauth registration 03" /></p>

<p>어플리케이션 이름과 사업자명을 입력하고 저장합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration04.jpg" alt="kakao oauth registration 04" /></p>

<p>요약정보 화면을 보시면 앱키 리스트가 있는 것을 확인하실 수 있습니다. 저희는 REST API로 이용할 예정이기 때문에 <code class="language-plaintext highlighter-rouge">REST API 키</code>(client-id)를 복사해둡니다.</p>

<p>이 후, 왼쪽 탭의 동의 항목으로 이동합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration05.jpg" alt="kakao oauth registration 05" /></p>

<p>동의 항목 중 닉네임을 필수 동의로 한 후 저장합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration06.jpg" alt="kakao oauth registration 06" /></p>

<p>동의 항목 중 프로필 이미지 또한 필수 동의로 설정한 후 저장합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration07.jpg" alt="kakao oauth registration 07" /></p>

<p>이메일은 민감 정보로 분류가 될 수 있기 때문에 카카오의 승인을 받아야합니다. 따라서 선택 동의로 받도록 설정한 후 저장합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration08.jpg" alt="kakao oauth registration 08" /></p>

<p>위 사진과 같이 동의 항목(scope)을 설정합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration09.jpg" alt="kakao oauth registration 09" /></p>

<p>왼쪽 탭의 카카오 로그인을 선택한 후 활성화 설정을 <code class="language-plaintext highlighter-rouge">OFF</code> -&gt; <code class="language-plaintext highlighter-rouge">ON</code>으로 변경합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration10.jpg" alt="kakao oauth registration 10" /></p>

<p>다음은 Client Secret을 생성하기 위해 왼쪽에 보안 탭을 클릭하고 코드 생성 버튼을 눌러줍니다.</p>

<p><img src="/assets/images/kakao-oauth-registration11.jpg" alt="kakao oauth registration 11" /></p>

<p>코드값(client-secret)을 복사해둔 후, 활성화 상태를 사용으로 변경해줍니다.</p>

<p><img src="/assets/images/kakao-oauth-registration12.jpg" alt="kakao oauth registration 12" /></p>

<p>다음은 리다이렉션 URI 설정을 위해 다시 카카오 로그인 탭으로 이동하고, <code class="language-plaintext highlighter-rouge">Redirect URI 등록</code>을 클릭합니다.</p>

<p><img src="/assets/images/kakao-oauth-registration13.jpg" alt="kakao oauth registration 13" /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://localhost:8080/login/oauth2/code/kakao
</code></pre></div></div>

<p>위와 같이 리다이렉션 URI를 설정한 후, 저장해줍니다.</p>

<h3 id="전체-시퀀스-다이어그램">전체 시퀀스 다이어그램</h3>

<p><img src="/assets/images/springboot-oauth.jpg" alt="spring social diagram" /></p>

<div class="hint-container info">
  <div class="hint-type info">
    <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke="none" class="icon-7f6730be--text-3f89f380"><g><path d="M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11" fill-rule="evenodd"></path></g></svg>
  </div>
  <div class="hint-body-container">
    <div class="hint-body">
      
      <ol class="hint-list">
      
      
        <li>시퀀스 상단: OAuth2.0 표준을 따르는 소셜 로그인 시퀀스 다이어그램</li>
      
        <li>시퀀스 하단: JWT 토큰의 유효기간이 끝났을 때의 시퀀스 다이어그램</li>
      
      </ol>
      
    </div>
  </div>
</div>

<h4 id="시퀀스-설명">시퀀스 설명</h4>

<blockquote>
  <ol>
    <li>소셜 로그인 요청</li>
    <li>백엔드로 GET “/oauth2/authorization/{provider-id}?redirect_uri=http://localhost:3000/oauth/redirect”으로 OAuth 인가 요청</li>
    <li>Provider 별로 Authorization Code 인증을 할 수 있도록 리다이렉트 (Redirect: GET
“https://oauth.provider.com/oauth2.0/authorize?…”)</li>
    <li>리다이렉트 화면에서 provider 서비스에 로그인</li>
    <li>로그인이 완료된 후, Athorization server로부터 백엔드로 Authorization 코드 응답</li>
    <li>백엔드에서 인가 코드를 이용하여 Authorization Server에 엑세스 토큰 요청</li>
    <li>엑세스 토큰 획득</li>
    <li>엑세스 토큰을 이용하여 Resource Server에 유저 데이터 요청</li>
    <li>획득한 유저 데이터를 DB에 저장 후, JWT 엑세스 토큰과 리프레시 토큰을 생성</li>
    <li>리프레시 토큰은 수정 불가능한 쿠키에 저장하고, 엑세스 토큰은 프로트엔드 리다이렉트 URI 에 쿼리스트링에 토큰을 담아 리다이렉트 (Redirect: GET http://localhost:3000/oauth/redirect?token={jwt-token})</li>
    <li>프론트엔드에서 토큰을 저장 후, API 요청 시 헤더에 <code class="language-plaintext highlighter-rouge">Authroization: Bearer {token}</code>을 추가하여 요청</li>
    <li>백엔드에서는 토큰을 확인하여 권한 확인</li>
    <li>토큰이 만료된 경우, 쿠키에 저장된 리프레시 토큰을 이용하여 엑세스 토큰과 리프레시 토큰을 재발급</li>
  </ol>
</blockquote>

<h5 id="3번-요청-예시">3번 요청 예시</h5>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET
https://oauth.provider.com/oauth2.0/authorize
  ?response_type=code
  &amp;client_id={client_id}
  &amp;scope=profile
  &amp;state={random_string}
  &amp;redirect_uri=http://localhost:8080/login/oauth2/code/{provider-id}
</code></pre></div></div>

<h5 id="5번-리다이렉트-응답-예시">5번 리다이렉트 응답 예시</h5>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET
/login/oauth2/code/{provider-id}?code=MLiFGqZjfdubcXUqOexxdN4TKXCICuP1Kp9D5vKQcCwx5AmQPZewX5rDQAXE80ucXsSZZwo9c00AAAF68RgEXQ&amp;state=Vi2q6hfu7YqKwcVxrIaVt1FFzy-qkOMhVzbwf7CaEZU%3D
</code></pre></div></div>

<h5 id="6번-엑세스-토큰-요청-예시">6번 엑세스 토큰 요청 예시</h5>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST
https://auth.provider.com/oauth/token
{
  "grant_type": "authorization_code",
  "code": "MLiFGqZjfdubcXUqOexxdN4TKXCICuP1Kp9D5vKQcCwx5AmQPZewX5rDQAXE80ucXsSZZwo9c00AAAF68RgEXQ",
  "redirect_uri": "http://localhost:8080/login/oauth2/code/{provider-id}",
  "client_id": "{client-id}",
  "client_secret": "{client-secret}"
}
</code></pre></div></div>

<h5 id="8번-리소스-서버로-유저-정보-요청">8번 리소스 서버로 유저 정보 요청</h5>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>GET
https://api.provider.com/user/me
</code></pre></div></div>

<h3 id="예제-프로젝트">예제 프로젝트</h3>

<p>REST API 기반으로 OAuth 로그인을 구현하기 위해서는 프론트엔드와 백엔드 프로젝트 모두 있어야합니다. 따라서 다음과 같이 프론트엔드 프로젝트와 백엔드 프로젝트를 각각 생성하도록 하겠습니다.</p>

<p>이 포스팅에서는 주요 코드에 대한 설명만 할 예정이기 때문에 혹시 자세한 코드가 궁금하신 분이나 예제 프로젝트를 실행해보고 싶은 분들은 아래 링크를 통해 확인하시거나 실행해볼 수 있습니다.</p>

<h4 id="프론트엔드-vue-project">프론트엔드 (Vue Project)</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/sushistack/oauth-login-fe" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">sushistack/oauth-login-fe: OAuth login fe vue project</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<h4 id="백엔드-spring-boot-project">백엔드 (Spring Boot Project)</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/sushistack/oauth-login-be" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">sushistack/oauth-login-be: OAuth login be spring boot project</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<h3 id="프론트엔드-oauth-로그인">프론트엔드 OAuth 로그인</h3>

<p>프론트엔드의 경우, 소셜 로그인 버튼을 눌렀을 때, 백엔드에 어떤 요청을 하는지와 인증이 끝난 후, 엑세스 토큰을 어떻게 저장하는지에 대해서만 간략하게 알아보도록 하겠습니다.</p>

<h4 id="소셜-로그인-버튼">소셜 로그인 버튼</h4>

<p><img src="/assets/images/oauth-login.jpg" alt="oauth login" /></p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>http://localhost:8080/oauth2/authorization/{provider-id}?redirect_uri=http://localhost:3000/oauth/redirect
</code></pre></div></div>

<p>위 사진과 같이 각 서비스 제공자 별로 백엔드에 요청합니다.</p>

<p><code class="language-plaintext highlighter-rouge">redirect_uri</code>는 인증이 완료된 후, 백엔드 API에 접근할 수 있는 <strong>Access Token</strong>을 쿼리스트링으로 받을 수 있는 프론트엔드 페이지입니다.</p>

<h5 id="redirect-페이지">Redirect 페이지</h5>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&lt;</span><span class="nx">template</span> <span class="nx">lang</span><span class="o">=</span><span class="dl">"</span><span class="s2">pug</span><span class="dl">"</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="sr">/template</span><span class="err">&gt;
</span>
<span class="o">&lt;</span><span class="nx">script</span><span class="o">&gt;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">mapMutations</span><span class="p">,</span> <span class="nx">mapActions</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">vuex</span><span class="dl">'</span>

<span class="k">export</span> <span class="k">default</span> <span class="p">{</span>
  <span class="nf">created </span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 컴포넌트 렌더링이 되었을 때,</span>

    <span class="c1">// 쿼리스트링으로부터 토큰을 획득</span>
    <span class="kd">const</span> <span class="nx">token</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">$route</span><span class="p">.</span><span class="nx">query</span><span class="p">.</span><span class="nx">token</span>
    <span class="nx">console</span><span class="p">.</span><span class="nf">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">token</span><span class="dl">'</span><span class="p">,</span> <span class="nx">token</span><span class="p">)</span>

    <span class="c1">// 토큰이 존재하는 경우, Vuex Store에 토큰을 저장한다.</span>
    <span class="k">if </span><span class="p">(</span><span class="nx">token</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nf">setToken</span><span class="p">(</span><span class="nx">token</span><span class="p">)</span>
      <span class="k">this</span><span class="p">.</span><span class="nf">fetchUser</span><span class="p">()</span>
    <span class="p">}</span>

    <span class="c1">// 토큰이 있던 없던, 루트 페이지로 이동한다.</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">$router</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="dl">'</span><span class="s1">/</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">},</span>
  <span class="na">methods</span><span class="p">:</span> <span class="p">{</span>
    <span class="p">...</span><span class="nf">mapActions</span><span class="p">([</span><span class="dl">'</span><span class="s1">fetchUser</span><span class="dl">'</span><span class="p">]),</span>
    <span class="p">...</span><span class="nf">mapMutations</span><span class="p">([</span><span class="dl">'</span><span class="s1">setToken</span><span class="dl">'</span><span class="p">])</span>
  <span class="p">}</span>
<span class="p">}</span>
<span class="o">&lt;</span><span class="sr">/script</span><span class="err">&gt;
</span></code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code># 백엔드 --Redirect--&gt; 프론트엔드
http://localhost:3000/oauth/redirect?token={jwt-token}
</code></pre></div></div>

<p>소셜 로그인 요청에 파라미터로 같이 넣어주었던 <code class="language-plaintext highlighter-rouge">redirect_uri</code>에 쿼리스트링을 추가해 백엔드에서 프론트엔드로 토큰을 전달해준다.</p>

<p>프론트엔드에서 받은 토큰을 저장한 후, 백엔드 API 요청 시 헤더에 토큰을 추가하여 API를 사용할 수 있습니다.</p>

<h3 id="백엔드-oauth-로그인">백엔드 OAuth 로그인</h3>

<p>백엔드에 OAuth 설정은 코드량이 좀 많아 잘 설명드릴 수 있을지 걱정이 됩니다만 가능한 잘 설명드리도록 하겠습니다.</p>

<h4 id="buildgradle-의존성">build.gradle 의존성</h4>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">//... 생략 ...</span>

<span class="k">dependencies</span> <span class="o">{</span>
    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-data-jpa'</span>
    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-oauth2-client'</span>
    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-security'</span>
    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-validation'</span>
    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-web'</span>
    <span class="n">implementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-log4j2'</span>
    <span class="n">implementation</span> <span class="s1">'io.jsonwebtoken:jjwt-api:0.11.2'</span>
    <span class="n">implementation</span> <span class="s1">'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'</span>
    <span class="n">runtimeOnly</span> <span class="s1">'io.jsonwebtoken:jjwt-impl:0.11.2'</span>
    <span class="n">runtimeOnly</span> <span class="s1">'io.jsonwebtoken:jjwt-jackson:0.11.2'</span>
    <span class="n">compileOnly</span> <span class="s1">'org.projectlombok:lombok'</span>
    <span class="n">developmentOnly</span> <span class="s1">'org.springframework.boot:spring-boot-devtools'</span>
    <span class="n">runtimeOnly</span> <span class="s1">'mysql:mysql-connector-java'</span>
    <span class="n">annotationProcessor</span> <span class="s1">'org.projectlombok:lombok'</span>
    <span class="n">testImplementation</span> <span class="s1">'org.springframework.boot:spring-boot-starter-test'</span>
    <span class="n">testImplementation</span> <span class="s1">'org.springframework.security:spring-security-test'</span>
<span class="o">}</span>

<span class="c1">//... 생략 ...</span>
</code></pre></div></div>

<h5 id="applicationyml">application.yml</h5>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">profiles.active</span><span class="pi">:</span> <span class="s">local</span>
  <span class="c1"># 데이터 소스 설정</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">com.mysql.cj.jdbc.Driver</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost:3306/oauth_login_tutorial?useSSL=false&amp;serverTimezone=UTC&amp;useLegacyDatetimeCode=false&amp;allowPublicKeyRetrieval=true</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">root</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">root</span>
    <span class="na">hikari</span><span class="pi">:</span>
      <span class="na">pool-name</span><span class="pi">:</span> <span class="s">jpa-hikari-pool</span>
      <span class="na">maximum-pool-size</span><span class="pi">:</span> <span class="m">5</span>
      <span class="na">jdbc-url</span><span class="pi">:</span> <span class="s">${spring.datasource.url}</span>
      <span class="na">username</span><span class="pi">:</span> <span class="s">${spring.datasource.username}</span>
      <span class="na">password</span><span class="pi">:</span> <span class="s">${spring.datasource.password}</span>
      <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">${spring.datasource.driver-class-name}</span>
      <span class="na">data-source-properties</span><span class="pi">:</span>
        <span class="na">rewriteBatchedStatements</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="c1"># JPA 설정</span>
  <span class="na">jpa</span><span class="pi">:</span>
    <span class="na">generate-ddl</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">hibernate</span><span class="pi">:</span>
      <span class="na">ddl-auto</span><span class="pi">:</span> <span class="s">update</span>
    <span class="na">show-sql</span><span class="pi">:</span> <span class="kc">true</span>
    <span class="na">properties</span><span class="pi">:</span>
      <span class="na">hibernate</span><span class="pi">:</span>
        <span class="na">dialect</span><span class="pi">:</span> <span class="s">org.hibernate.dialect.MySQL8Dialect</span>
        <span class="na">hbm2ddl.import_files_sql_extractor</span><span class="pi">:</span> <span class="s">org.hibernate.tool.hbm2ddl.MultipleLinesSqlCommandExtractor</span>
        <span class="na">current_session_context_class</span><span class="pi">:</span> <span class="s">org.springframework.orm.hibernate5.SpringSessionContext</span>
        <span class="na">default_batch_fetch_size</span><span class="pi">:</span> <span class="s">${chunkSize:100}</span>
        <span class="na">jdbc.batch_size</span><span class="pi">:</span> <span class="m">20</span>
        <span class="na">order_inserts</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">order_updates</span><span class="pi">:</span> <span class="kc">true</span>
        <span class="na">format_sql</span><span class="pi">:</span> <span class="kc">true</span>
  <span class="c1"># Security OAuth</span>
  <span class="na">security</span><span class="pi">:</span>
    <span class="na">oauth2.client</span><span class="pi">:</span>
      <span class="na">registration</span><span class="pi">:</span>
        <span class="na">google</span><span class="pi">:</span>
          <span class="na">clientId</span><span class="pi">:</span> <span class="s1">'</span><span class="s">{구글</span><span class="nv"> </span><span class="s">client-id}'</span>
          <span class="na">clientSecret</span><span class="pi">:</span> <span class="s1">'</span><span class="s">{구글</span><span class="nv"> </span><span class="s">client-secret}'</span>
          <span class="na">scope</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">email</span>
            <span class="pi">-</span> <span class="s">profile</span>
        <span class="na">facebook</span><span class="pi">:</span>
          <span class="na">clientId</span><span class="pi">:</span> <span class="s1">'</span><span class="s">{페이스북</span><span class="nv"> </span><span class="s">client-id}'</span>
          <span class="na">clientSecret</span><span class="pi">:</span> <span class="s1">'</span><span class="s">{페이스북</span><span class="nv"> </span><span class="s">client-secret}'</span>
          <span class="na">scope</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">email</span>
            <span class="pi">-</span> <span class="s">public_profile</span>
        <span class="na">naver</span><span class="pi">:</span>
          <span class="na">clientId</span><span class="pi">:</span> <span class="s1">'</span><span class="s">{네이버</span><span class="nv"> </span><span class="s">client-id}'</span>
          <span class="na">clientSecret</span><span class="pi">:</span> <span class="s1">'</span><span class="s">{네이버</span><span class="nv"> </span><span class="s">client-secret}'</span>
          <span class="na">clientAuthenticationMethod</span><span class="pi">:</span> <span class="s">post</span>
          <span class="na">authorizationGrantType</span><span class="pi">:</span> <span class="s">authorization_code</span>
          <span class="na">redirectUri</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{baseUrl}/{action}/oauth2/code/{registrationId}"</span>
          <span class="na">scope</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">nickname</span>
            <span class="pi">-</span> <span class="s">email</span>
            <span class="pi">-</span> <span class="s">profile_image</span>
          <span class="na">clientName</span><span class="pi">:</span> <span class="s">Naver</span>
        <span class="na">kakao</span><span class="pi">:</span>
          <span class="na">clientId</span><span class="pi">:</span> <span class="s1">'</span><span class="s">{카카오</span><span class="nv"> </span><span class="s">client-id}'</span>
          <span class="na">clientSecret</span><span class="pi">:</span> <span class="s1">'</span><span class="s">{카카오</span><span class="nv"> </span><span class="s">client-secret}'</span>
          <span class="na">clientAuthenticationMethod</span><span class="pi">:</span> <span class="s">post</span>
          <span class="na">authorizationGrantType</span><span class="pi">:</span> <span class="s">authorization_code</span>
          <span class="na">redirectUri</span><span class="pi">:</span> <span class="s2">"</span><span class="s">{baseUrl}/{action}/oauth2/code/{registrationId}"</span>
          <span class="na">scope</span><span class="pi">:</span>
            <span class="pi">-</span> <span class="s">profile_nickname</span>
            <span class="pi">-</span> <span class="s">profile_image</span>
            <span class="pi">-</span> <span class="s">account_email</span>
          <span class="na">clientName</span><span class="pi">:</span> <span class="s">Kakao</span>
      <span class="c1"># Provider 설정</span>
      <span class="na">provider</span><span class="pi">:</span>
        <span class="na">naver</span><span class="pi">:</span>
          <span class="na">authorizationUri</span><span class="pi">:</span> <span class="s">https://nid.naver.com/oauth2.0/authorize</span>
          <span class="na">tokenUri</span><span class="pi">:</span> <span class="s">https://nid.naver.com/oauth2.0/token</span>
          <span class="na">userInfoUri</span><span class="pi">:</span> <span class="s">https://openapi.naver.com/v1/nid/me</span>
          <span class="na">userNameAttribute</span><span class="pi">:</span> <span class="s">response</span>
        <span class="na">kakao</span><span class="pi">:</span>
          <span class="na">authorizationUri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/authorize</span>
          <span class="na">tokenUri</span><span class="pi">:</span> <span class="s">https://kauth.kakao.com/oauth/token</span>
          <span class="na">userInfoUri</span><span class="pi">:</span> <span class="s">https://kapi.kakao.com/v2/user/me</span>
          <span class="na">userNameAttribute</span><span class="pi">:</span> <span class="s">id</span>

<span class="c1"># cors 설정</span>
<span class="na">cors</span><span class="pi">:</span>
  <span class="na">allowed-origins</span><span class="pi">:</span> <span class="s1">'</span><span class="s">http://localhost:3000'</span>
  <span class="na">allowed-methods</span><span class="pi">:</span> <span class="s">GET,POST,PUT,DELETE,OPTIONS</span>
  <span class="na">allowed-headers</span><span class="pi">:</span> <span class="s1">'</span><span class="s">*'</span>
  <span class="na">max-age</span><span class="pi">:</span> <span class="m">3600</span>

<span class="c1"># jwt secret key 설정</span>
<span class="na">jwt.secret</span><span class="pi">:</span> <span class="s1">'</span><span class="s">8sknjlO3NPTBqo319DHLNqsQAfRJEdKsETOds'</span>

<span class="c1"># 토큰 관련 secret Key 및 RedirectUri 설정</span>
<span class="na">app</span><span class="pi">:</span>
  <span class="na">auth</span><span class="pi">:</span>
    <span class="na">tokenSecret</span><span class="pi">:</span> <span class="s">926D96C90030DD58429D2751AC1BDBBC</span>
    <span class="na">tokenExpiry</span><span class="pi">:</span> <span class="m">1800000</span>
    <span class="na">refreshTokenExpiry</span><span class="pi">:</span> <span class="m">604800000</span>
  <span class="na">oauth2</span><span class="pi">:</span>
    <span class="na">authorizedRedirectUris</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">http://localhost:3000/oauth/redirect</span>
</code></pre></div></div>

<h4 id="프로젝트-구조">프로젝트 구조</h4>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>com/deeplify/tutorial/oauthlogin
├── OauthLoginApplication.java
├── api
│   ├── controller
│   │   ├── auth
│   │   │   └── AuthController.java
│   │   └── user
│   │       └── UserController.java
│   ├── entity
│   │   ├── auth
│   │   │   └── AuthReqModel.java
│   │   └── user
│   │       ├── User.java
│   │       └── UserRefreshToken.java
│   ├── repository
│   │   └── user
│   │       ├── UserRefreshTokenRepository.java
│   │       └── UserRepository.java
│   └── service
│       └── UserService.java
├── common
│   ├── ApiResponse.java
│   └── ApiResponseHeader.java
├── config
│   ├── properties
│   │   ├── AppProperties.java
│   │   └── CorsProperties.java
│   └── security
│       ├── JwtConfig.java
│       └── SecurityConfig.java
├── oauth
│   ├── entity
│   │   ├── ProviderType.java
│   │   ├── RoleType.java
│   │   └── UserPrincipal.java
│   ├── exception
│   │   ├── OAuthProviderMissMatchException.java
│   │   ├── RestAuthenticationEntryPoint.java
│   │   └── TokenValidFailedException.java
│   ├── filter
│   │   └── TokenAuthenticationFilter.java
│   ├── handler
│   │   ├── OAuth2AuthenticationFailureHandler.java
│   │   ├── OAuth2AuthenticationSuccessHandler.java
│   │   └── TokenAccessDeniedHandler.java
│   ├── info
│   │   ├── OAuth2UserInfo.java
│   │   ├── OAuth2UserInfoFactory.java
│   │   └── impl
│   │       ├── FacebookOAuth2UserInfo.java
│   │       ├── GoogleOAuth2UserInfo.java
│   │       ├── KakaoOAuth2UserInfo.java
│   │       └── NaverOAuth2UserInfo.java
│   ├── repository
│   │   └── OAuth2AuthorizationRequestBasedOnCookieRepository.java
│   ├── service
│   │   ├── CustomOAuth2UserService.java
│   │   └── CustomUserDetailsService.java
│   └── token
│       ├── AuthToken.java
│       └── AuthTokenProvider.java
└── utils
    ├── CookieUtil.java
    └── HeaderUtil.java
</code></pre></div></div>

<p>전체 프로젝트 구조입니다. 이렇게 보니까 양이 엄청 많아보이지만 OAuth 로그인 설정에 꼭 필요합니다.</p>

<p>지금부터 하나하나 살펴보도록 하겠습니다.</p>

<h5 id="authtoken">AuthToken</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthToken</span> <span class="o">{</span>

    <span class="nd">@Getter</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">token</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Key</span> <span class="n">key</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">AUTHORITIES_KEY</span> <span class="o">=</span> <span class="s">"role"</span><span class="o">;</span>

    <span class="nc">AuthToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">Key</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">token</span> <span class="o">=</span> <span class="n">createAuthToken</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">expiry</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nc">AuthToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">role</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiry</span><span class="o">,</span> <span class="nc">Key</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="n">key</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">token</span> <span class="o">=</span> <span class="n">createAuthToken</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">role</span><span class="o">,</span> <span class="n">expiry</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">createAuthToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiry</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
                <span class="o">.</span><span class="na">signWith</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="nc">SignatureAlgorithm</span><span class="o">.</span><span class="na">HS256</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setExpiration</span><span class="o">(</span><span class="n">expiry</span><span class="o">)</span>
                <span class="o">.</span><span class="na">compact</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">String</span> <span class="nf">createAuthToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">role</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiry</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">setSubject</span><span class="o">(</span><span class="n">id</span><span class="o">)</span>
                <span class="o">.</span><span class="na">claim</span><span class="o">(</span><span class="no">AUTHORITIES_KEY</span><span class="o">,</span> <span class="n">role</span><span class="o">)</span>
                <span class="o">.</span><span class="na">signWith</span><span class="o">(</span><span class="n">key</span><span class="o">,</span> <span class="nc">SignatureAlgorithm</span><span class="o">.</span><span class="na">HS256</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setExpiration</span><span class="o">(</span><span class="n">expiry</span><span class="o">)</span>
                <span class="o">.</span><span class="na">compact</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">validate</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">getTokenClaims</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Claims</span> <span class="nf">getTokenClaims</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Jwts</span><span class="o">.</span><span class="na">parserBuilder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">setSigningKey</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">parseClaimsJws</span><span class="o">(</span><span class="n">token</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">SecurityException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Invalid JWT signature."</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">MalformedJwtException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Invalid JWT token."</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ExpiredJwtException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Expired JWT token."</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">UnsupportedJwtException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Unsupported JWT token."</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">IllegalArgumentException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"JWT token compact of handler are invalid."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Claims</span> <span class="nf">getExpiredTokenClaims</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">try</span> <span class="o">{</span>
            <span class="nc">Jwts</span><span class="o">.</span><span class="na">parserBuilder</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">setSigningKey</span><span class="o">(</span><span class="n">key</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">build</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">parseClaimsJws</span><span class="o">(</span><span class="n">token</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">ExpiredJwtException</span> <span class="n">e</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Expired JWT token."</span><span class="o">);</span>
            <span class="k">return</span> <span class="n">e</span><span class="o">.</span><span class="na">getClaims</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="authtokenprovider">AuthTokenProvider</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthTokenProvider</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Key</span> <span class="n">key</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="nc">String</span> <span class="no">AUTHORITIES_KEY</span> <span class="o">=</span> <span class="s">"role"</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">AuthTokenProvider</span><span class="o">(</span><span class="nc">String</span> <span class="n">secret</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">key</span> <span class="o">=</span> <span class="nc">Keys</span><span class="o">.</span><span class="na">hmacShaKeyFor</span><span class="o">(</span><span class="n">secret</span><span class="o">.</span><span class="na">getBytes</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">AuthToken</span> <span class="nf">createAuthToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiry</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthToken</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">expiry</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">AuthToken</span> <span class="nf">createAuthToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">id</span><span class="o">,</span> <span class="nc">String</span> <span class="n">role</span><span class="o">,</span> <span class="nc">Date</span> <span class="n">expiry</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthToken</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">role</span><span class="o">,</span> <span class="n">expiry</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">AuthToken</span> <span class="nf">convertAuthToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthToken</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Authentication</span> <span class="nf">getAuthentication</span><span class="o">(</span><span class="nc">AuthToken</span> <span class="n">authToken</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">if</span><span class="o">(</span><span class="n">authToken</span><span class="o">.</span><span class="na">validate</span><span class="o">())</span> <span class="o">{</span>

            <span class="nc">Claims</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">authToken</span><span class="o">.</span><span class="na">getTokenClaims</span><span class="o">();</span>
            <span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">authorities</span> <span class="o">=</span>
                    <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="k">new</span> <span class="nc">String</span><span class="o">[]{</span><span class="n">claims</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="no">AUTHORITIES_KEY</span><span class="o">).</span><span class="na">toString</span><span class="o">()})</span>
                            <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">SimpleGrantedAuthority:</span><span class="o">:</span><span class="k">new</span><span class="o">)</span>
                            <span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="nc">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>

            <span class="n">log</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"claims subject := [{}]"</span><span class="o">,</span> <span class="n">claims</span><span class="o">.</span><span class="na">getSubject</span><span class="o">());</span>
            <span class="nc">User</span> <span class="n">principal</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span><span class="n">claims</span><span class="o">.</span><span class="na">getSubject</span><span class="o">(),</span> <span class="s">""</span><span class="o">,</span> <span class="n">authorities</span><span class="o">);</span>

            <span class="k">return</span> <span class="k">new</span> <span class="nf">UsernamePasswordAuthenticationToken</span><span class="o">(</span><span class="n">principal</span><span class="o">,</span> <span class="n">authToken</span><span class="o">,</span> <span class="n">authorities</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">TokenValidFailedException</span><span class="o">();</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="jwtconfig">JwtConfig</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtConfig</span> <span class="o">{</span>
    <span class="nd">@Value</span><span class="o">(</span><span class="s">"${jwt.secret}"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">secret</span><span class="o">;</span>

    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">AuthTokenProvider</span> <span class="nf">jwtProvider</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">AuthTokenProvider</span><span class="o">(</span><span class="n">secret</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Jwt을 사용하기 위한 설정입니다.</p>

<h5 id="tokenauthenticationfilter">TokenAuthenticationFilter</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TokenAuthenticationFilter</span> <span class="kd">extends</span> <span class="nc">OncePerRequestFilter</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AuthTokenProvider</span> <span class="n">tokenProvider</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span>
            <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
            <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
            <span class="nc">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span>  <span class="kd">throws</span> <span class="nc">ServletException</span><span class="o">,</span> <span class="nc">IOException</span> <span class="o">{</span>

        <span class="nc">String</span> <span class="n">tokenStr</span> <span class="o">=</span> <span class="nc">HeaderUtil</span><span class="o">.</span><span class="na">getAccessToken</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="nc">AuthToken</span> <span class="n">token</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">convertAuthToken</span><span class="o">(</span><span class="n">tokenStr</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">token</span><span class="o">.</span><span class="na">validate</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Authentication</span> <span class="n">authentication</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">getAuthentication</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
            <span class="nc">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">setAuthentication</span><span class="o">(</span><span class="n">authentication</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="tokenvalidfailedexception">TokenValidFailedException</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">TokenValidFailedException</span> <span class="kd">extends</span> <span class="nc">RuntimeException</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nf">TokenValidFailedException</span><span class="o">()</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="s">"Failed to generate Token."</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nf">TokenValidFailedException</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="tokenaccessdeniedhandler">TokenAccessDeniedHandler</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TokenAccessDeniedHandler</span> <span class="kd">implements</span> <span class="nc">AccessDeniedHandler</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">HandlerExceptionResolver</span> <span class="n">handlerExceptionResolver</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">handle</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">AccessDeniedException</span> <span class="n">accessDeniedException</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="c1">//response.sendError(HttpServletResponse.SC_FORBIDDEN, accessDeniedException.getMessage());</span>
        <span class="n">handlerExceptionResolver</span><span class="o">.</span><span class="na">resolveException</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">accessDeniedException</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="providertype">ProviderType</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">ProviderType</span> <span class="o">{</span>
    <span class="no">GOOGLE</span><span class="o">,</span>
    <span class="no">FACEBOOK</span><span class="o">,</span>
    <span class="no">NAVER</span><span class="o">,</span>
    <span class="no">KAKAO</span><span class="o">,</span>
    <span class="no">LOCAL</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="roletype">RoleType</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">enum</span> <span class="nc">RoleType</span> <span class="o">{</span>
    <span class="no">USER</span><span class="o">(</span><span class="s">"ROLE_USER"</span><span class="o">,</span> <span class="s">"일반 사용자 권한"</span><span class="o">),</span>
    <span class="no">ADMIN</span><span class="o">(</span><span class="s">"ROLE_ADMIN"</span><span class="o">,</span> <span class="s">"관리자 권한"</span><span class="o">),</span>
    <span class="no">GUEST</span><span class="o">(</span><span class="s">"GUEST"</span><span class="o">,</span> <span class="s">"게스트 권한"</span><span class="o">);</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">code</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">displayName</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">RoleType</span> <span class="nf">of</span><span class="o">(</span><span class="nc">String</span> <span class="n">code</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Arrays</span><span class="o">.</span><span class="na">stream</span><span class="o">(</span><span class="nc">RoleType</span><span class="o">.</span><span class="na">values</span><span class="o">())</span>
                <span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">r</span> <span class="o">-&gt;</span> <span class="n">r</span><span class="o">.</span><span class="na">getCode</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">code</span><span class="o">))</span>
                <span class="o">.</span><span class="na">findAny</span><span class="o">()</span>
                <span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="no">GUEST</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="user">User</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"USER"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="nd">@JsonIgnore</span>
    <span class="nd">@Id</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"USER_SEQ"</span><span class="o">)</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">userSeq</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"USER_ID"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">64</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">64</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"USERNAME"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">username</span><span class="o">;</span>

    <span class="nd">@JsonIgnore</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"PASSWORD"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">128</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">128</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"EMAIL"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">512</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">512</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">email</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"EMAIL_VERIFIED_YN"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="nd">@Size</span><span class="o">(</span><span class="n">min</span> <span class="o">=</span> <span class="mi">1</span><span class="o">,</span> <span class="n">max</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">emailVerifiedYn</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"PROFILE_IMAGE_URL"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">512</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">512</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">profileImageUrl</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"PROVIDER_TYPE"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">20</span><span class="o">)</span>
    <span class="nd">@Enumerated</span><span class="o">(</span><span class="nc">EnumType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="kd">private</span> <span class="nc">ProviderType</span> <span class="n">providerType</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"ROLE_TYPE"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">20</span><span class="o">)</span>
    <span class="nd">@Enumerated</span><span class="o">(</span><span class="nc">EnumType</span><span class="o">.</span><span class="na">STRING</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="kd">private</span> <span class="nc">RoleType</span> <span class="n">roleType</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"CREATED_AT"</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">createdAt</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"MODIFIED_AT"</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="kd">private</span> <span class="nc">LocalDateTime</span> <span class="n">modifiedAt</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">User</span><span class="o">(</span>
            <span class="nd">@NotNull</span> <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">64</span><span class="o">)</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">,</span>
            <span class="nd">@NotNull</span> <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">100</span><span class="o">)</span> <span class="nc">String</span> <span class="n">username</span><span class="o">,</span>
            <span class="nd">@NotNull</span> <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">512</span><span class="o">)</span> <span class="nc">String</span> <span class="n">email</span><span class="o">,</span>
            <span class="nd">@NotNull</span> <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">1</span><span class="o">)</span> <span class="nc">String</span> <span class="n">emailVerifiedYn</span><span class="o">,</span>
            <span class="nd">@NotNull</span> <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">512</span><span class="o">)</span> <span class="nc">String</span> <span class="n">profileImageUrl</span><span class="o">,</span>
            <span class="nd">@NotNull</span> <span class="nc">ProviderType</span> <span class="n">providerType</span><span class="o">,</span>
            <span class="nd">@NotNull</span> <span class="nc">RoleType</span> <span class="n">roleType</span><span class="o">,</span>
            <span class="nd">@NotNull</span> <span class="nc">LocalDateTime</span> <span class="n">createdAt</span><span class="o">,</span>
            <span class="nd">@NotNull</span> <span class="nc">LocalDateTime</span> <span class="n">modifiedAt</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">userId</span> <span class="o">=</span> <span class="n">userId</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">username</span> <span class="o">=</span> <span class="n">username</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">password</span> <span class="o">=</span> <span class="s">"NO_PASS"</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">email</span> <span class="o">:</span> <span class="s">"NO_EMAIL"</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">emailVerifiedYn</span> <span class="o">=</span> <span class="n">emailVerifiedYn</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">profileImageUrl</span> <span class="o">=</span> <span class="n">profileImageUrl</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">?</span> <span class="n">profileImageUrl</span> <span class="o">:</span> <span class="s">""</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">providerType</span> <span class="o">=</span> <span class="n">providerType</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">roleType</span> <span class="o">=</span> <span class="n">roleType</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">createdAt</span> <span class="o">=</span> <span class="n">createdAt</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">modifiedAt</span> <span class="o">=</span> <span class="n">modifiedAt</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="userrepository">UserRepository</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">User</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">User</span> <span class="nf">findByUserId</span><span class="o">(</span><span class="nc">String</span> <span class="n">userId</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="userrefreshtoken">UserRefreshToken</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"USER_REFRESH_TOKEN"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserRefreshToken</span> <span class="o">{</span>
    <span class="nd">@JsonIgnore</span>
    <span class="nd">@Id</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"REFRESH_TOKEN_SEQ"</span><span class="o">)</span>
    <span class="nd">@GeneratedValue</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="nc">GenerationType</span><span class="o">.</span><span class="na">IDENTITY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">refreshTokenSeq</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"USER_ID"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">64</span><span class="o">,</span> <span class="n">unique</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">64</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">;</span>

    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"REFRESH_TOKEN"</span><span class="o">,</span> <span class="n">length</span> <span class="o">=</span> <span class="mi">256</span><span class="o">)</span>
    <span class="nd">@NotNull</span>
    <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">256</span><span class="o">)</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">refreshToken</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">UserRefreshToken</span><span class="o">(</span>
            <span class="nd">@NotNull</span> <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">64</span><span class="o">)</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">,</span>
            <span class="nd">@NotNull</span> <span class="nd">@Size</span><span class="o">(</span><span class="n">max</span> <span class="o">=</span> <span class="mi">256</span><span class="o">)</span> <span class="nc">String</span> <span class="n">refreshToken</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">userId</span> <span class="o">=</span> <span class="n">userId</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">refreshToken</span> <span class="o">=</span> <span class="n">refreshToken</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="userrefreshtokenrepository">UserRefreshTokenRepository</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Repository</span>
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRefreshTokenRepository</span> <span class="kd">extends</span> <span class="nc">JpaRepository</span><span class="o">&lt;</span><span class="nc">UserRefreshToken</span><span class="o">,</span> <span class="nc">Long</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nc">UserRefreshToken</span> <span class="nf">findByUserId</span><span class="o">(</span><span class="nc">String</span> <span class="n">userId</span><span class="o">);</span>
    <span class="nc">UserRefreshToken</span> <span class="nf">findByUserIdAndRefreshToken</span><span class="o">(</span><span class="nc">String</span> <span class="n">userId</span><span class="o">,</span> <span class="nc">String</span> <span class="n">refreshToken</span><span class="o">);</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="userprincipal">UserPrincipal</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@AllArgsConstructor</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserPrincipal</span> <span class="kd">implements</span> <span class="nc">OAuth2User</span><span class="o">,</span> <span class="nc">UserDetails</span><span class="o">,</span> <span class="nc">OidcUser</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">userId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ProviderType</span> <span class="n">providerType</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">RoleType</span> <span class="n">roleType</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Collection</span><span class="o">&lt;</span><span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">authorities</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">getAttributes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">attributes</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="nf">getAuthorities</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">authorities</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userId</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAccountNonExpired</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAccountNonLocked</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCredentialsNonExpired</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEnabled</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">getClaims</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">OidcUserInfo</span> <span class="nf">getUserInfo</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">OidcIdToken</span> <span class="nf">getIdToken</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">UserPrincipal</span> <span class="nf">create</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">UserPrincipal</span><span class="o">(</span>
                <span class="n">user</span><span class="o">.</span><span class="na">getUserId</span><span class="o">(),</span>
                <span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">(),</span>
                <span class="n">user</span><span class="o">.</span><span class="na">getProviderType</span><span class="o">(),</span>
                <span class="nc">RoleType</span><span class="o">.</span><span class="na">USER</span><span class="o">,</span>
                <span class="nc">Collections</span><span class="o">.</span><span class="na">singletonList</span><span class="o">(</span><span class="k">new</span> <span class="nc">SimpleGrantedAuthority</span><span class="o">(</span><span class="nc">RoleType</span><span class="o">.</span><span class="na">USER</span><span class="o">.</span><span class="na">getCode</span><span class="o">()))</span>
        <span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">UserPrincipal</span> <span class="nf">create</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">,</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">UserPrincipal</span> <span class="n">userPrincipal</span> <span class="o">=</span> <span class="n">create</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
        <span class="n">userPrincipal</span><span class="o">.</span><span class="na">setAttributes</span><span class="o">(</span><span class="n">attributes</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">userPrincipal</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="customoauth2userservice">CustomOAuth2UserService</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomOAuth2UserService</span> <span class="kd">extends</span> <span class="nc">DefaultOAuth2UserService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">OAuth2User</span> <span class="nf">loadUser</span><span class="o">(</span><span class="nc">OAuth2UserRequest</span> <span class="n">userRequest</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">OAuth2AuthenticationException</span> <span class="o">{</span>
        <span class="nc">OAuth2User</span> <span class="n">user</span> <span class="o">=</span> <span class="kd">super</span><span class="o">.</span><span class="na">loadUser</span><span class="o">(</span><span class="n">userRequest</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">process</span><span class="o">(</span><span class="n">userRequest</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">AuthenticationException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="n">ex</span><span class="o">;</span>
        <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="nc">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">InternalAuthenticationServiceException</span><span class="o">(</span><span class="n">ex</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span> <span class="n">ex</span><span class="o">.</span><span class="na">getCause</span><span class="o">());</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">OAuth2User</span> <span class="nf">process</span><span class="o">(</span><span class="nc">OAuth2UserRequest</span> <span class="n">userRequest</span><span class="o">,</span> <span class="nc">OAuth2User</span> <span class="n">user</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">ProviderType</span> <span class="n">providerType</span> <span class="o">=</span> <span class="nc">ProviderType</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">userRequest</span><span class="o">.</span><span class="na">getClientRegistration</span><span class="o">().</span><span class="na">getRegistrationId</span><span class="o">().</span><span class="na">toUpperCase</span><span class="o">());</span>

        <span class="nc">OAuth2UserInfo</span> <span class="n">userInfo</span> <span class="o">=</span> <span class="nc">OAuth2UserInfoFactory</span><span class="o">.</span><span class="na">getOAuth2UserInfo</span><span class="o">(</span><span class="n">providerType</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">());</span>
        <span class="nc">User</span> <span class="n">savedUser</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByUserId</span><span class="o">(</span><span class="n">userInfo</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">savedUser</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">providerType</span> <span class="o">!=</span> <span class="n">savedUser</span><span class="o">.</span><span class="na">getProviderType</span><span class="o">())</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="nf">OAuthProviderMissMatchException</span><span class="o">(</span>
                        <span class="s">"Looks like you're signed up with "</span> <span class="o">+</span> <span class="n">providerType</span> <span class="o">+</span>
                        <span class="s">" account. Please use your "</span> <span class="o">+</span> <span class="n">savedUser</span><span class="o">.</span><span class="na">getProviderType</span><span class="o">()</span> <span class="o">+</span> <span class="s">" account to login."</span>
                <span class="o">);</span>
            <span class="o">}</span>
            <span class="n">updateUser</span><span class="o">(</span><span class="n">savedUser</span><span class="o">,</span> <span class="n">userInfo</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">savedUser</span> <span class="o">=</span> <span class="n">createUser</span><span class="o">(</span><span class="n">userInfo</span><span class="o">,</span> <span class="n">providerType</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="nc">UserPrincipal</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">savedUser</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">User</span> <span class="nf">createUser</span><span class="o">(</span><span class="nc">OAuth2UserInfo</span> <span class="n">userInfo</span><span class="o">,</span> <span class="nc">ProviderType</span> <span class="n">providerType</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">LocalDateTime</span> <span class="n">now</span> <span class="o">=</span> <span class="nc">LocalDateTime</span><span class="o">.</span><span class="na">now</span><span class="o">();</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">User</span><span class="o">(</span>
                <span class="n">userInfo</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span>
                <span class="n">userInfo</span><span class="o">.</span><span class="na">getName</span><span class="o">(),</span>
                <span class="n">userInfo</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span>
                <span class="s">"Y"</span><span class="o">,</span>
                <span class="n">userInfo</span><span class="o">.</span><span class="na">getImageUrl</span><span class="o">(),</span>
                <span class="n">providerType</span><span class="o">,</span>
                <span class="nc">RoleType</span><span class="o">.</span><span class="na">USER</span><span class="o">,</span>
                <span class="n">now</span><span class="o">,</span>
                <span class="n">now</span>
        <span class="o">);</span>

        <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">saveAndFlush</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="nc">User</span> <span class="nf">updateUser</span><span class="o">(</span><span class="nc">User</span> <span class="n">user</span><span class="o">,</span> <span class="nc">OAuth2UserInfo</span> <span class="n">userInfo</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">userInfo</span><span class="o">.</span><span class="na">getName</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">user</span><span class="o">.</span><span class="na">getUsername</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">userInfo</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
            <span class="n">user</span><span class="o">.</span><span class="na">setUsername</span><span class="o">(</span><span class="n">userInfo</span><span class="o">.</span><span class="na">getName</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">userInfo</span><span class="o">.</span><span class="na">getImageUrl</span><span class="o">()</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">user</span><span class="o">.</span><span class="na">getProfileImageUrl</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">userInfo</span><span class="o">.</span><span class="na">getImageUrl</span><span class="o">()))</span> <span class="o">{</span>
            <span class="n">user</span><span class="o">.</span><span class="na">setProfileImageUrl</span><span class="o">(</span><span class="n">userInfo</span><span class="o">.</span><span class="na">getImageUrl</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="n">user</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="oauth2userinfofactory">OAuth2UserInfoFactory</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OAuth2UserInfoFactory</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">OAuth2UserInfo</span> <span class="nf">getOAuth2UserInfo</span><span class="o">(</span><span class="nc">ProviderType</span> <span class="n">providerType</span><span class="o">,</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">switch</span> <span class="o">(</span><span class="n">providerType</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">case</span> <span class="nl">GOOGLE:</span> <span class="k">return</span> <span class="k">new</span> <span class="nc">GoogleOAuth2UserInfo</span><span class="o">(</span><span class="n">attributes</span><span class="o">);</span>
            <span class="k">case</span> <span class="nl">FACEBOOK:</span> <span class="k">return</span> <span class="k">new</span> <span class="nc">FacebookOAuth2UserInfo</span><span class="o">(</span><span class="n">attributes</span><span class="o">);</span>
            <span class="k">case</span> <span class="nl">NAVER:</span> <span class="k">return</span> <span class="k">new</span> <span class="nc">NaverOAuth2UserInfo</span><span class="o">(</span><span class="n">attributes</span><span class="o">);</span>
            <span class="k">case</span> <span class="nl">KAKAO:</span> <span class="k">return</span> <span class="k">new</span> <span class="nc">KakaoOAuth2UserInfo</span><span class="o">(</span><span class="n">attributes</span><span class="o">);</span>
            <span class="k">default</span><span class="o">:</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span><span class="s">"Invalid Provider Type."</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="oauth2userinfo">OAuth2UserInfo</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">OAuth2UserInfo</span> <span class="o">{</span>
    <span class="kd">protected</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">OAuth2UserInfo</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">attributes</span> <span class="o">=</span> <span class="n">attributes</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="nf">getAttributes</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">attributes</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">();</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="nc">String</span> <span class="nf">getImageUrl</span><span class="o">();</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="googleoauth2userinfo">GoogleOAuth2UserInfo</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">GoogleOAuth2UserInfo</span> <span class="kd">extends</span> <span class="nc">OAuth2UserInfo</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nf">GoogleOAuth2UserInfo</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">attributes</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"sub"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getImageUrl</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"picture"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="facebookoauth2userinfo">FacebookOAuth2UserInfo</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">FacebookOAuth2UserInfo</span> <span class="kd">extends</span> <span class="nc">OAuth2UserInfo</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="nf">FacebookOAuth2UserInfo</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">attributes</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"id"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"name"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getImageUrl</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"imageUrl"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="naveroauth2userinfo">NaverOAuth2UserInfo</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NaverOAuth2UserInfo</span> <span class="kd">extends</span> <span class="nc">OAuth2UserInfo</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nf">NaverOAuth2UserInfo</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">attributes</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"response"</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">response</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"id"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"response"</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">response</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"nickname"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"response"</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">response</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"email"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getImageUrl</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">response</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"response"</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">response</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">response</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"profile_image"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="kakaooauth2userinfo">KakaoOAuth2UserInfo</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">KakaoOAuth2UserInfo</span> <span class="kd">extends</span> <span class="nc">OAuth2UserInfo</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nf">KakaoOAuth2UserInfo</span><span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">attributes</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">attributes</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"id"</span><span class="o">).</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getName</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">properties</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"properties"</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">properties</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">properties</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"nickname"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getEmail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"account_email"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">getImageUrl</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;</span> <span class="n">properties</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="nc">Object</span><span class="o">&gt;)</span> <span class="n">attributes</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"properties"</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">properties</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="o">(</span><span class="nc">String</span><span class="o">)</span> <span class="n">properties</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"thumbnail_image"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="customuserdetailsservice">CustomUserDetailsService</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CustomUserDetailsService</span> <span class="kd">implements</span> <span class="nc">UserDetailsService</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="nc">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="nc">String</span> <span class="n">username</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">UsernameNotFoundException</span> <span class="o">{</span>
        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByUserId</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">UsernameNotFoundException</span><span class="o">(</span><span class="s">"Can not find username."</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nc">UserPrincipal</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="oauth2authenticationfailurehandler">OAuth2AuthenticationFailureHandler</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OAuth2AuthenticationFailureHandler</span> <span class="kd">extends</span> <span class="nc">SimpleUrlAuthenticationFailureHandler</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">OAuth2AuthorizationRequestBasedOnCookieRepository</span> <span class="n">authorizationRequestRepository</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAuthenticationFailure</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">AuthenticationException</span> <span class="n">exception</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">targetUrl</span> <span class="o">=</span> <span class="nc">CookieUtil</span><span class="o">.</span><span class="na">getCookie</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="no">REDIRECT_URI_PARAM_COOKIE_NAME</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Cookie:</span><span class="o">:</span><span class="n">getValue</span><span class="o">)</span>
                <span class="o">.</span><span class="na">orElse</span><span class="o">((</span><span class="s">"/"</span><span class="o">));</span>

        <span class="n">exception</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>

        <span class="n">targetUrl</span> <span class="o">=</span> <span class="nc">UriComponentsBuilder</span><span class="o">.</span><span class="na">fromUriString</span><span class="o">(</span><span class="n">targetUrl</span><span class="o">)</span>
                <span class="o">.</span><span class="na">queryParam</span><span class="o">(</span><span class="s">"error"</span><span class="o">,</span> <span class="n">exception</span><span class="o">.</span><span class="na">getLocalizedMessage</span><span class="o">())</span>
                <span class="o">.</span><span class="na">build</span><span class="o">().</span><span class="na">toUriString</span><span class="o">();</span>

        <span class="n">authorizationRequestRepository</span><span class="o">.</span><span class="na">removeAuthorizationRequestCookies</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>

        <span class="n">getRedirectStrategy</span><span class="o">().</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">targetUrl</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="oauth2authenticationsuccesshandler">OAuth2AuthenticationSuccessHandler</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Component</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">OAuth2AuthenticationSuccessHandler</span> <span class="kd">extends</span> <span class="nc">SimpleUrlAuthenticationSuccessHandler</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AuthTokenProvider</span> <span class="n">tokenProvider</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AppProperties</span> <span class="n">appProperties</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserRefreshTokenRepository</span> <span class="n">userRefreshTokenRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">OAuth2AuthorizationRequestBasedOnCookieRepository</span> <span class="n">authorizationRequestRepository</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">onAuthenticationSuccess</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Authentication</span> <span class="n">authentication</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">targetUrl</span> <span class="o">=</span> <span class="n">determineTargetUrl</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">authentication</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">response</span><span class="o">.</span><span class="na">isCommitted</span><span class="o">())</span> <span class="o">{</span>
            <span class="n">logger</span><span class="o">.</span><span class="na">debug</span><span class="o">(</span><span class="s">"Response has already been committed. Unable to redirect to "</span> <span class="o">+</span> <span class="n">targetUrl</span><span class="o">);</span>
            <span class="k">return</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">clearAuthenticationAttributes</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
        <span class="n">getRedirectStrategy</span><span class="o">().</span><span class="na">sendRedirect</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">targetUrl</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="nc">String</span> <span class="nf">determineTargetUrl</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">Authentication</span> <span class="n">authentication</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">redirectUri</span> <span class="o">=</span> <span class="nc">CookieUtil</span><span class="o">.</span><span class="na">getCookie</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="no">REDIRECT_URI_PARAM_COOKIE_NAME</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Cookie:</span><span class="o">:</span><span class="n">getValue</span><span class="o">);</span>

        <span class="k">if</span><span class="o">(</span><span class="n">redirectUri</span><span class="o">.</span><span class="na">isPresent</span><span class="o">()</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isAuthorizedRedirectUri</span><span class="o">(</span><span class="n">redirectUri</span><span class="o">.</span><span class="na">get</span><span class="o">()))</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">IllegalArgumentException</span><span class="o">(</span><span class="s">"Sorry! We've got an Unauthorized Redirect URI and can't proceed with the authentication"</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">targetUrl</span> <span class="o">=</span> <span class="n">redirectUri</span><span class="o">.</span><span class="na">orElse</span><span class="o">(</span><span class="n">getDefaultTargetUrl</span><span class="o">());</span>

        <span class="nc">OAuth2AuthenticationToken</span> <span class="n">authToken</span> <span class="o">=</span> <span class="o">(</span><span class="nc">OAuth2AuthenticationToken</span><span class="o">)</span> <span class="n">authentication</span><span class="o">;</span>
        <span class="nc">ProviderType</span> <span class="n">providerType</span> <span class="o">=</span> <span class="nc">ProviderType</span><span class="o">.</span><span class="na">valueOf</span><span class="o">(</span><span class="n">authToken</span><span class="o">.</span><span class="na">getAuthorizedClientRegistrationId</span><span class="o">().</span><span class="na">toUpperCase</span><span class="o">());</span>

        <span class="nc">OidcUser</span> <span class="n">user</span> <span class="o">=</span> <span class="o">((</span><span class="nc">OidcUser</span><span class="o">)</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">());</span>
        <span class="nc">OAuth2UserInfo</span> <span class="n">userInfo</span> <span class="o">=</span> <span class="nc">OAuth2UserInfoFactory</span><span class="o">.</span><span class="na">getOAuth2UserInfo</span><span class="o">(</span><span class="n">providerType</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getAttributes</span><span class="o">());</span>
        <span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">authorities</span> <span class="o">=</span> <span class="o">((</span><span class="nc">OidcUser</span><span class="o">)</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">()).</span><span class="na">getAuthorities</span><span class="o">();</span>

        <span class="nc">RoleType</span> <span class="n">roleType</span> <span class="o">=</span> <span class="n">hasAuthority</span><span class="o">(</span><span class="n">authorities</span><span class="o">,</span> <span class="nc">RoleType</span><span class="o">.</span><span class="na">ADMIN</span><span class="o">.</span><span class="na">getCode</span><span class="o">())</span> <span class="o">?</span> <span class="nc">RoleType</span><span class="o">.</span><span class="na">ADMIN</span> <span class="o">:</span> <span class="nc">RoleType</span><span class="o">.</span><span class="na">USER</span><span class="o">;</span>

        <span class="nc">Date</span> <span class="n">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="o">();</span>
        <span class="nc">AuthToken</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">createAuthToken</span><span class="o">(</span>
                <span class="n">userInfo</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span>
                <span class="n">roleType</span><span class="o">.</span><span class="na">getCode</span><span class="o">(),</span>
                <span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">getTime</span><span class="o">()</span> <span class="o">+</span> <span class="n">appProperties</span><span class="o">.</span><span class="na">getAuth</span><span class="o">().</span><span class="na">getTokenExpiry</span><span class="o">())</span>
        <span class="o">);</span>

        <span class="c1">// refresh 토큰 설정</span>
        <span class="kt">long</span> <span class="n">refreshTokenExpiry</span> <span class="o">=</span> <span class="n">appProperties</span><span class="o">.</span><span class="na">getAuth</span><span class="o">().</span><span class="na">getRefreshTokenExpiry</span><span class="o">();</span>

        <span class="nc">AuthToken</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">createAuthToken</span><span class="o">(</span>
                <span class="n">appProperties</span><span class="o">.</span><span class="na">getAuth</span><span class="o">().</span><span class="na">getTokenSecret</span><span class="o">(),</span>
                <span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">getTime</span><span class="o">()</span> <span class="o">+</span> <span class="n">refreshTokenExpiry</span><span class="o">)</span>
        <span class="o">);</span>

        <span class="c1">// DB 저장</span>
        <span class="nc">UserRefreshToken</span> <span class="n">userRefreshToken</span> <span class="o">=</span> <span class="n">userRefreshTokenRepository</span><span class="o">.</span><span class="na">findByUserId</span><span class="o">(</span><span class="n">userInfo</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">userRefreshToken</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">userRefreshToken</span><span class="o">.</span><span class="na">setRefreshToken</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">());</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="n">userRefreshToken</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UserRefreshToken</span><span class="o">(</span><span class="n">userInfo</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">refreshToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">());</span>
            <span class="n">userRefreshTokenRepository</span><span class="o">.</span><span class="na">saveAndFlush</span><span class="o">(</span><span class="n">userRefreshToken</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">cookieMaxAge</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">refreshTokenExpiry</span> <span class="o">/</span> <span class="mi">60</span><span class="o">;</span>

        <span class="nc">CookieUtil</span><span class="o">.</span><span class="na">deleteCookie</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="no">REFRESH_TOKEN</span><span class="o">);</span>
        <span class="nc">CookieUtil</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="no">REFRESH_TOKEN</span><span class="o">,</span> <span class="n">refreshToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">(),</span> <span class="n">cookieMaxAge</span><span class="o">);</span>

        <span class="k">return</span> <span class="nc">UriComponentsBuilder</span><span class="o">.</span><span class="na">fromUriString</span><span class="o">(</span><span class="n">targetUrl</span><span class="o">)</span>
                <span class="o">.</span><span class="na">queryParam</span><span class="o">(</span><span class="s">"token"</span><span class="o">,</span> <span class="n">accessToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">())</span>
                <span class="o">.</span><span class="na">build</span><span class="o">().</span><span class="na">toUriString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">clearAuthenticationAttributes</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">.</span><span class="na">clearAuthenticationAttributes</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="n">authorizationRequestRepository</span><span class="o">.</span><span class="na">removeAuthorizationRequestCookies</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">hasAuthority</span><span class="o">(</span><span class="nc">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="nc">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">authorities</span><span class="o">,</span> <span class="nc">String</span> <span class="n">authority</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">authorities</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">for</span> <span class="o">(</span><span class="nc">GrantedAuthority</span> <span class="n">grantedAuthority</span> <span class="o">:</span> <span class="n">authorities</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">authority</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">grantedAuthority</span><span class="o">.</span><span class="na">getAuthority</span><span class="o">()))</span> <span class="o">{</span>
                <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isAuthorizedRedirectUri</span><span class="o">(</span><span class="nc">String</span> <span class="n">uri</span><span class="o">)</span> <span class="o">{</span>
        <span class="no">URI</span> <span class="n">clientRedirectUri</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">uri</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">appProperties</span><span class="o">.</span><span class="na">getOauth2</span><span class="o">().</span><span class="na">getAuthorizedRedirectUris</span><span class="o">()</span>
                <span class="o">.</span><span class="na">stream</span><span class="o">()</span>
                <span class="o">.</span><span class="na">anyMatch</span><span class="o">(</span><span class="n">authorizedRedirectUri</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="c1">// Only validate host and port. Let the clients use different paths if they want to</span>
                    <span class="no">URI</span> <span class="n">authorizedURI</span> <span class="o">=</span> <span class="no">URI</span><span class="o">.</span><span class="na">create</span><span class="o">(</span><span class="n">authorizedRedirectUri</span><span class="o">);</span>
                    <span class="k">if</span><span class="o">(</span><span class="n">authorizedURI</span><span class="o">.</span><span class="na">getHost</span><span class="o">().</span><span class="na">equalsIgnoreCase</span><span class="o">(</span><span class="n">clientRedirectUri</span><span class="o">.</span><span class="na">getHost</span><span class="o">())</span>
                            <span class="o">&amp;&amp;</span> <span class="n">authorizedURI</span><span class="o">.</span><span class="na">getPort</span><span class="o">()</span> <span class="o">==</span> <span class="n">clientRedirectUri</span><span class="o">.</span><span class="na">getPort</span><span class="o">())</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
                    <span class="o">}</span>
                    <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>
                <span class="o">});</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="oauthprovidermissmatchexception">OAuthProviderMissMatchException</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">OAuthProviderMissMatchException</span> <span class="kd">extends</span> <span class="nc">RuntimeException</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="nf">OAuthProviderMissMatchException</span><span class="o">(</span><span class="nc">String</span> <span class="n">message</span><span class="o">)</span> <span class="o">{</span>
        <span class="kd">super</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="restauthenticationentrypoint">RestAuthenticationEntryPoint</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">RestAuthenticationEntryPoint</span> <span class="kd">implements</span> <span class="nc">AuthenticationEntryPoint</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">commence</span><span class="o">(</span>
            <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
            <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
            <span class="nc">AuthenticationException</span> <span class="n">authException</span>
    <span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span><span class="o">,</span> <span class="nc">ServletException</span> <span class="o">{</span>
        <span class="n">authException</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Responding with unauthorized error. Message := {}"</span><span class="o">,</span> <span class="n">authException</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="n">response</span><span class="o">.</span><span class="na">sendError</span><span class="o">(</span>
                <span class="nc">HttpServletResponse</span><span class="o">.</span><span class="na">SC_UNAUTHORIZED</span><span class="o">,</span>
                <span class="n">authException</span><span class="o">.</span><span class="na">getLocalizedMessage</span><span class="o">()</span>
        <span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="appproperties">AppProperties</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">"app"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppProperties</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Auth</span> <span class="n">auth</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Auth</span><span class="o">();</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">OAuth2</span> <span class="n">oauth2</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">OAuth2</span><span class="o">();</span>

    <span class="nd">@Getter</span>
    <span class="nd">@Setter</span>
    <span class="nd">@NoArgsConstructor</span>
    <span class="nd">@AllArgsConstructor</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Auth</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">String</span> <span class="n">tokenSecret</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">long</span> <span class="n">tokenExpiry</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">long</span> <span class="n">refreshTokenExpiry</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">final</span> <span class="kd">class</span> <span class="nc">OAuth2</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorizedRedirectUris</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>

        <span class="kd">public</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="nf">getAuthorizedRedirectUris</span><span class="o">()</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">authorizedRedirectUris</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="kd">public</span> <span class="nc">OAuth2</span> <span class="nf">authorizedRedirectUris</span><span class="o">(</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">authorizedRedirectUris</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">authorizedRedirectUris</span> <span class="o">=</span> <span class="n">authorizedRedirectUris</span><span class="o">;</span>
            <span class="k">return</span> <span class="k">this</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="corsproperties">CorsProperties</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@ConfigurationProperties</span><span class="o">(</span><span class="n">prefix</span> <span class="o">=</span> <span class="s">"cors"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">CorsProperties</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">allowedOrigins</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">allowedMethods</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">allowedHeaders</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">Long</span> <span class="n">maxAge</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="securityconfig">SecurityConfig</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="nc">WebSecurityConfigurerAdapter</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CorsProperties</span> <span class="n">corsProperties</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AppProperties</span> <span class="n">appProperties</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AuthTokenProvider</span> <span class="n">tokenProvider</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CustomUserDetailsService</span> <span class="n">userDetailsService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">CustomOAuth2UserService</span> <span class="n">oAuth2UserService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">TokenAccessDeniedHandler</span> <span class="n">tokenAccessDeniedHandler</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserRefreshTokenRepository</span> <span class="n">userRefreshTokenRepository</span><span class="o">;</span>

    <span class="cm">/*
    * UserDetailsService 설정
    * */</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">auth</span><span class="o">.</span><span class="na">userDetailsService</span><span class="o">(</span><span class="n">userDetailsService</span><span class="o">)</span>
                <span class="o">.</span><span class="na">passwordEncoder</span><span class="o">(</span><span class="n">passwordEncoder</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="nc">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="n">http</span>
                    <span class="o">.</span><span class="na">cors</span><span class="o">()</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">sessionManagement</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="nc">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">)</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">csrf</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">formLogin</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">httpBasic</span><span class="o">().</span><span class="na">disable</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">authenticationEntryPoint</span><span class="o">(</span><span class="k">new</span> <span class="nc">RestAuthenticationEntryPoint</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">accessDeniedHandler</span><span class="o">(</span><span class="n">tokenAccessDeniedHandler</span><span class="o">)</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">requestMatchers</span><span class="o">(</span><span class="nl">CorsUtils:</span><span class="o">:</span><span class="n">isPreFlightRequest</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/api/**"</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="nc">RoleType</span><span class="o">.</span><span class="na">USER</span><span class="o">.</span><span class="na">getCode</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">"/api/**/admin/**"</span><span class="o">).</span><span class="na">hasAnyAuthority</span><span class="o">(</span><span class="nc">RoleType</span><span class="o">.</span><span class="na">ADMIN</span><span class="o">.</span><span class="na">getCode</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">oauth2Login</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">authorizationEndpoint</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">baseUri</span><span class="o">(</span><span class="s">"/oauth2/authorization"</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">authorizationRequestRepository</span><span class="o">(</span><span class="n">oAuth2AuthorizationRequestBasedOnCookieRepository</span><span class="o">())</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">redirectionEndpoint</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">baseUri</span><span class="o">(</span><span class="s">"/*/oauth2/code/*"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">userInfoEndpoint</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">userService</span><span class="o">(</span><span class="n">oAuth2UserService</span><span class="o">)</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">successHandler</span><span class="o">(</span><span class="n">oAuth2AuthenticationSuccessHandler</span><span class="o">())</span>
                    <span class="o">.</span><span class="na">failureHandler</span><span class="o">(</span><span class="n">oAuth2AuthenticationFailureHandler</span><span class="o">());</span>

        <span class="n">http</span><span class="o">.</span><span class="na">addFilterBefore</span><span class="o">(</span><span class="n">tokenAuthenticationFilter</span><span class="o">(),</span> <span class="nc">UsernamePasswordAuthenticationFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/*
    * auth 매니저 설정
    * */</span>
    <span class="nd">@Override</span>
    <span class="nd">@Bean</span><span class="o">(</span><span class="nc">BeanIds</span><span class="o">.</span><span class="na">AUTHENTICATION_MANAGER</span><span class="o">)</span>
    <span class="kd">protected</span> <span class="nc">AuthenticationManager</span> <span class="nf">authenticationManager</span><span class="o">()</span> <span class="kd">throws</span> <span class="nc">Exception</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">authenticationManager</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/*
    * security 설정 시, 사용할 인코더 설정
    * */</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">BCryptPasswordEncoder</span> <span class="nf">passwordEncoder</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">BCryptPasswordEncoder</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/*
    * 토큰 필터 설정
    * */</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">TokenAuthenticationFilter</span> <span class="nf">tokenAuthenticationFilter</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">TokenAuthenticationFilter</span><span class="o">(</span><span class="n">tokenProvider</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/*
    * 쿠키 기반 인가 Repository
    * 인가 응답을 연계 하고 검증할 때 사용.
    * */</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">OAuth2AuthorizationRequestBasedOnCookieRepository</span> <span class="nf">oAuth2AuthorizationRequestBasedOnCookieRepository</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">OAuth2AuthorizationRequestBasedOnCookieRepository</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="cm">/*
    * Oauth 인증 성공 핸들러
    * */</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">OAuth2AuthenticationSuccessHandler</span> <span class="nf">oAuth2AuthenticationSuccessHandler</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">OAuth2AuthenticationSuccessHandler</span><span class="o">(</span>
                <span class="n">tokenProvider</span><span class="o">,</span>
                <span class="n">appProperties</span><span class="o">,</span>
                <span class="n">userRefreshTokenRepository</span><span class="o">,</span>
                <span class="n">oAuth2AuthorizationRequestBasedOnCookieRepository</span><span class="o">()</span>
        <span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/*
     * Oauth 인증 실패 핸들러
     * */</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">OAuth2AuthenticationFailureHandler</span> <span class="nf">oAuth2AuthenticationFailureHandler</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">OAuth2AuthenticationFailureHandler</span><span class="o">(</span><span class="n">oAuth2AuthorizationRequestBasedOnCookieRepository</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="cm">/*
    * Cors 설정
    * */</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="nc">UrlBasedCorsConfigurationSource</span> <span class="nf">corsConfigurationSource</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">UrlBasedCorsConfigurationSource</span> <span class="n">corsConfigSource</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UrlBasedCorsConfigurationSource</span><span class="o">();</span>

        <span class="nc">CorsConfiguration</span> <span class="n">corsConfig</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">CorsConfiguration</span><span class="o">();</span>
        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowedHeaders</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">corsProperties</span><span class="o">.</span><span class="na">getAllowedHeaders</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">)));</span>
        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowedMethods</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">corsProperties</span><span class="o">.</span><span class="na">getAllowedMethods</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">)));</span>
        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowedOrigins</span><span class="o">(</span><span class="nc">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="n">corsProperties</span><span class="o">.</span><span class="na">getAllowedOrigins</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">","</span><span class="o">)));</span>
        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setAllowCredentials</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">corsConfig</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="n">corsConfig</span><span class="o">.</span><span class="na">getMaxAge</span><span class="o">());</span>

        <span class="n">corsConfigSource</span><span class="o">.</span><span class="na">registerCorsConfiguration</span><span class="o">(</span><span class="s">"/**"</span><span class="o">,</span> <span class="n">corsConfig</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">corsConfigSource</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="authreqmodel">AuthReqModel</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@Setter</span>
<span class="nd">@NoArgsConstructor</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthReqModel</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">password</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="authcontroller">AuthController</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/v1/auth"</span><span class="o">)</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AuthController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AppProperties</span> <span class="n">appProperties</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AuthTokenProvider</span> <span class="n">tokenProvider</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">AuthenticationManager</span> <span class="n">authenticationManager</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserRefreshTokenRepository</span> <span class="n">userRefreshTokenRepository</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">long</span> <span class="no">THREE_DAYS_MSEC</span> <span class="o">=</span> <span class="mi">259200000</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">REFRESH_TOKEN</span> <span class="o">=</span> <span class="s">"refresh_token"</span><span class="o">;</span>

    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">"/login"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ApiResponse</span> <span class="nf">login</span><span class="o">(</span>
            <span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span>
            <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span>
            <span class="nd">@RequestBody</span> <span class="nc">AuthReqModel</span> <span class="n">authReqModel</span>
    <span class="o">)</span> <span class="o">{</span>
        <span class="nc">Authentication</span> <span class="n">authentication</span> <span class="o">=</span> <span class="n">authenticationManager</span><span class="o">.</span><span class="na">authenticate</span><span class="o">(</span>
                <span class="k">new</span> <span class="nf">UsernamePasswordAuthenticationToken</span><span class="o">(</span>
                        <span class="n">authReqModel</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span>
                        <span class="n">authReqModel</span><span class="o">.</span><span class="na">getPassword</span><span class="o">()</span>
                <span class="o">)</span>
        <span class="o">);</span>

        <span class="nc">String</span> <span class="n">userId</span> <span class="o">=</span> <span class="n">authReqModel</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
        <span class="nc">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">setAuthentication</span><span class="o">(</span><span class="n">authentication</span><span class="o">);</span>

        <span class="nc">Date</span> <span class="n">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="o">();</span>
        <span class="nc">AuthToken</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">createAuthToken</span><span class="o">(</span>
                <span class="n">userId</span><span class="o">,</span>
                <span class="o">((</span><span class="nc">UserPrincipal</span><span class="o">)</span> <span class="n">authentication</span><span class="o">.</span><span class="na">getPrincipal</span><span class="o">()).</span><span class="na">getRoleType</span><span class="o">().</span><span class="na">getCode</span><span class="o">(),</span>
                <span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">getTime</span><span class="o">()</span> <span class="o">+</span> <span class="n">appProperties</span><span class="o">.</span><span class="na">getAuth</span><span class="o">().</span><span class="na">getTokenExpiry</span><span class="o">())</span>
        <span class="o">);</span>

        <span class="kt">long</span> <span class="n">refreshTokenExpiry</span> <span class="o">=</span> <span class="n">appProperties</span><span class="o">.</span><span class="na">getAuth</span><span class="o">().</span><span class="na">getRefreshTokenExpiry</span><span class="o">();</span>
        <span class="nc">AuthToken</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">createAuthToken</span><span class="o">(</span>
                <span class="n">appProperties</span><span class="o">.</span><span class="na">getAuth</span><span class="o">().</span><span class="na">getTokenSecret</span><span class="o">(),</span>
                <span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">getTime</span><span class="o">()</span> <span class="o">+</span> <span class="n">refreshTokenExpiry</span><span class="o">)</span>
        <span class="o">);</span>

        <span class="c1">// userId refresh token 으로 DB 확인</span>
        <span class="nc">UserRefreshToken</span> <span class="n">userRefreshToken</span> <span class="o">=</span> <span class="n">userRefreshTokenRepository</span><span class="o">.</span><span class="na">findByUserId</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">userRefreshToken</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// 없는 경우 새로 등록</span>
            <span class="n">userRefreshToken</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">UserRefreshToken</span><span class="o">(</span><span class="n">userId</span><span class="o">,</span> <span class="n">refreshToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">());</span>
            <span class="n">userRefreshTokenRepository</span><span class="o">.</span><span class="na">saveAndFlush</span><span class="o">(</span><span class="n">userRefreshToken</span><span class="o">);</span>
        <span class="o">}</span> <span class="k">else</span> <span class="o">{</span>
            <span class="c1">// DB에 refresh 토큰 업데이트</span>
            <span class="n">userRefreshToken</span><span class="o">.</span><span class="na">setRefreshToken</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="kt">int</span> <span class="n">cookieMaxAge</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">refreshTokenExpiry</span> <span class="o">/</span> <span class="mi">60</span><span class="o">;</span>
        <span class="nc">CookieUtil</span><span class="o">.</span><span class="na">deleteCookie</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="no">REFRESH_TOKEN</span><span class="o">);</span>
        <span class="nc">CookieUtil</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="no">REFRESH_TOKEN</span><span class="o">,</span> <span class="n">refreshToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">(),</span> <span class="n">cookieMaxAge</span><span class="o">);</span>

        <span class="k">return</span> <span class="nc">ApiResponse</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="s">"token"</span><span class="o">,</span> <span class="n">accessToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/refresh"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">ApiResponse</span> <span class="nf">refreshToken</span> <span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// access token 확인</span>
        <span class="nc">String</span> <span class="n">accessToken</span> <span class="o">=</span> <span class="nc">HeaderUtil</span><span class="o">.</span><span class="na">getAccessToken</span><span class="o">(</span><span class="n">request</span><span class="o">);</span>
        <span class="nc">AuthToken</span> <span class="n">authToken</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">convertAuthToken</span><span class="o">(</span><span class="n">accessToken</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(!</span><span class="n">authToken</span><span class="o">.</span><span class="na">validate</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">ApiResponse</span><span class="o">.</span><span class="na">invalidAccessToken</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="c1">// expired access token 인지 확인</span>
        <span class="nc">Claims</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">authToken</span><span class="o">.</span><span class="na">getExpiredTokenClaims</span><span class="o">();</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">claims</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">ApiResponse</span><span class="o">.</span><span class="na">notExpiredTokenYet</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="nc">String</span> <span class="n">userId</span> <span class="o">=</span> <span class="n">claims</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span>
        <span class="nc">RoleType</span> <span class="n">roleType</span> <span class="o">=</span> <span class="nc">RoleType</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">claims</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="s">"role"</span><span class="o">,</span> <span class="nc">String</span><span class="o">.</span><span class="na">class</span><span class="o">));</span>

        <span class="c1">// refresh token</span>
        <span class="nc">String</span> <span class="n">refreshToken</span> <span class="o">=</span> <span class="nc">CookieUtil</span><span class="o">.</span><span class="na">getCookie</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="no">REFRESH_TOKEN</span><span class="o">)</span>
                <span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">Cookie:</span><span class="o">:</span><span class="n">getValue</span><span class="o">)</span>
                <span class="o">.</span><span class="na">orElse</span><span class="o">((</span><span class="kc">null</span><span class="o">));</span>
        <span class="nc">AuthToken</span> <span class="n">authRefreshToken</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">convertAuthToken</span><span class="o">(</span><span class="n">refreshToken</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">authRefreshToken</span><span class="o">.</span><span class="na">validate</span><span class="o">())</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">ApiResponse</span><span class="o">.</span><span class="na">invalidRefreshToken</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="c1">// userId refresh token 으로 DB 확인</span>
        <span class="nc">UserRefreshToken</span> <span class="n">userRefreshToken</span> <span class="o">=</span> <span class="n">userRefreshTokenRepository</span><span class="o">.</span><span class="na">findByUserIdAndRefreshToken</span><span class="o">(</span><span class="n">userId</span><span class="o">,</span> <span class="n">refreshToken</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">userRefreshToken</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">ApiResponse</span><span class="o">.</span><span class="na">invalidRefreshToken</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="nc">Date</span> <span class="n">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Date</span><span class="o">();</span>
        <span class="nc">AuthToken</span> <span class="n">newAccessToken</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">createAuthToken</span><span class="o">(</span>
                <span class="n">userId</span><span class="o">,</span>
                <span class="n">roleType</span><span class="o">.</span><span class="na">getCode</span><span class="o">(),</span>
                <span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">getTime</span><span class="o">()</span> <span class="o">+</span> <span class="n">appProperties</span><span class="o">.</span><span class="na">getAuth</span><span class="o">().</span><span class="na">getTokenExpiry</span><span class="o">())</span>
        <span class="o">);</span>

        <span class="kt">long</span> <span class="n">validTime</span> <span class="o">=</span> <span class="n">authRefreshToken</span><span class="o">.</span><span class="na">getTokenClaims</span><span class="o">().</span><span class="na">getExpiration</span><span class="o">().</span><span class="na">getTime</span><span class="o">()</span> <span class="o">-</span> <span class="n">now</span><span class="o">.</span><span class="na">getTime</span><span class="o">();</span>

        <span class="c1">// refresh 토큰 기간이 3일 이하로 남은 경우, refresh 토큰 갱신</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">validTime</span> <span class="o">&lt;=</span> <span class="no">THREE_DAYS_MSEC</span><span class="o">)</span> <span class="o">{</span>
            <span class="c1">// refresh 토큰 설정</span>
            <span class="kt">long</span> <span class="n">refreshTokenExpiry</span> <span class="o">=</span> <span class="n">appProperties</span><span class="o">.</span><span class="na">getAuth</span><span class="o">().</span><span class="na">getRefreshTokenExpiry</span><span class="o">();</span>

            <span class="n">authRefreshToken</span> <span class="o">=</span> <span class="n">tokenProvider</span><span class="o">.</span><span class="na">createAuthToken</span><span class="o">(</span>
                    <span class="n">appProperties</span><span class="o">.</span><span class="na">getAuth</span><span class="o">().</span><span class="na">getTokenSecret</span><span class="o">(),</span>
                    <span class="k">new</span> <span class="nf">Date</span><span class="o">(</span><span class="n">now</span><span class="o">.</span><span class="na">getTime</span><span class="o">()</span> <span class="o">+</span> <span class="n">refreshTokenExpiry</span><span class="o">)</span>
            <span class="o">);</span>

            <span class="c1">// DB에 refresh 토큰 업데이트</span>
            <span class="n">userRefreshToken</span><span class="o">.</span><span class="na">setRefreshToken</span><span class="o">(</span><span class="n">authRefreshToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">());</span>

            <span class="kt">int</span> <span class="n">cookieMaxAge</span> <span class="o">=</span> <span class="o">(</span><span class="kt">int</span><span class="o">)</span> <span class="n">refreshTokenExpiry</span> <span class="o">/</span> <span class="mi">60</span><span class="o">;</span>
            <span class="nc">CookieUtil</span><span class="o">.</span><span class="na">deleteCookie</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="no">REFRESH_TOKEN</span><span class="o">);</span>
            <span class="nc">CookieUtil</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">response</span><span class="o">,</span> <span class="no">REFRESH_TOKEN</span><span class="o">,</span> <span class="n">authRefreshToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">(),</span> <span class="n">cookieMaxAge</span><span class="o">);</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="nc">ApiResponse</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="s">"token"</span><span class="o">,</span> <span class="n">newAccessToken</span><span class="o">.</span><span class="na">getToken</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="userservice">UserService</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Service</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nc">User</span> <span class="nf">getUser</span><span class="o">(</span><span class="nc">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByUserId</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="usercontroller">UserController</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">"/api/v1/users"</span><span class="o">)</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">UserService</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@GetMapping</span>
    <span class="kd">public</span> <span class="nc">ApiResponse</span> <span class="nf">getUser</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">userdetails</span><span class="o">.</span><span class="na">User</span> <span class="n">principal</span> <span class="o">=</span> <span class="o">(</span><span class="n">org</span><span class="o">.</span><span class="na">springframework</span><span class="o">.</span><span class="na">security</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">userdetails</span><span class="o">.</span><span class="na">User</span><span class="o">)</span> <span class="nc">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">getAuthentication</span><span class="o">().</span><span class="na">getPrincipal</span><span class="o">();</span>

        <span class="nc">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">getUser</span><span class="o">(</span><span class="n">principal</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>

        <span class="k">return</span> <span class="nc">ApiResponse</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="s">"user"</span><span class="o">,</span> <span class="n">user</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="apiresponseheader">ApiResponseHeader</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Setter</span>
<span class="nd">@Getter</span>
<span class="nd">@AllArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiResponseHeader</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">code</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nc">String</span> <span class="n">message</span><span class="o">;</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="apiresponse">ApiResponse</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Getter</span>
<span class="nd">@RequiredArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ApiResponse</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">SUCCESS</span> <span class="o">=</span> <span class="mi">200</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">NOT_FOUND</span> <span class="o">=</span> <span class="mi">400</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">FAILED</span> <span class="o">=</span> <span class="mi">500</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">SUCCESS_MESSAGE</span> <span class="o">=</span> <span class="s">"SUCCESS"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NOT_FOUND_MESSAGE</span> <span class="o">=</span> <span class="s">"NOT FOUND"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">FAILED_MESSAGE</span> <span class="o">=</span> <span class="s">"서버에서 오류가 발생하였습니다."</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">INVALID_ACCESS_TOKEN</span> <span class="o">=</span> <span class="s">"Invalid access token."</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">INVALID_REFRESH_TOKEN</span> <span class="o">=</span> <span class="s">"Invalid refresh token."</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">NOT_EXPIRED_TOKEN_YET</span> <span class="o">=</span> <span class="s">"Not expired token yet."</span><span class="o">;</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">ApiResponseHeader</span> <span class="n">header</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">body</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">ApiResponse</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">success</span><span class="o">(</span><span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="no">T</span> <span class="n">body</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">,</span> <span class="no">T</span><span class="o">&gt;</span> <span class="n">map</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">map</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">body</span><span class="o">);</span>

        <span class="k">return</span> <span class="k">new</span> <span class="nf">ApiResponse</span><span class="o">(</span><span class="k">new</span> <span class="nc">ApiResponseHeader</span><span class="o">(</span><span class="no">SUCCESS</span><span class="o">,</span> <span class="no">SUCCESS_MESSAGE</span><span class="o">),</span> <span class="n">map</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">ApiResponse</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">fail</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ApiResponse</span><span class="o">(</span><span class="k">new</span> <span class="nc">ApiResponseHeader</span><span class="o">(</span><span class="no">FAILED</span><span class="o">,</span> <span class="no">FAILED_MESSAGE</span><span class="o">),</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">ApiResponse</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">invalidAccessToken</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ApiResponse</span><span class="o">(</span><span class="k">new</span> <span class="nc">ApiResponseHeader</span><span class="o">(</span><span class="no">FAILED</span><span class="o">,</span> <span class="no">INVALID_ACCESS_TOKEN</span><span class="o">),</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">ApiResponse</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">invalidRefreshToken</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ApiResponse</span><span class="o">(</span><span class="k">new</span> <span class="nc">ApiResponseHeader</span><span class="o">(</span><span class="no">FAILED</span><span class="o">,</span> <span class="no">INVALID_REFRESH_TOKEN</span><span class="o">),</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nc">ApiResponse</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="nf">notExpiredTokenYet</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="nf">ApiResponse</span><span class="o">(</span><span class="k">new</span> <span class="nc">ApiResponseHeader</span><span class="o">(</span><span class="no">FAILED</span><span class="o">,</span> <span class="no">NOT_EXPIRED_TOKEN_YET</span><span class="o">),</span> <span class="kc">null</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="headerutil">HeaderUtil</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">HeaderUtil</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">HEADER_AUTHORIZATION</span> <span class="o">=</span> <span class="s">"Authorization"</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kd">static</span> <span class="nc">String</span> <span class="no">TOKEN_PREFIX</span> <span class="o">=</span> <span class="s">"Bearer "</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">getAccessToken</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">String</span> <span class="n">headerValue</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="no">HEADER_AUTHORIZATION</span><span class="o">);</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">headerValue</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">headerValue</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="no">TOKEN_PREFIX</span><span class="o">))</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">headerValue</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="no">TOKEN_PREFIX</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
        <span class="o">}</span>

        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h5 id="cookieutil">CookieUtil</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CookieUtil</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">Optional</span><span class="o">&lt;</span><span class="nc">Cookie</span><span class="o">&gt;</span> <span class="nf">getCookie</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Cookie</span><span class="o">[]</span> <span class="n">cookies</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">();</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">cookies</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cookies</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Cookie</span> <span class="n">cookie</span> <span class="o">:</span> <span class="n">cookies</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">cookie</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
                    <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="nc">Optional</span><span class="o">.</span><span class="na">empty</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">addCookie</span><span class="o">(</span><span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">,</span> <span class="nc">String</span> <span class="n">value</span><span class="o">,</span> <span class="kt">int</span> <span class="n">maxAge</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Cookie</span> <span class="n">cookie</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Cookie</span><span class="o">(</span><span class="n">name</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>
        <span class="n">cookie</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="s">"/"</span><span class="o">);</span>
        <span class="n">cookie</span><span class="o">.</span><span class="na">setHttpOnly</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
        <span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="n">maxAge</span><span class="o">);</span>

        <span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">deleteCookie</span><span class="o">(</span><span class="nc">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="nc">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="nc">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">Cookie</span><span class="o">[]</span> <span class="n">cookies</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getCookies</span><span class="o">();</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">cookies</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">cookies</span><span class="o">.</span><span class="na">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">for</span> <span class="o">(</span><span class="nc">Cookie</span> <span class="n">cookie</span> <span class="o">:</span> <span class="n">cookies</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">name</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">cookie</span><span class="o">.</span><span class="na">getName</span><span class="o">()))</span> <span class="o">{</span>
                    <span class="n">cookie</span><span class="o">.</span><span class="na">setValue</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
                    <span class="n">cookie</span><span class="o">.</span><span class="na">setPath</span><span class="o">(</span><span class="s">"/"</span><span class="o">);</span>
                    <span class="n">cookie</span><span class="o">.</span><span class="na">setMaxAge</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
                    <span class="n">response</span><span class="o">.</span><span class="na">addCookie</span><span class="o">(</span><span class="n">cookie</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">serialize</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="nc">Base64</span><span class="o">.</span><span class="na">getUrlEncoder</span><span class="o">()</span>
                <span class="o">.</span><span class="na">encodeToString</span><span class="o">(</span><span class="nc">SerializationUtils</span><span class="o">.</span><span class="na">serialize</span><span class="o">(</span><span class="n">obj</span><span class="o">));</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="no">T</span> <span class="nf">deserialize</span><span class="o">(</span><span class="nc">Cookie</span> <span class="n">cookie</span><span class="o">,</span> <span class="nc">Class</span><span class="o">&lt;</span><span class="no">T</span><span class="o">&gt;</span> <span class="n">cls</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">cls</span><span class="o">.</span><span class="na">cast</span><span class="o">(</span>
                <span class="nc">SerializationUtils</span><span class="o">.</span><span class="na">deserialize</span><span class="o">(</span>
                        <span class="nc">Base64</span><span class="o">.</span><span class="na">getUrlDecoder</span><span class="o">().</span><span class="na">decode</span><span class="o">(</span><span class="n">cookie</span><span class="o">.</span><span class="na">getValue</span><span class="o">())</span>
                <span class="o">)</span>
        <span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<h2 id="맺음">맺음</h2>

<p>포스팅을 나누지 않고 한 번에 작성하다보니 엄청나게 긴 포스팅이 되었습니다. 나눠서 하는 것보다는 이 포스팅 하나만 보면 OAuth 로그인을 구현할 수 있으면 좋겠다는 생각에 이렇게 작성하게되었습니다.</p>

<p>가능한한 최대한 자세하게 설명하려고 노력했지만 부족한 점이 있을 것 같습니다. 혹시나 읽으시면서 궁금하신 점이나 이상한 점이 있으시면 댓글 부탁드리겠습니다.</p>

<p>감사합니다.</p>]]></content><author><name>deeplify</name></author><category term="back-end" /><category term="spring" /><category term="spring boot" /><category term="oauth2" /><category term="스프링부트" /><category term="소셜 로그인" /><category term="구글 로그인" /><category term="페이스북 로그인" /><category term="네이버 로그인" /><category term="카카오 로그인" /><summary type="html"><![CDATA[스프링부트를 이용하여 구글, 페이스북, 네이버, 카카오 OAuth2 로그인 구현하는 방법에 대해서 소개합니다.]]></summary></entry><entry><title type="html">Github CLI</title><link href="https://deeplify.dev/tools/git/github-cli" rel="alternate" type="text/html" title="Github CLI" /><published>2023-06-13T00:00:00+09:00</published><updated>2023-06-13T00:00:00+09:00</updated><id>https://deeplify.dev/tools/git/github-cli</id><content type="html" xml:base="https://deeplify.dev/tools/git/github-cli"><![CDATA[<p>Github를 CLI 환경에서 사용할 수 있도록 해주는 Github CLI에 대해서 알아보도록 하겠습니다.</p>

<p><img src="/assets/images/github-cli01.png" alt="github-cli01" /></p>

<blockquote>
  <p>GitHub와의 상호작용을 커맨드라인에서 사용할 수 있게 해주는 도구.</p>
</blockquote>

<h2 id="github-cli-특징">Github CLI 특징</h2>

<ul>
  <li>github cli는 hub 라는 command line tool로 시작해서, 2019년에 github cli 공식화 되었음.</li>
  <li>github cli는 내부적으로 github API를 사용하도록 구현되어 있음.</li>
  <li>github cli는 go 언어로 작성 됨.</li>
</ul>

<h3 id="github-cli-명령어-예제">Github CLI 명령어 예제</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gh repo create      <span class="c"># 레포지토리 생성</span>
gh <span class="nb">pr </span>create        <span class="c"># PR 생성</span>
</code></pre></div></div>

<p>Github CLI Manual &gt; 명령어 전체 확인 가능</p>

<h2 id="github-cli-사용해보기">Github CLI 사용해보기</h2>

<h3 id="1-설치">1. 설치</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>gh
</code></pre></div></div>

<p><img src="/assets/images/github-cli02.png" alt="github-cli02" /></p>

<p><img src="/assets/images/github-cli03.png" alt="github-cli03" /></p>

<p>or</p>

<p><a href="https://cli.github.com/">GitHub CLI</a></p>

<h3 id="2-로그인">2. 로그인</h3>

<ol>
  <li>로그인 명령어</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh auth login
</code></pre></div></div>

<ol>
  <li>github 서버 선택</li>
</ol>

<p>? What account do you want to log into?  [Use arrows to move, type to filter]</p>
<blockquote>
  <p>GitHub.com
  GitHub Enterprise Server</p>
</blockquote>

<p><img src="/assets/images/github-cli04.png" alt="github-cli04" /></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code> 2-1<span class="o">)</span> github <span class="nb">hostname </span>입력 <span class="o">(</span>Enterprise Only<span class="o">)</span>

? What account <span class="k">do </span>you want to log into? GitHub Enterprise Server
? GHE <span class="nb">hostname</span>: github.nhnent.com
</code></pre></div></div>

<ol>
  <li>사용할 프로토콜 선택</li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? What is your preferred protocol for Git operations?  [Use arrows to move, type to filter]
  HTTPS
&gt; SSH
</code></pre></div></div>

<p><img src="/assets/images/github-cli05.png" alt="github-cli05" /></p>

<ol>
  <li>인증 방법 선택</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>? How would you like to authenticate GitHub CLI?  <span class="o">[</span>Use arrows to move, <span class="nb">type </span>to filter]
  Login with a web browser
<span class="o">&gt;</span> Paste an authentication token
</code></pre></div></div>

<p><img src="/assets/images/github-cli06.png" alt="github-cli06" /></p>

<p><img src="/assets/images/github-cli07.png" alt="github-cli07" /></p>

<p><img src="/assets/images/github-cli08.png" alt="github-cli08" /></p>

<p><img src="/assets/images/github-cli09.png" alt="github-cli09" /></p>

<ol>
  <li>github cli 인증 정보 확인</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh auth status

github.com
✓ Logged <span class="k">in </span>to github.com as <span class="o">(</span>keyring<span class="o">)</span>
✓ Git operations <span class="k">for </span>github.com configured to use ssh protocol.
✓ Token: ghp_<span class="k">************************************</span>
✓ Token scopes: admin:enterprise, admin:gpg_key, admin:org, admin:org_hook, admin:public_key, admin:repo_hook, admin:ssh_signing_key, audit_log, codespace, delete:packages, delete_repo, gist, notifications, project, repo, user, workflow, write:discussion, write:packages
</code></pre></div></div>

<p><img src="/assets/images/github-cli10.png" alt="github-cli10" /></p>

<h3 id="3-명령어-사용하기">3. 명령어 사용하기</h3>

<h4 id="repository-관련-명령어">Repository 관련 명령어</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh repo <span class="o">[</span>create|fork|clone]
</code></pre></div></div>

<h5 id="레포지토리-생성-예제">레포지토리 생성 예제</h5>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh repo create github-cli-tutorial <span class="c"># 레포지토리 생성</span>
<span class="nv">$ </span>gh repo clone s~/github-cli-tutorial <span class="c"># 클론 (git clone 동일)</span>
</code></pre></div></div>

<p><img src="/assets/images/github-cli11.png" alt="github-cli11" /></p>

<ul>
  <li>빈 프로젝트에 README.md 생성 (main 브랜치)</li>
</ul>

<div class="language-md highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># This is a Gihub CLI Tutorial</span>
</code></pre></div></div>

<p><img src="/assets/images/github-cli12.png" alt="github-cli12" /></p>

<h4 id="2-issue-관련-명령어">2. Issue 관련 명령어</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh issue <span class="o">[</span>create|close|reopen|status|list]
<span class="nv">$ </span>gh issue list <span class="nt">--</span><span class="o">[</span>assignee|author|label|state|web]
<span class="nv">$ </span>gh issue view <span class="o">[</span>number|url]
</code></pre></div></div>

<h5 id="이슈-생성-예제">이슈 생성 예제</h5>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span><span class="nb">cd </span>github-cli-tutorial
<span class="nv">$ </span>gh issue create
</code></pre></div></div>

<p><img src="/assets/images/github-cli13.png" alt="github-cli13" /></p>

<p><img src="/assets/images/github-cli14.png" alt="github-cli14" /></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh issue list
</code></pre></div></div>

<p><img src="/assets/images/github-cli15.png" alt="github-cli15" /></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh issue view 1
</code></pre></div></div>

<p><img src="/assets/images/github-cli16.png" alt="github-cli16" /></p>

<h4 id="3-pull-request-관련-명령어">3. Pull Request 관련 명령어</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh <span class="nb">pr</span> <span class="o">[</span>create|list|close|status|edit|checkout|...]
</code></pre></div></div>

<h5 id="pr-생성-예제">PR 생성 예제</h5>

<ol>
  <li>새로운 브랜치 생성</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git checkout <span class="nt">-b</span> feature#1
</code></pre></div></div>

<ol>
  <li>README .md 를 아래와 같이 수정</li>
</ol>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">
</span># This is a Gihub CLI Tutorial
<span class="err">
</span><span class="gd">- 안녕하세요.
</span></code></pre></div></div>

<ol>
  <li>PR 생성하기</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>git add <span class="nb">.</span>
<span class="nv">$ </span>git commit <span class="nt">-m</span> <span class="s2">"add text to README.md"</span>

<span class="nv">$ </span>gh <span class="nb">pr </span>create
</code></pre></div></div>

<p><img src="/assets/images/github-cli17.png" alt="github-cli17" /></p>

<p><img src="/assets/images/github-cli18.png" alt="github-cli18" /></p>

<h5 id="pr-리뷰-예제">PR 리뷰 예제</h5>

<p><img src="/assets/images/github-cli19.png" alt="github-cli19" /></p>

<ol>
  <li>PR 리스트 조회</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh <span class="nb">pr </span>list

Showing 1 of 1 open pull request <span class="k">in </span>s~/github-cli-tutorial

<span class="c"># 5  README.md 내용 추가  feature#1  about 12 days ago</span>
</code></pre></div></div>

<ol>
  <li>pr 브랜치로 바로 checkout 하기</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh <span class="nb">pr </span>checkout feature#1
</code></pre></div></div>

<p><img src="/assets/images/github-cli20.png" alt="github-cli20" /></p>

<ol>
  <li>pr 리뷰 완료하기</li>
</ol>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh <span class="nb">pr </span>review <span class="nt">--comment</span> <span class="nt">--body</span> <span class="s2">"2번째 라인 수정이 필요합니다."</span>
<span class="nv">$ </span>gh <span class="nb">pr </span>review <span class="nt">--approve</span>
</code></pre></div></div>

<h2 id="그래서-어디에-쓰지">그래서 어디에 쓰지?</h2>

<p>위에서 한 작업들은 그냥 웹이나 IDE에서 하면 더 직관적이고 편할 것 같은데… 굳이 CLI로?</p>

<h3 id="장점을-뽑아보자면">장점을 뽑아보자면</h3>

<ol>
  <li>브라우저, 깃 GUI 툴, IDE 간의 전환 필요 없이 개발이 가능하다.</li>
  <li>issue나 pr등 github API에서 제공하는 기능들을 간단한 명령어로 사용 가능하도록 해준다.
  =&gt; 기존 github API 라이브러리 or 모듈을 사용하여 개발하는 것보다 심플하게 개발 가능.</li>
</ol>

<h3 id="유용할-것-같은-케이스">유용할 것 같은 케이스</h3>

<h4 id="간단한-자동화-예제">간단한 자동화 예제</h4>

<ol>
  <li>PR 생성 시, 자동으로 라벨을 붙여주는 기능</li>
  <li>오래된 PR들을 조회하여 주기적으로 알림 전송</li>
</ol>

<h4 id="준비물">준비물</h4>

<ul>
  <li>Github CLI</li>
  <li>Github Action (github에서 공식적으로 제공하는 CI/CD 툴, jenkins 등으로 대체 가능)</li>
</ul>

<h4 id="1-pr-생성-시-자동으로-라벨을-붙여주는-기능">1. PR 생성 시, 자동으로 라벨을 붙여주는 기능</h4>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ cd ~/github-cli-tutorial
$ vi .github/workflows/auto_pr_labeling.yml
</code></pre></div></div>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">name</span><span class="pi">:</span> <span class="s">자동 PR 라벨 추가</span>

 <span class="na">on</span><span class="pi">:</span>
   <span class="na">pull_request</span><span class="pi">:</span>
     <span class="na">branches</span><span class="pi">:</span> <span class="pi">[</span><span class="nv">main</span><span class="pi">]</span>
     <span class="na">types</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="s">opened</span>

 <span class="na">jobs</span><span class="pi">:</span>
   <span class="na">auto_pr_labeling_job</span><span class="pi">:</span>
     <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>

     <span class="na">steps</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">레포지토리 체크아웃</span>
         <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
 
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">PR 조회 및 라벨 추가하기</span>
         <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
           <span class="s">label="work-in-process"</span>
           <span class="s"># 1. 라벨 생성</span>
           <span class="s">gh label list -S $label 2&gt;/dev/null || gh label create $label --color FFA500 --description "This PR is a work in process"</span>
           <span class="s"># 2. PR 조회 후, 라벨 달아주기</span>
           <span class="s">pr_numbers=$(gh pr list --json number --search "is:pr is:open -label:work-in-process" | jq -r '.[].number')</span>
           <span class="s">for pr_number in $pr_numbers; do</span>
             <span class="s">gh pr edit $pr_number --add-label $label</span>
           <span class="s">done</span>
         <span class="na">env</span><span class="pi">:</span>
           <span class="na">GH_TOKEN</span><span class="pi">:</span> <span class="s">$</span>
</code></pre></div></div>

<p><img src="/assets/images/github-cli21.png" alt="github-cli21" /></p>

<p><br /> <br /></p>

<h4 id="2-오래된-pr들을-조회하여-주기적으로-알림-전송">2. 오래된 PR들을 조회하여 주기적으로 알림 전송</h4>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="na">name</span><span class="pi">:</span> <span class="s">오래된 PR 알림</span>

 <span class="na">on</span><span class="pi">:</span>
   <span class="na">schedule</span><span class="pi">:</span>
     <span class="pi">-</span> <span class="na">cron</span><span class="pi">:</span> <span class="s1">'</span><span class="s">0</span><span class="nv"> </span><span class="s">0</span><span class="nv"> </span><span class="s">**</span><span class="nv"> </span><span class="s">*'</span>  <span class="c1"># 매일 자정마다 실행</span>

<span class="c1"># 수동 실행</span>

<span class="c1"># on: [workflow_dispatch]</span>

 <span class="na">jobs</span><span class="pi">:</span>
   <span class="na">stale_pr_notification_job</span><span class="pi">:</span>
     <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>

     <span class="na">steps</span><span class="pi">:</span>
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">레포지토리 체크아웃</span>
         <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>
 
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">오래된_PR_가져오기</span>
         <span class="na">id</span><span class="pi">:</span> <span class="s">get_stale_prs</span>
         <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
           <span class="s">stale_prs=$(gh pr list --state open --json number --jq ".[] | select(.updated_at &lt; (now - 30*24*60*60)) | .number")</span>
           <span class="s">echo "::set-output name=stale_prs::$stale_prs"</span>
         <span class="na">env</span><span class="pi">:</span>
           <span class="na">GH_TOKEN</span><span class="pi">:</span> <span class="s">$</span>
 
       <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Slack 알림 전송</span>
         <span class="na">uses</span><span class="pi">:</span> <span class="s">rtCamp/action-slack-notify@v2</span>
         <span class="na">env</span><span class="pi">:</span>
           <span class="na">SLACK_CHANNEL</span><span class="pi">:</span> <span class="s">github-workflows</span>
           <span class="na">SLACK_WEBHOOK</span><span class="pi">:</span> <span class="s">$</span>
           <span class="na">SLACK_TITLE</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Stale</span><span class="nv"> </span><span class="s">PR'</span>
           <span class="na">SLACK_MESSAGE</span><span class="pi">:</span> <span class="s1">'</span><span class="s">생성된지</span><span class="nv"> </span><span class="s">오래된</span><span class="nv"> </span><span class="s">PR이</span><span class="nv"> </span><span class="s">있습니다:</span><span class="nv"> </span><span class="s">$'</span>
           <span class="na">SLACK_USERNAME</span><span class="pi">:</span> <span class="s1">'</span><span class="s">GITHUB'</span>
</code></pre></div></div>

<p><img src="/assets/images/github-cli22.png" alt="github-cli22" /></p>

<h4 id="그외">그외</h4>

<ul>
  <li>특정 시간에 PR 자동 승인, 머지, 클로즈 하도록 하는 기능</li>
  <li>소나큐브 연동</li>
</ul>

<p>등등 아이디어만 있으면 여러가지를 적용해 볼 수 있다.</p>

<h3 id="extensions">Extensions</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh extension browse
</code></pre></div></div>

<p><img src="/assets/images/github-cli23.png" alt="github-cli23" /></p>

<h3 id="예제-gh-ls">예제: gh-ls</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>gh extension <span class="nb">install </span>wuwe1/gh-ls
<span class="nv">$ </span>gh <span class="nb">ls</span> <span class="nt">-R</span> ~/github-cli-tutorial
</code></pre></div></div>

<p><img src="/assets/images/github-cli24.png" alt="github-cli24" /></p>

<h2 id="결론">결론</h2>

<blockquote>
  <p>Github CLI라는 도구가 있고, 이를 이용하여 Github와 Github API 등과 관련된 작업을 쉽게 할 수 있다.</p>
</blockquote>

<h2 id="참고">참고</h2>

<div class="related-link-wrap">
    <a class="related-link" href="https://cli.github.com" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">GitHub CLI | Take GitHub to the command line</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">cli.github.com</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/cli/cli" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">GitHub - cli/cli: GitHub's official command line tool</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/wuwe1/gh-ls" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">GitHub - wuwe1/gh-ls: List contents of GitHub repo</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://blog.outsider.ne.kr/1498" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">GitHub 공식 CLI gh :: Outsider's Dev Story</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">blog.outsider.ne.kr</span>
        </div>
      </div>
    </a>
</div>]]></content><author><name>deeplify</name></author><category term="tools" /><category term="git" /><category term="git" /><category term="github" /><category term="cli" /><summary type="html"><![CDATA[Github CLI에 대해서 알아보겠습니다.]]></summary></entry><entry><title type="html">[Kotlin/코틀린] Coroutines Multithreading (feat. Fuel)</title><link href="https://deeplify.dev/back-end/kotlin/coroutines-multi-thread" rel="alternate" type="text/html" title="[Kotlin/코틀린] Coroutines Multithreading (feat. Fuel)" /><published>2022-09-30T00:00:00+09:00</published><updated>2022-09-30T00:00:00+09:00</updated><id>https://deeplify.dev/back-end/kotlin/coroutines-multi-thread</id><content type="html" xml:base="https://deeplify.dev/back-end/kotlin/coroutines-multi-thread"><![CDATA[<p>Java를 사용하던 시절에는 멀티 스레드를 이용한 병렬 프로그래밍은 조심해서 사용해야합니다. 자칫 잘못해서 성능이 떨어질 수도 있고, 의도하지 않은 대로 동작하는 경우가 많습니다. 하지만 코틀린에서는 <strong>Coroutines</strong>라는 라이브러리를 통해서 멀티스레딩을 간단하면서도 컨트롤 하기 쉽도록 해줍니다.</p>

<h3 id="coroutines-multithreading">Coroutines Multithreading</h3>

<p>이번 글에서는 코루틴에 대해서 간단하게만 소개하고, 이를 이용하여 Fuel을 이용하여 네트워크 통신을 Parallel하게 전송하고 받는 예제를 보여드리도록 하겠습니다.</p>

<blockquote>
  <p>Key Points</p>
  <ul>
    <li>CoroutineScope: 새로운 coroutine에 대한 범위를 정의합니다.</li>
    <li>CoroutineContext: coroutine이 실행될 스레드를 결정합니다.</li>
    <li>Dispatchers: context의 요소(동작 방식 등)들로 미리 정의되어 있습니다.</li>
  </ul>
</blockquote>

<h3 id="coroutines">Coroutines</h3>

<p>위에서 간단하게 정리를 해보았는데, 좀더 자세히 알아보도록 하겠습니다.</p>

<h4 id="coroutinescope">CoroutineScope</h4>

<p>이름 그대로 코루틴의 범위를 결정하는 것으로 다음과 같이 인터페이스 형태로 구현되어 있습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">kotlinx.coroutines</span>

<span class="k">public</span> <span class="kd">interface</span> <span class="nc">CoroutineScope</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">abstract</span> <span class="kd">val</span> <span class="py">coroutineContext</span><span class="p">:</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">CoroutineContext</span>
<span class="p">}</span>
</code></pre></div></div>

<p>또한 코루틴 <code class="language-plaintext highlighter-rouge">Scope</code>를 다음과 같은 코드로 간단하게 생성이 가능합니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">val</span> <span class="py">scope</span> <span class="p">=</span> <span class="nc">CoroutineScope</span><span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="nc">Default</span><span class="p">)</span>
</code></pre></div></div>

<p>하지만, 보통 더 간단하고, 흔히 사용되는 <code class="language-plaintext highlighter-rouge">Scope</code>는 다음과 같이 미리 Singleton 객체로 정의가 되어있습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">kotlinx.coroutines</span>

<span class="k">public</span> <span class="kd">object</span> <span class="nc">GlobalScope</span> <span class="p">:</span> <span class="n">kotlinx</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">CoroutineScope</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">open</span> <span class="kd">val</span> <span class="py">coroutineContext</span><span class="p">:</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">CoroutineContext</span> <span class="cm">/* compiled code */</span>
<span class="p">}</span>
</code></pre></div></div>

<h4 id="coroutinecontext--dispatchers">CoroutineContext &amp; Dispatchers</h4>

<p>코루틴이 어떻 방식으로 실행되고, 어떤 스레드에서 실행되는지 등 코루틴이 동작하는데 필요한 여러가지 정보들을 가지고 있습니다. 요소로는 <strong>Job</strong>과 <strong>Dispatcher</strong> 두 가지가 있습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="kd">interface</span> <span class="nc">Job</span> <span class="p">:</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">CoroutineContext</span><span class="p">.</span><span class="nc">Element</span> <span class="p">{</span> <span class="cm">/*...생략...*/</span> <span class="p">}</span>

<span class="k">public</span> <span class="k">abstract</span> <span class="kd">class</span> <span class="nc">CoroutineDispatcher</span> <span class="k">public</span> <span class="k">constructor</span><span class="p">()</span> <span class="p">:</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">AbstractCoroutineContextElement</span><span class="p">,</span> <span class="n">kotlin</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">ContinuationInterceptor</span> <span class="p">{</span> <span class="cm">/*...생략...*/</span> <span class="p">}</span>
</code></pre></div></div>

<p>위 두 가지 또한 많이 사용할 것 같은 것을 미리 싱글톤으로 구현을 해놓았습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">package</span> <span class="nn">kotlinx.coroutines</span>

<span class="k">public</span> <span class="kd">object</span> <span class="nc">Dispatchers</span> <span class="p">{</span>
    <span class="err">@</span><span class="n">kotlin</span><span class="p">.</span><span class="n">jvm</span><span class="p">.</span><span class="nc">JvmStatic</span> <span class="k">public</span> <span class="k">final</span> <span class="kd">val</span> <span class="py">Default</span><span class="p">:</span> <span class="n">kotlinx</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">CoroutineDispatcher</span> <span class="cm">/* compiled code */</span>

    <span class="err">@</span><span class="n">kotlin</span><span class="p">.</span><span class="n">jvm</span><span class="p">.</span><span class="nc">JvmStatic</span> <span class="k">public</span> <span class="k">final</span> <span class="kd">val</span> <span class="py">IO</span><span class="p">:</span> <span class="n">kotlinx</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">CoroutineDispatcher</span> <span class="cm">/* compiled code */</span>

    <span class="err">@</span><span class="n">kotlin</span><span class="p">.</span><span class="n">jvm</span><span class="p">.</span><span class="nc">JvmStatic</span> <span class="k">public</span> <span class="k">final</span> <span class="kd">val</span> <span class="py">Main</span><span class="p">:</span> <span class="n">kotlinx</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">MainCoroutineDispatcher</span> <span class="cm">/* compiled code */</span>

    <span class="err">@</span><span class="n">kotlin</span><span class="p">.</span><span class="n">jvm</span><span class="p">.</span><span class="nc">JvmStatic</span> <span class="k">public</span> <span class="k">final</span> <span class="kd">val</span> <span class="py">Unconfined</span><span class="p">:</span> <span class="n">kotlinx</span><span class="p">.</span><span class="n">coroutines</span><span class="p">.</span><span class="nc">CoroutineDispatcher</span> <span class="cm">/* compiled code */</span>
<span class="p">}</span>
</code></pre></div></div>

<p>각각의 Dispatcher들의 특징이 있는데,</p>

<ul>
  <li>Default: 메인 스레드에서 작업하기에 벅찬 작업들을 실행하기에 적합합니다. 컨텍스트가 지정되지 않은 경우 이 디스패처가 사용됩니다.</li>
  <li>IO: 네트워크, 디스크 등 IO 작업에 적합합니다.</li>
  <li>Main: UI 객체로 동작하는 단일 스레드입니다.</li>
  <li>Unconfined: 특정 스레드에 국한되지 않는 디스패처입니다.</li>
</ul>

<h3 id="coroutines-example">Coroutines Example</h3>

<p>기본 예제들은 다른 블로그나 공식 문서에도 잘 정리되어 있어, Coroutines와 Fuel을 이용하여 네트워크 통신을 Parallel 하게 하는 예제를 보도록하겠습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">val</span> <span class="py">jobs</span> <span class="p">=</span> <span class="nc">List</span><span class="p">(</span><span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
    <span class="nc">GlobalScope</span><span class="p">.</span><span class="nf">launch</span> <span class="p">(</span><span class="nc">Dispatchers</span><span class="p">.</span><span class="nc">IO</span><span class="p">)</span> <span class="p">{</span>
      <span class="nf">println</span><span class="p">(</span><span class="s">"------- Request: $it --------"</span><span class="p">)</span>
      <span class="kd">val</span> <span class="py">result</span> <span class="p">=</span> <span class="nf">request</span><span class="p">()</span>
      <span class="nf">println</span><span class="p">(</span><span class="s">"Status Code: ${result.statusCode}"</span><span class="p">)</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="nf">runBlocking</span> <span class="p">{</span> <span class="n">jobs</span><span class="p">.</span><span class="nf">forEach</span> <span class="p">{</span> <span class="n">it</span><span class="p">.</span><span class="nf">join</span><span class="p">()</span> <span class="p">}</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">fun</span> <span class="nf">request</span><span class="p">()</span> <span class="p">=</span>
  <span class="nc">Fuel</span><span class="p">.</span><span class="k">get</span><span class="p">(</span><span class="s">"https://google.com"</span><span class="p">)</span>
      <span class="p">.</span><span class="nf">responseString</span><span class="p">().</span><span class="n">second</span>
</code></pre></div></div>

<h5 id="결과">결과</h5>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>------- Request: 2 --------
------- Request: 1 --------
------- Request: 4 --------
------- Request: 3 --------
------- Request: 0 --------
------- Request: 8 --------
------- Request: 5 --------
------- Request: 7 --------
------- Request: 9 --------
------- Request: 6 --------
200
200
200
200
200
200
200
200
200
200
</code></pre></div></div>

<h2 id="맺음">맺음</h2>

<p>간단하게 코루틴의 기초에 대해서 알아보고, 코루틴을 이용하여 네트워크 통신을 병렬로 처리하는 예제를 소개해드렸습니다. 혹시 궁금하신 점이나 이상한 점이 있다면 댓글 부탁드리겠습니다.</p>

<h4 id="ref">Ref</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://kotlinlang.org/docs/reference/coroutines/basics.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Basics - Kotlin Programming Language</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">kotlinlang.org</span>
        </div>
      </div>
    </a>
</div>]]></content><author><name>deeplify</name></author><category term="back-end" /><category term="kotlin" /><category term="kotlin" /><category term="coroutines" /><category term="fuel" /><category term="thread" /><category term="코틀린" /><category term="코루틴" /><category term="멀티 스레드" /><summary type="html"><![CDATA[Kotlin의 coroutines를 이용하여 멀티 스레드 예제를 통해서 간단하게 소개합니다.]]></summary></entry></feed>
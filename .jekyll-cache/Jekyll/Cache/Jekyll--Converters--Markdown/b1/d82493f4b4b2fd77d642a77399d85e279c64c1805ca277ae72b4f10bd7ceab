I"gH<p>이번에 소개해드릴 문제는 다익스트라 알고리즘을 이용하여 그래프 내에서 최단 경로를 구하는 문제입니다. 예전에는 곧잘 풀곤했는데, 지금은 예전의 제 코드를 보면서 다시한번 풀어보았습니다.</p>

<h2 id="백준-1753-최단경로">백준 1753: 최단경로</h2>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>방향그래프가 주어지면 주어진 시작점에서 다른 모든 정점으로의 최단 경로를 구하는 프로그램을 작성하시오. 단, 모든 간선의 가중치는 10 이하의 자연수이다.
</code></pre></div></div>

<h3 id="풀이">풀이</h3>

<p>최단경로를 구하는 알고리즘 중 가장 일반적으로 사용하면서 그래프 내에 음의 가중치가 없는 경우 사용할 수 있는 다익스트라 알고리즘을 사용해볼 수 있는 문제입니다.</p>

<h3 id="정답-코드-dijkstra">정답 코드 (Dijkstra)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Boj1753</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">INF</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">V</span><span class="o">;</span> <span class="c1">// 노드 수</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="no">E</span><span class="o">;</span> <span class="c1">// 엣지 수</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;[]</span> <span class="n">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">[</span><span class="mi">20001</span><span class="o">];</span> <span class="c1">// 그래프 정보</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">distance</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">int</span><span class="o">[</span><span class="mi">20001</span><span class="o">];</span> <span class="c1">// 거리 정보</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="nc">String</span><span class="o">[]</span> <span class="n">ins</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
        <span class="no">V</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ins</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
        <span class="no">E</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ins</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>

        <span class="kt">int</span> <span class="n">s</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">20001</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">graph</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
            <span class="n">distance</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">=</span> <span class="no">INF</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="n">distance</span><span class="o">[</span><span class="n">s</span><span class="o">]</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>

        <span class="nc">Map</span><span class="o">&lt;</span><span class="nc">Integer</span><span class="o">,</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;&gt;</span> <span class="n">edges</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">HashMap</span><span class="o">&lt;&gt;();</span>

        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="no">E</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">ins</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
            <span class="kt">int</span> <span class="n">u</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ins</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
            <span class="kt">int</span> <span class="n">v</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ins</span><span class="o">[</span><span class="mi">1</span><span class="o">]);</span>
            <span class="kt">int</span> <span class="n">w</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ins</span><span class="o">[</span><span class="mi">2</span><span class="o">]);</span>

            <span class="n">graph</span><span class="o">[</span><span class="n">u</span><span class="o">].</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="n">v</span><span class="o">,</span> <span class="n">w</span><span class="o">));</span>
        <span class="o">}</span>

        <span class="n">dijkstra</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">print</span><span class="o">());</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="nc">String</span> <span class="nf">print</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">1</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;=</span> <span class="no">V</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">((</span><span class="n">distance</span><span class="o">[</span><span class="n">i</span><span class="o">]</span> <span class="o">==</span> <span class="no">INF</span> <span class="o">?</span> <span class="s">"INF"</span><span class="o">:</span> <span class="n">distance</span><span class="o">[</span><span class="n">i</span><span class="o">]));</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="s">"\n"</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">dijkstra</span><span class="o">(</span><span class="kt">int</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// 다익스트라의 경우, 성능을 위해 우선순위 큐를 사용</span>
        <span class="nc">PriorityQueue</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;</span> <span class="n">pq</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">PriorityQueue</span><span class="o">&lt;&gt;();</span>
        <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="n">s</span><span class="o">,</span> <span class="n">distance</span><span class="o">[</span><span class="n">s</span><span class="o">]));</span>

        <span class="c1">// 방문한 노드인지 체크하는 배열, </span>
        <span class="c1">// 우선순위 큐를 사용할 때만 해당 배열을 사용 가능</span>
        <span class="c1">// 일반 큐의 경우 같은 노드를 여러 번 방문해야 최소값을 찾을 수 있음</span>
        <span class="kt">boolean</span><span class="o">[]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">20001</span><span class="o">];</span>

        <span class="k">while</span> <span class="o">(!</span><span class="n">pq</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            
            <span class="nc">Edge</span> <span class="n">e</span> <span class="o">=</span> <span class="n">pq</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>

            <span class="c1">// 해당 노드 방문 체크</span>
            <span class="c1">// 이 노드는 우선 순위 큐로 방문되어 이미 최소값이 결정되어 있음</span>
            <span class="n">visited</span><span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="na">v</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">graph</span><span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="na">v</span><span class="o">].</span><span class="na">size</span><span class="o">();</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="kt">int</span> <span class="n">from</span> <span class="o">=</span> <span class="n">e</span><span class="o">.</span><span class="na">v</span><span class="o">;</span> <span class="c1">// 현재 노드</span>
                <span class="kt">int</span> <span class="n">to</span> <span class="o">=</span> <span class="n">graph</span><span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="na">v</span><span class="o">].</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">v</span><span class="o">;</span> <span class="c1">// 현재 노드와 연결된 노드</span>
                <span class="kt">int</span> <span class="n">weight</span> <span class="o">=</span> <span class="n">graph</span><span class="o">[</span><span class="n">e</span><span class="o">.</span><span class="na">v</span><span class="o">].</span><span class="na">get</span><span class="o">(</span><span class="n">i</span><span class="o">).</span><span class="na">w</span><span class="o">;</span> <span class="c1">// 연결된 노드와의 가중치</span>

                <span class="c1">// 연결된 노드가 처음 방문하는 노드 이면서</span>
                <span class="c1">// 이미 저장된 연결된 노드까지의 거리 &gt; 현재 노드 + 현재 ~ 연결된 노드의 가중치인 경우, 거리 갱신</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">to</span><span class="o">]</span> <span class="o">&amp;&amp;</span> <span class="n">distance</span><span class="o">[</span><span class="n">to</span><span class="o">]</span> <span class="o">&gt;</span> <span class="n">distance</span><span class="o">[</span><span class="n">from</span><span class="o">]</span> <span class="o">+</span> <span class="n">weight</span><span class="o">)</span> <span class="o">{</span>
                    <span class="n">distance</span><span class="o">[</span><span class="n">to</span><span class="o">]</span> <span class="o">=</span> <span class="n">distance</span><span class="o">[</span><span class="n">from</span><span class="o">]</span> <span class="o">+</span> <span class="n">weight</span><span class="o">;</span>
                    <span class="n">pq</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">Edge</span><span class="o">(</span><span class="n">to</span><span class="o">,</span> <span class="n">distance</span><span class="o">[</span><span class="n">to</span><span class="o">]));</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Edge</span> <span class="kd">implements</span> <span class="nc">Comparable</span><span class="o">&lt;</span><span class="nc">Edge</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">v</span><span class="o">;</span>
        <span class="kd">private</span> <span class="kt">int</span> <span class="n">w</span><span class="o">;</span>

        <span class="kd">public</span> <span class="nf">Edge</span><span class="o">(</span><span class="kt">int</span> <span class="n">v</span><span class="o">,</span> <span class="kt">int</span> <span class="n">w</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">v</span> <span class="o">=</span> <span class="n">v</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">w</span> <span class="o">=</span> <span class="n">w</span><span class="o">;</span>
        <span class="o">}</span>

        <span class="nd">@Override</span>
        <span class="kd">public</span> <span class="kt">int</span> <span class="nf">compareTo</span><span class="o">(</span><span class="nc">Edge</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">return</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">w</span><span class="o">,</span> <span class="n">o</span><span class="o">.</span><span class="na">w</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="마무리">마무리</h2>

<p>그래프 문제가 그렇게 많이 출제지는 않는 것 같지만, 출제된다면 그래프 문제의 기본이 되는 다익스트라 알고리즘은 익숙하게 다룰줄 알아야한다고 생각합니다. 혹시 궁금하신 점이나 이상한 점이 있다면 댓글 부탁드리겠습니다.</p>

<p>감사합니다.</p>
:ET
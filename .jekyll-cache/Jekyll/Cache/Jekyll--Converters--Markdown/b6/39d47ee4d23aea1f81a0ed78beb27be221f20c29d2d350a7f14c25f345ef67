I" l<p>이번 포스팅에서는 Self hosted Github Actions Runner를 설치 하는 방법과 설치된 Actions Runner 위에서 실행되는 workflow를 만들어보고 실행해보는 시간을 가져 보겠습니다.</p>

<h2 id="github-설정">Github 설정</h2>

<blockquote>
  <p>환경</p>
  <ol>
    <li>Github Enterprise를 사용 중입니다.</li>
    <li>권한은 Organization 어드민 권한입니다. (Enterprise Owers 아님)</li>
    <li>Actions Runner가 설치될 서버의 OS는 Ubuntu 22.04 입니다.</li>
    <li>Actions Runner는 Docker로 래핑하여 구성합니다.</li>
    <li>쿠버네티스는 사용하지 않고, docker-compose를 통해 단순 배포하는 형식으로 진행합니다.</li>
  </ol>
</blockquote>

<h3 id="1-github-설정">1. github 설정</h3>

<h4 id="러너-그룹-설정">러너 그룹 설정</h4>

<p>우선 러너 그룹은 Enterprise에서만 사용 가능합니다. 러너들의 그룹을 설정하는 이유는 리소스 관리와 캐시의 사용성 등을 위함입니다. 예를 들어 java 빌드용 러너가 있을 수 있고, python 빌드용 러너가 있을 수 있습니다.</p>

<p><img src="/assets/images/gh-actions-runner-01.jpg" alt="gh-action-runner-01" /></p>

<p>위 사진과 같이 Orgaization의 설정으로 이동합니다.</p>

<p><img src="/assets/images/gh-actions-runner-02.jpg" alt="gh-action-runner-02" /></p>

<p>왼쪽 메뉴의 Actions &gt; Runner Groups로 이동하여 <code class="language-plaintext highlighter-rouge">New runner group</code>을 눌러줍니다.</p>

<p><img src="/assets/images/gh-actions-runner-03.jpg" alt="gh-action-runner-03" /></p>

<p>러너 그룹 이름과 해당 그룹이 사용될 repository, workflow에 대한 접근 권한 설정을 할 수 있습니다.</p>

<h4 id="러너-생성">러너 생성</h4>

<p>Self-hosted Runner 의 경우, github 설정 페이지를 통해서 생성할 수도 있고 PAT(Personal-Access-Token)을 이용하여 외부에서 설치하면서 연동할 수도 있습니다.</p>

<p><img src="/assets/images/gh-actions-runner-04.jpg" alt="gh-action-runner-04" /></p>

<p>위 사진과 같이 왼쪽 메뉴에서 Actions &gt; Runners로 이동하여 <code class="language-plaintext highlighter-rouge">New runner</code>를 눌러줍니다.</p>

<p><img src="/assets/images/gh-actions-runner-05.jpg" alt="gh-action-runner-05" /></p>

<p>위와 같이 러너를 설치 가이드가 상세하게 작성되어 있습니다.</p>

<h3 id="2-외부에서-러너-설치-및-연동">2. 외부에서 러너 설치 및 연동</h3>

<blockquote>
  <p>사전 조건</p>
  <ol>
    <li>러너 그룹은 생성되어 있다고 가정합니다.</li>
    <li>PAT(Personal-Access-Token)은 발급 받은 상태여야 합니다. (최소 admin:org, admin:enterprise 권한 필요)</li>
    <li>도커가 설치되어 있어야 합니다.</li>
  </ol>
</blockquote>

<h4 id="도커-이미지-선택하기">도커 이미지 선택하기</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/actions/runner-images" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">actions/runner-images: GitHub Actions runner images</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<p>Github Actions에서 공식으로 제공하는 Runner 이미지 입니다. 위 레포지토리에서 필요한 이미지를 선택해서 다운 받아서 진행해도 무방합니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/actions/runner-images/blob/main/images/ubuntu/Ubuntu2204-Readme.md" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">runner-images/images/ubuntu/Ubuntu2204-Readme.md at main · actions/runner-images</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<p>하지만 위 내용을 읽어보시면, 러너 이미지 내에 잘 사용하지도 않는 너무 많은 패키지들과 툴들이 설치되어 있어 저는 새롭게 Dockerfile을 만들어서 진행하도록 하겠습니다.</p>

<h4 id="커스텀-액션-러너-이미지-만들기-및-설치">커스텀 액션 러너 이미지 만들기 및 설치</h4>

<h5 id="dockerfile">Dockerfile</h5>

<div class="language-Dockerfile highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Base Image</span>
<span class="k">FROM</span><span class="s"> ubuntu:22.04</span>

<span class="c"># 기본 패키지 설치 &amp; 그룹 및 유저 추가</span>
<span class="k">RUN </span>apt-get update <span class="nt">-y</span> <span class="o">&amp;&amp;</span> apt-get upgrade <span class="nt">-y</span> <span class="o">&amp;&amp;</span> useradd <span class="nt">-m</span> docker

<span class="c"># 패키지 설치</span>
<span class="k">RUN </span><span class="nv">DEBIAN_FRONTEND</span><span class="o">=</span>noninteractive apt-get <span class="nb">install</span> <span class="nt">-y</span> <span class="se">\
</span>    <span class="nt">--no-install-recommends</span> <span class="se">\
</span>    curl <span class="se">\
</span>    wget <span class="se">\
</span>    unzip <span class="se">\
</span>    jq <span class="se">\
</span>    build-essential <span class="se">\
</span>    libssl-dev <span class="se">\
</span>    libffi-dev <span class="se">\
</span>    ca-certificates <span class="se">\
</span>    git <span class="se">\
</span>    gnupg <span class="se">\
</span>    gpg <span class="se">\
</span>    locales <span class="se">\
</span>    tzdata

<span class="c"># Locale 설정</span>
<span class="k">RUN </span>locale-gen en_US.UTF-8
<span class="k">ENV</span><span class="s"> LC_ALL en_US.UTF-8</span>

<span class="c"># Timezone 설정</span>
<span class="k">ENV</span><span class="s"> TZ=Asia/Seoul</span>

<span class="c"># GitHub CLI 설치</span>
<span class="k">RUN </span>curl <span class="nt">-fsSL</span> https://cli.github.com/packages/githubcli-archive-keyring.gpg | gpg <span class="nt">--dearmor</span> <span class="nt">-o</span> /usr/share/keyrings/githubcli-archive-keyring.gpg<span class="p">;</span>
<span class="k">RUN </span><span class="nb">echo</span> <span class="s2">"deb [arch=</span><span class="si">$(</span>dpkg <span class="nt">--print-architecture</span><span class="si">)</span><span class="s2"> signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main"</span> | <span class="nb">tee</span> /etc/apt/sources.list.d/github-cli.list <span class="o">&gt;</span> /dev/null<span class="p">;</span>
<span class="k">RUN </span>apt-get <span class="nb">install</span> <span class="nt">-y</span> gh

<span class="c"># Gradle 설치</span>
<span class="k">ENV</span><span class="s"> GRADLE_VERSION=8.7</span>
<span class="k">ENV</span><span class="s"> GRADLE_HOME=/opt/gradle</span>
<span class="k">ENV</span><span class="s"> PATH=$PATH:$GRADLE_HOME/bin</span>
<span class="k">RUN </span>curl <span class="nt">-L</span> https://services.gradle.org/distributions/gradle-<span class="k">${</span><span class="nv">GRADLE_VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip <span class="nt">-o</span> gradle-<span class="k">${</span><span class="nv">GRADLE_VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip <span class="o">&amp;&amp;</span> <span class="se">\
</span>   unzip <span class="nt">-d</span> /opt gradle-<span class="k">${</span><span class="nv">GRADLE_VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip <span class="o">&amp;&amp;</span> <span class="se">\
</span>   <span class="nb">ln</span> <span class="nt">-s</span> /opt/gradle-<span class="k">${</span><span class="nv">GRADLE_VERSION</span><span class="k">}</span> /opt/gradle <span class="o">&amp;&amp;</span> <span class="se">\
</span>   <span class="nb">rm </span>gradle-<span class="k">${</span><span class="nv">GRADLE_VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip

<span class="c"># Maven 다운로드 및 설치</span>
<span class="k">ENV</span><span class="s"> MAVEN_VERSION=3.9.6</span>
<span class="k">ENV</span><span class="s"> MAVEN_HOME /opt/maven</span>
<span class="k">ENV</span><span class="s"> PATH $MAVEN_HOME/bin:$PATH</span>
<span class="k">RUN </span>wget <span class="nt">-q</span> <span class="nt">-O</span> /tmp/apache-maven.zip https://dlcdn.apache.org/maven/maven-3/<span class="k">${</span><span class="nv">MAVEN_VERSION</span><span class="k">}</span>/binaries/apache-maven-<span class="k">${</span><span class="nv">MAVEN_VERSION</span><span class="k">}</span><span class="nt">-bin</span>.zip <span class="o">&amp;&amp;</span> <span class="se">\
</span>   unzip <span class="nt">-q</span> /tmp/apache-maven.zip <span class="nt">-d</span> /opt <span class="o">&amp;&amp;</span> <span class="se">\
</span>   <span class="nb">ln</span> <span class="nt">-s</span> /opt/apache-maven-<span class="k">${</span><span class="nv">MAVEN_VERSION</span><span class="k">}</span> /opt/maven <span class="o">&amp;&amp;</span> <span class="se">\
</span>   <span class="nb">rm</span> <span class="nt">-f</span> /tmp/apache-maven.zip

<span class="c"># GitHub Actions Runner 다운로드 및 설치</span>
<span class="k">ENV</span><span class="s"> RUNNER_VERSION=2.315.0</span>
<span class="k">RUN </span><span class="nb">mkdir</span> <span class="nt">-p</span> /home/docker/actions-runner <span class="o">&amp;&amp;</span> <span class="nb">cd</span> /home/docker/actions-runner <span class="o">&amp;&amp;</span> <span class="se">\
</span>    curl <span class="nt">-O</span> <span class="nt">-L</span> https://github.com/actions/runner/releases/download/v<span class="k">${</span><span class="nv">RUNNER_VERSION</span><span class="k">}</span>/actions-runner-linux-x64-<span class="k">${</span><span class="nv">RUNNER_VERSION</span><span class="k">}</span>.tar.gz <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">tar </span>xzf /home/docker/actions-runner/actions-runner-linux-x64-<span class="k">${</span><span class="nv">RUNNER_VERSION</span><span class="k">}</span>.tar.gz <span class="o">&amp;&amp;</span> ./bin/installdependencies.sh <span class="o">&amp;&amp;</span> <span class="se">\
</span>    <span class="nb">rm</span> <span class="nt">-rf</span> /home/docker/actions-runner/actions-runner-linux-x64-<span class="k">${</span><span class="nv">RUNNER_VERSION</span><span class="k">}</span>.tar.gz

<span class="c"># docker 디렉토리 소유주 변경</span>
<span class="k">RUN </span><span class="nb">cd</span> /home <span class="o">&amp;&amp;</span> <span class="nb">chown</span> <span class="nt">-R</span> docker:docker docker

<span class="c"># copy over the entrypoint.sh script</span>
<span class="k">COPY</span><span class="s"> entrypoint.sh entrypoint.sh</span>

<span class="c"># make the script executable</span>
<span class="k">RUN </span><span class="nb">chmod</span> +x entrypoint.sh

<span class="c"># Set Host OS User</span>
<span class="k">USER</span><span class="s"> docker</span>

<span class="c"># set the entrypoint to the entrypoint.sh script</span>
<span class="k">ENTRYPOINT</span><span class="s"> ["./entrypoint.sh"]</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c">#!/bin/bash</span>

<span class="nv">GITHUB_HOST</span><span class="o">=</span><span class="nv">$GITHUB_HOST</span>                        <span class="c"># github.com / enterprise host</span>
<span class="nv">RUNNER_GROUP</span><span class="o">=</span><span class="nv">$RUNNER_GROUP</span>                      <span class="c"># ex) group-1</span>
<span class="nv">ORGANIZATION</span><span class="o">=</span><span class="nv">$ORGANIZATION</span>                      <span class="c"># ex) your organization</span>
<span class="nv">CONTAINER_NUM</span><span class="o">=</span><span class="nv">$CONTAINER_NUM</span>                    <span class="c"># ex) 1,2,3 ...</span>
<span class="nv">GITHUB_API_URI</span><span class="o">=</span><span class="nv">$GITHUB_API_URI</span>                  <span class="c"># ex) orgs, api/v3/orgs</span>
<span class="nv">GITHUB_API_HOST</span><span class="o">=</span><span class="nv">$GITHUB_API_HOST</span>                <span class="c"># ex) api.github.com</span>
<span class="nv">PERSONAL_ACCESS_TOKEN</span><span class="o">=</span><span class="nv">$PERSONAL_ACCESS_TOKEN</span>    <span class="c"># ex) ghp_xxx</span>
<span class="nv">GITHUB_API_URL</span><span class="o">=</span><span class="s2">"https://</span><span class="nv">$GITHUB_API_HOST</span><span class="s2">/</span><span class="nv">$GITHUB_API_URI</span><span class="s2">/</span><span class="nv">$ORGANIZATION</span><span class="s2">/actions/runners/registration-token"</span>

<span class="c"># Github CLI Login</span>
gh <span class="nt">--version</span>
<span class="nb">echo</span> <span class="nv">$PERSONAL_ACCESS_TOKEN</span> | gh auth login <span class="nt">--hostname</span> <span class="nv">$GITHUB_HOST</span> <span class="nt">--with-token</span>

<span class="c"># Getting registration token for action runner</span>
<span class="nv">RUNNER_REG_TOKEN</span><span class="o">=</span><span class="si">$(</span>curl <span class="nt">-sX</span> POST <span class="nt">-H</span> <span class="s2">"Accept: application/vnd.github+json"</span> <span class="nt">-H</span> <span class="s2">"Authorization: Bearer </span><span class="k">${</span><span class="nv">PERSONAL_ACCESS_TOKEN</span><span class="k">}</span><span class="s2">"</span> <span class="k">${</span><span class="nv">GITHUB_API_URL</span><span class="k">}</span> | jq .token <span class="nt">--raw-output</span><span class="si">)</span>

<span class="nb">echo</span> <span class="s2">"reg token := </span><span class="nv">$RUNNER_REG_TOKEN</span><span class="s2">"</span>

<span class="nb">cd</span> /home/docker/actions-runner

./config.sh <span class="se">\</span>
    <span class="nt">--replace</span> <span class="se">\</span>
    <span class="nt">--token</span> <span class="k">${</span><span class="nv">RUNNER_REG_TOKEN</span><span class="k">}</span> <span class="se">\</span>
    <span class="nt">--url</span> https://<span class="k">${</span><span class="nv">GITHUB_HOST</span><span class="k">}</span>/<span class="k">${</span><span class="nv">ORGANIZATION</span><span class="k">}</span> <span class="se">\</span>
    <span class="nt">--name</span> <span class="k">${</span><span class="nv">RUNNER_GROUP</span><span class="k">}</span><span class="nt">-runner-</span><span class="k">${</span><span class="nv">CONTAINER_NUM</span><span class="k">}</span> <span class="se">\</span>
    <span class="nt">--runnergroup</span> <span class="k">${</span><span class="nv">RUNNER_GROUP</span><span class="k">}</span> <span class="se">\</span>
    <span class="nt">--labels</span> ubuntu,<span class="k">${</span><span class="nv">RUNNER_GROUP</span><span class="k">}</span>

cleanup<span class="o">()</span> <span class="o">{</span>
    <span class="nb">echo</span> <span class="s2">"Removing runner..."</span>
    ./config.sh remove <span class="nt">--unattended</span> <span class="nt">--token</span> <span class="k">${</span><span class="nv">RUNNER_REG_TOKEN</span><span class="k">}</span>
<span class="o">}</span>

<span class="nb">trap</span> <span class="s1">'cleanup; exit 130'</span> INT
<span class="nb">trap</span> <span class="s1">'cleanup; exit 143'</span> TERM

./run.sh &amp; <span class="nb">wait</span> <span class="nv">$!</span>
</code></pre></div></div>

<p>위와 같은 내용으로 필요한 것만 설치하여 Dockerfile을 생성했습니다.</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># Dockerfile이 있는 위치로 이동 후</span>
<span class="c"># Dockerfile과 entrypoint.sh가 같은 디렉토리에 있어야 합니다.</span>
<span class="nv">$ </span>docker build <span class="nt">-t</span> &lt;your-docker-hub-name&gt;/github-actions-runner:1.0.0 <span class="nb">.</span>

<span class="c"># 빌드 완료 후, 이미지가 잘 만들어졌는지 확인.</span>
<span class="nv">$ </span>docker images
REPOSITORY                                                     TAG         IMAGE ID       CREATED         SIZE
&lt;your-docker-hub-name&gt;/github-actions-runner                                 1.0.0       71667fbff8f4   1 days ago     1.9GB
</code></pre></div></div>

<p>위와 같이 빌드를 실행해줍니다.</p>

<h5 id="docker-composeyml">docker-compose.yml</h5>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">3'</span>

<span class="na">services</span><span class="pi">:</span>
  <span class="na">build-runner1</span><span class="pi">:</span>
    <span class="na">image</span><span class="pi">:</span> <span class="s">&lt;your-docker-hub-name&gt;/github-actions-runner:1.0.0</span>
    <span class="na">restart</span><span class="pi">:</span> <span class="s">always</span>
    <span class="na">volumes</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">github-actions_runner-1:/home/docker/actions-runner</span>
    <span class="na">logging</span><span class="pi">:</span>
      <span class="na">driver</span><span class="pi">:</span> <span class="s1">'</span><span class="s">json-file'</span>
      <span class="na">options</span><span class="pi">:</span>
        <span class="na">max-size</span><span class="pi">:</span> <span class="s1">'</span><span class="s">20m'</span>
        <span class="na">max-file</span><span class="pi">:</span> <span class="s1">'</span><span class="s">10'</span>
    <span class="na">environment</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="s">TZ=Asia/Seoul</span>
      <span class="pi">-</span> <span class="s">GITHUB_HOST=&lt;Your-Github-Enterprise-Host&gt;</span>
      <span class="pi">-</span> <span class="s">RUNNER_GROUP=build</span>
      <span class="pi">-</span> <span class="s">ORGANIZATION=&lt;Your-Organization&gt;</span>
      <span class="pi">-</span> <span class="s">CONTAINER_NUM=1</span>
      <span class="pi">-</span> <span class="s">GITHUB_API_URI=api/v3/orgs</span>
      <span class="pi">-</span> <span class="s">GITHUB_API_HOST=&lt;Your-Github-Enterprise-Host&gt;</span>
      <span class="pi">-</span> <span class="s">PERSONAL_ACCESS_TOKEN=&lt;Your-PAT&gt;</span>

<span class="na">volumes</span><span class="pi">:</span>
  <span class="na">github-actions_runner-1</span><span class="pi">:</span>
</code></pre></div></div>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$ </span>docker compose up
<span class="c"># docker compose up -d 데몬으로 실행</span>
</code></pre></div></div>

<p>docker compose 파일을 위와 같이 생성한 뒤, compose 명령으로 해당 컨테이너를 띄워줍니다.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ docker compose up
WARNING: Some services (runner) use the 'deploy' key, which will be ignored. Compose does not support 'deploy' configuration - use `docker stack deploy` to deploy to a swarm.
Recreating github-action-runner_runner_1 ... done
Attaching to github-action-runner_runner_1
runner_1  | --------------------------------------------------------------------------------
runner_1  | |        ____ _ _   _   _       _          _        _   _                      |
runner_1  | |       / ___(_) |_| | | |_   _| |__      / \   ___| |_(_) ___  _ __  ___      |
runner_1  | |      | |  _| | __| |_| | | | | '_ \    / _ \ / __| __| |/ _ \| '_ \/ __|     |
runner_1  | |      | |_| | | |_|  _  | |_| | |_) |  / ___ \ (__| |_| | (_) | | | \__ \     |
runner_1  | |       \____|_|\__|_| |_|\__,_|_.__/  /_/   \_\___|\__|_|\___/|_| |_|___/     |
runner_1  | |                                                                              |
runner_1  | |                       Self-hosted runner registration                        |
runner_1  | |                                                                              |
runner_1  | --------------------------------------------------------------------------------
runner_1  | 
runner_1  | # Authentication
runner_1  | 
runner_1  | 
runner_1  | √ Connected to GitHub
runner_1  | 
runner_1  | # Runner Registration
runner_1  | 
runner_1  | 
runner_1  | 
runner_1  | 
runner_1  | √ Runner successfully added
runner_1  | √ Runner connection is good
runner_1  | 
runner_1  | # Runner settings
runner_1  | 
runner_1  | Enter name of work folder: [press Enter for _work] 
runner_1  | √ Settings Saved.
runner_1  | 
runner_1  | 
runner_1  | √ Connected to GitHub
runner_1  | 
runner_1  | Current runner version: '2.315.0'
runner_1  | 2024-03-23 Listening for Jobs
</code></pre></div></div>

<p>compose 명령어 실행 시, 위 처럼 떳다면 러너가 정상적으로 설치 및 연결되었다는 의미 입니다.</p>

<p><img src="/assets/images/gh-actions-runner-06.jpg" alt="gh-action-runner-06" /></p>

<p>위 사진과 같이 설정 &gt; Actions &gt; Runners 로 이동하여 러너의 연결 상태 등을 확인 할 수 있습니다.</p>

<h3 id="3-간단한-workflow-작성">3. 간단한 workflow 작성</h3>

<p>레파지토리 &gt; Actions 탭 &gt; New workflow로 이동하고, 1<code class="language-plaintext highlighter-rouge">setup a workflow yourself</code> 를 클릭하여 이동합니다.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Check Tools in Runner</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="c1"># 사용자가 워크플로우를 수동으로 실행할 수 있도록 설정</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">check-tools</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span>
      <span class="na">group</span><span class="pi">:</span> <span class="s">build</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="c1"># $GITHUB_WORKSPACE 밑의 레파지토리로 접근이 가능하도록 체크아웃</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v4</span>
      <span class="c1"># Java 설정</span>
      <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/setup-java@v4</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">distribution</span><span class="pi">:</span> <span class="s1">'</span><span class="s">temurin'</span>
          <span class="na">java-version</span><span class="pi">:</span> <span class="s1">'</span><span class="s">17'</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print java default version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">java --version</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print maven version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">mvn --version</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print gradle version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">gradle --version</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print git version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">git --version</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">print gh version</span>
        <span class="na">run</span><span class="pi">:</span> <span class="s">gh --version</span>
</code></pre></div></div>

<p>위 내용을 넣고, 다시 Actions 탭으로 이동하면 왼쪽 탭에 해당 <code class="language-plaintext highlighter-rouge">Check Tools in Runner</code> 라는 메뉴를 클릭합니다.</p>

<p>오른쪽에 Run workflow 를 이용하여 해당 workflow를 실행할 수 있습니다.</p>

<h2 id="맺음">맺음</h2>

<p>Github Actions Self-hosted Runner 를 설치해보고 해당 러너에서 workflow를 실행 시켜보는 예제를 소개해드렸습니다. 혹시 궁금한 점이 있으시면 댓글 부탁드리겠습니다.</p>
:ET
I"u,<p>저번 글에서 Travis CI를 이용하여, Github Pages 배포 자동화 하는 방법에 대해서 알아보았습니다. 이번 글에서는 Github Action을 활용한 배포 자동화에 대해서 소개해 드리도록 하겠습니다.</p>

<p>저번 글에도 동일하게 언급했지만, 왜 Github Pages에 배포 자동화가 필요한지 간략하게 짚고 넘어가도록 하겠습니다.</p>

<blockquote>
  <p>배포 자동화가 필요한 이유</p>
  <ol>
    <li>Github Pages는 화이트 리스트에 포함된 플러그인만 사용 가능하기 때문에 자동 빌드 및 배포 시에 플러그인이 적용이 되지 않는다.</li>
    <li>쉘 스크립트를 작성하여 배포하는 방식을 단순화할 수 있지만, 환경적인 요인이 있어 불편한 점이 있다.</li>
    <li>쉘 스크립트를 활용한 방식은 두 개의 브랜치를 관리 해주어야 한다.</li>
  </ol>
</blockquote>

<p>좀 더 자세하게 설명을 보고 싶다면 아래 링크를 통해서 확인하실 수 있습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="" target="_blank" rel="noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Travis CI로 Jekyll &amp; Github Pages 배포 자동화 하는 방법</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text"></span>
        </div>
      </div>
    </a>
</div>

<h2 id="github-action">Github Action</h2>

<p>Github Action은 github에서 지원하는 workfow 기능으로 일반적으로 Jenkins, Travis CI와 비슷한 툴이라고 생각하시면 될 것 같습니다. 따로 외부 툴을 연동하지 않아도 Github Action으로 손쉽게 배포 자동화를 구축할 수 있습니다.</p>

<h3 id="travis-ci-vs-github-action">Travis CI vs Github Action</h3>

<p>저번 글에서 Travis CI를 이용해서 배포 자동화를 하는 방법에 대해서 소개했습니다. VM 내의 gemfile 캐시가 잘 동작하지 않는 이슈가 있어서 배포 될 때마다 새로 gem 패키지들을 새로 다운받느라 시간이 오래걸렸습니다. 그러던 중 Github Action이라는 것을 활용할 수 있다는 글을 보고, 적용해보게 되었습니다.</p>

<p>배포시간을 보고, Github Action을 사용하길 잘했다는 생각이 들었는데요.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">travis-ci</span><span class="pi">:</span> <span class="s">4m 30s</span>
<span class="na">github-action</span><span class="pi">:</span> <span class="s">1m 30s</span>
</code></pre></div></div>

<p>배포 시간이 무려 3분이나 단축되는 효과를 얻었습니다.</p>

<p>자 그럼 바로 Github Action으로 Github Pages 배포 자동화하는 방법에 대해서 소개해드리도록 하겠습니다.</p>

<h3 id="github-action으로-github-pages-배포-자동화">Github Action으로 Github Pages 배포 자동화</h3>

<p>Github에서 아무런 초기 설정 없이 순서대로 Github Pages 배포하는 방법에 대해서 설명하도록 하겠습니다.</p>

<h4 id="personal-access-token-in-github">Personal Access Token in Github</h4>

<p><img src="/assets/images/github-token1.png" alt="github-token1" />
<img src="/assets/images/github-token2.png" alt="github-token2" /></p>

<p>오른쪽 상단의 계정 버튼을 눌러 Github  Settings &gt; Developer Settings로 들어갑니다.</p>

<p><img src="/assets/images/github-token3.png" alt="github-token3" /></p>

<p>이후 Personal Access Tonkens &gt; <strong>Generate new tokens</strong> 버튼을 눌러 새로운 토큰을 만들어야합니다.</p>

<p>물론 같은 Github라 할지라도 Action의 workflow가 외부 VM에서 동작하는 것이므로 <strong>Access Token</strong>이 필요합니다.</p>

<p><img src="/assets/images/github-token4-1.png" alt="github-token4-1" /></p>

<p>Note에서는 이 토큰이 어떤 용도로 사용될지 알아볼 수 있는 내용으로 넣어주시고, <code class="language-plaintext highlighter-rouge">repo</code>로 체크합니다.</p>

<p><img src="/assets/images/github-token5.png" alt="github-token5" /></p>

<p>다른 설정은 따로 해주실 필요없이 바로 생성해주시면 됩니다.</p>

<p><img src="/assets/images/github-token6.png" alt="github-token6" /></p>

<p>생성된 키는 재 조회가 불가능하기 때문에 잘 복사해두셔야 합니다.</p>

<p><img src="/assets/images/github-token7.png" alt="github-token7" /></p>

<p>그리고 repository &gt; settings &gt; Secrets &gt; <code class="language-plaintext highlighter-rouge">new secret</code> 버튼을 눌러 새로운 secret을 생성해줍니다.</p>

<p><img src="/assets/images/github-token8.png" alt="github-token8" /></p>

<p>이후, personal access token을 <strong>JEKYLL_PAT</strong>이라는 이름으로 등록 해줍니다.</p>

<h4 id="github-action-등록">Github Action 등록</h4>

<p><img src="/assets/images/github-action1.png" alt="github-action1" /></p>

<p>위 그림에서 빨간색 박스에 있는 <code class="language-plaintext highlighter-rouge">Actions</code>를 클릭합니다.</p>

<p><img src="/assets/images/github-action2.png" alt="github-action2" /></p>

<p>제 저장소가 Jekyll 코드가 있어서 그런지는 모르겠지만, 추천에 Jekyll관련된 Action이 노출되어 있습니다. 이 것을 클릭합니다.</p>

<p><img src="/assets/images/github-action3.png" alt="github-action3" /></p>

<p>이후 위 그림의 다음 코드를 넣어주시고, <code class="language-plaintext highlighter-rouge">start commit</code> 버튼을 클릭합니다. 그러면 프로젝트 내에 <code class="language-plaintext highlighter-rouge">.github/workflows/jekyll.yml</code> 파일이 생성됩니다.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Jekyll CI</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="s">push</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">jekyll</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-16.04</span>
    <span class="na">steps</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

    <span class="c1"># Use GitHub Actions' cache to shorten build times and decrease load on servers</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/cache@v1</span>
      <span class="na">with</span><span class="pi">:</span>
        <span class="na">path</span><span class="pi">:</span> <span class="s">vendor/bundle</span>
        <span class="na">key</span><span class="pi">:</span> <span class="s">${{ runner.os }}-gems-${{ hashFiles('**/Gemfile.lock') }}</span>
        <span class="na">restore-keys</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">${{ runner.os }}-gems-</span>

    <span class="c1"># Standard usage</span>
    <span class="pi">-</span> <span class="na">uses</span><span class="pi">:</span>  <span class="s">helaili/jekyll-action@2.0.3</span>
      <span class="na">env</span><span class="pi">:</span>
        <span class="na">JEKYLL_PAT</span><span class="pi">:</span> <span class="s">${{ secrets.JEKYLL_PAT }}</span>
</code></pre></div></div>

<div class="related-link-wrap">
    <a class="related-link" href="https://github.com/helaili/jekyll-action" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">helaili/jekyll-action: A GitHub Action to publish Jekyll based content as a GitHub Pages site</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">github.com</span>
        </div>
      </div>
    </a>
</div>

<p><img src="/assets/images/github-action4.png" alt="github-action4" /></p>

<p>이후 다시 <code class="language-plaintext highlighter-rouge">Actions</code>에 접근하시면 위와 같은 형태로 표시됩니다. 해당 작업들을 클릭하면 상세 내역을 볼 수 있습니다.</p>

<p>처음 작업은 기본 작업의 경우, 기본 템플릿으로 했더니 실패했고, 위에 작성되어있는 코드를 이용하니 정상작동 하였습니다.</p>

<p>그리고 또 한 가지는 첫 번째와 두 번째 시간차이가 약 <code class="language-plaintext highlighter-rouge">1분 30초</code> 정도가 있는데, 이 것이 바로 캐시의 효과입니다.</p>

<p><img src="/assets/images/github-action5.png" alt="github-action5" /></p>

<p>작업이 어떻게 진행되었는지는 <code class="language-plaintext highlighter-rouge">This run</code> 탭에 표시가 되고, 어떤 workflow file을 통해 실행이 되었는지 확인하는 탭은 <code class="language-plaintext highlighter-rouge">Workflow file</code>입니다.</p>

<p><img src="/assets/images/github-action6.png" alt="github-action6" /></p>

<p>또한 이런식으로 작업의 상세 내역과 걸린 시간 등을 보실 수 있습니다.</p>

<h2 id="맺음">맺음</h2>

<p>이렇게 간단하게 Github Action을 이용하여 Github Pages 배포 자동화 하는 방법에 대해서 알아보았습니다.
궁금하신 점이나 이상한점 있으면 댓글 부탁드리겠습니다.</p>

<p>감사합니다.</p>
:ET
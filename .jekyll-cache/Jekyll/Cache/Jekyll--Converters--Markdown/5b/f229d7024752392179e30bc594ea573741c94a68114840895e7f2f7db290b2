I"L^<p>이 번 글에서는 Spring AI에 대해서 알아보는 시간을 가져보겠습니다.
이 글이 최초 작성된 날짜는 2024년 6월 입니다, 따라서 현재 기준으로 Spring AI 최신 버전은 <code class="language-plaintext highlighter-rouge">1.0.0-SNAPSHOT</code>으로 다른 버전과 호화되는 않을 수 있습니다.</p>

<h2 id="spring-ai-란">Spring AI 란?</h2>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Spring AI :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Spring AI 프로젝트는 AI 기능을 포함하는 애플리케이션 개발을 불필요한 복잡성 없이 간소화하는 것을 목표로 합니다.
</code></pre></div></div>

<p>스프링 공식 문서에 따르면, 다양한 구현을 유연하게 개발할 수 있도록 설계되었으며, 최소한의 코드 변경으로 쉽게 변경할 수 있는 추상화를 제공하는 하나의 독립적인 프로젝트로 출시된 것으로 보입니다.</p>

<p>이렇게 독립적인 프로젝트로 출시되면서 개발자들이 얻는 이점은 더 이상 외부 LLM API와 HTTP 연결 하는 로직을 직접 구현하지 않아도 된다는 점이 가장 큰 장점이라고 생각합니다.</p>

<h2 id="spring-ai-적용해보기">Spring AI 적용해보기</h2>

<div class="related-link-wrap">
    <a class="related-link" href="https://www.youtube.com/watch?v=XUz4LKZx83g" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Spring I/O 2024 Keynote - YouTube</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">www.youtube.com</span>
        </div>
      </div>
    </a>
</div>

<p>저는 Youtube 동영상을 참고해서 프로젝트를 만들어보도록 하겠습니다.</p>

<h3 id="1-gradle-프로젝트-생성">1. Gradle 프로젝트 생성</h3>

<blockquote>
  <p>프로젝트 생성 정보</p>
  <ul>
    <li>Gradle 8.x</li>
    <li>SpringBoot: 3.3.1</li>
    <li>Language: Java</li>
    <li>JDK: 21, GraalVM</li>
    <li>Dependencies: Spring Web, OpenAI, Spring Data JDBC, PGvector Vector Database, GraalVM Native Support</li>
  </ul>
</blockquote>

<p>저는 Visual Studio를 이용해서 프로젝트를 생성해보도록 하겠습니다. VS코드 Spring Initializr Extension을 통해서 위와 같이 생성을 진행했습니다.</p>

<h3 id="2-chatgpt-api-설정-및-key-발급-받기">2. ChatGPT API 설정 및 Key 발급 받기</h3>

<p>Spring AI 프로젝트에 연결할 ChatGPT의 API를 설정하여 진행하도록 하겠습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://platform.openai.com/apps" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">OpenAI Platform</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">platform.openai.com</span>
        </div>
      </div>
    </a>
</div>

<p><img src="/assets/images/spring-ai-00_1.png" alt="spring ai 00 1" /></p>

<p>위 링크로 이동하여 위 그림과 같이 오른쪽 API를 선택해줍니다.</p>

<p><img src="/assets/images/spring-ai-00_3.png" alt="spring ai 00 3" /></p>

<p>오른쪽 상단의 톱니바퀴 모양 &gt; Project &gt; Create project 순서로 선택하여 프로젝트를 생성해줍니다.</p>

<p><img src="/assets/images/spring-ai-00_5.png" alt="spring ai 00 5" /></p>

<p>왼쪽 상단의 Your profile을 선택 후, 위와 같이 API Key를 생성하기 위해 인증을 진행해줍니다.</p>

<p><img src="/assets/images/spring-ai-00_6.png" alt="spring ai 00 3" /></p>

<p>성공적으로 인증을 하면 위와 같이 API Key를 발급 받을 수 있습니다.</p>

<h3 id="3-프로젝트에-api-key-등록">3. 프로젝트에 API Key 등록</h3>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">application.name</span><span class="pi">:</span> <span class="s">private-ai</span>
  <span class="c1"># database</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:postgresql://localhost/mydatabase</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">myuser</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">secret</span>
  <span class="na">sql.init.mode</span><span class="pi">:</span> <span class="s">always</span>
  <span class="c1"># ai settings</span>
  <span class="na">ai.openai</span><span class="pi">:</span>
    <span class="na">api-key</span><span class="pi">:</span> <span class="s">&lt;Your-API-KEY&gt;</span>
    <span class="na">chat</span><span class="pi">:</span>
      <span class="na">options</span><span class="pi">:</span>
        <span class="na">model</span><span class="pi">:</span> <span class="s">gpt-4o</span>
  <span class="c1"># virual thread</span>
  <span class="na">threads.virtual.enabled</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">application.yml</code>파일에 위와 같은 내용을 작성했습니다.</p>

<h3 id="4-chatgpt에게-질문하기">4. ChatGPT에게 질문하기</h3>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">package com.sushistack.spring.private_ai;
</span>
import org.springframework.ai.chat.client.ChatClient;
<span class="p">import org.springframework.boot.ApplicationArguments;
import org.springframework.boot.ApplicationRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
</span>
@SpringBootApplication
<span class="p">public class PrivateAiApplication {
</span>
	public static void main(String[] args) {
		SpringApplication.run(PrivateAiApplication.class, args);
	}

+	@Bean
<span class="gi">+   ChatClient chatClient (ChatClient.Builder builder) {
+		return builder.build();
+	}
+
+	@Bean
+	ApplicationRunner applicationRunner (ChatClient ai) {
+		return new ApplicationRunner () {
+			@Override
+			public void run (ApplicationArguments args) throws Exception {
+
+				var query = """
+						안녕?
+						""";
+
+				ChatClient.ChatClientRequest req = ai.prompt().user(query);
+				String content = req.call().content();
+				System.out.println(content);
+			}
+		};
+	}
</span>
}

</code></pre></div></div>

<p>위 처럼 ChantClient와 ChatClient를 이용하여 ChatGPT에게 쿼리를 요청하는 ApplicationRunner를 Bean으로 각각 등록해줍니다.</p>

<p><img src="/assets/images/springai-01.png" alt="spring ai 01" /></p>

<p>그리고 프로젝트를 실행하면 위 처럼 간단한 코드로 ChatGPT와 채팅할 수 있는 앱을 만들었습니다.</p>

<h2 id="spring-ai-apis">Spring AI APIs</h2>

<p>Spring AI는 다양한 기능들을 포함하고 있습니다. Spring AI API의 주요 기능들을 하나씩 알아보도록 하겠습니다.</p>

<h3 id="ai-model-api">AI Model API</h3>

<p><img src="/assets/images/springai-02.jpg" alt="spring ai 02" /></p>

<p>모델(Model) API는 위 처럼 Chat, TTS(Text to Seepch), TTI(Text to Image), Audio Transcription, embedding 등을 제공하고 있습니다. 뿐만 아니라 비동기와 스트리밍 API 옵션도 지원합니다.</p>

<p><img src="/assets/images/springai-03.jpg" alt="spring ai 03" /></p>

<p>위와 같이 이미 너무나 유명한 AI 모델들(OpenAI, Bedrock, Gemini 등)은 이미 구현이 되어 있습니다.</p>

<h4 id="chat-model-구성도">Chat Model 구성도</h4>

<p><img src="/assets/images/springai-04.jpg" alt="spring ai 04" /></p>

<h5 id="prompt">Prompt</h5>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Prompt</span> <span class="kd">implements</span> <span class="nc">ModelRequest</span><span class="o">&lt;</span><span class="nc">List</span><span class="o">&lt;</span><span class="nc">Message</span><span class="o">&gt;&gt;</span> <span class="o">{</span>

	<span class="kd">private</span> <span class="kd">final</span> <span class="nc">List</span><span class="o">&lt;</span><span class="nc">Message</span><span class="o">&gt;</span> <span class="n">messages</span><span class="o">;</span>

	<span class="kd">private</span> <span class="nc">ChatOptions</span> <span class="n">modelOptions</span><span class="o">;</span>

  <span class="c1">// ... 생략</span>
<span class="o">}</span>
</code></pre></div></div>

<p>프롬프트는 AI 모델이 특정 출력을 유도하도록 해주는 부분입니다. RunTime에 Chat에 대한 옵션을 설정할 수 있고, 입력 값(Messages)들은 ChatModel의 전달됩니다.</p>

<h4 id="chatmodel--streamingchatmodel">ChatModel (+ StreamingChatModel)</h4>

<p>Prompt로 부터 전달 받은 옵션과 데이터를 각 외부 LLM 모델 API를에 요청하는 역할을 합니다.</p>

<h4 id="chatresponse">ChatResponse</h4>

<p>채팅 응답에 대한 메타데이터와 LLM 모델의 출력 값을 가지는 응답 객체입니다.</p>

<h4 id="refs">Refs.</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/chatmodel.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Chat Model API :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/embeddings.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Embeddings Model API :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/imageclient.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Image Model API :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/audio/transcriptions.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Transcription API :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/audio/speech.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Text-To-Speech (TTS) API :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<h3 id="vector-store-api">Vector Store API</h3>

<p>벡터 저장소(Vector Store)는 벡터 검색을 위해서 사용하게 됩니다. 예를 들어 다음과 같은 과정으로 벡터 저장소가 사용될 수 있습니다.</p>

<blockquote>
  <p>벡터의 사용</p>
  <ol>
    <li>임배딩 생성: 텍스트, 이미지, 오디오 등을 AI 모델(GPT 등)을 통해 벡터를 생성합니다.</li>
    <li>벡터 저장소에 저장: 생성된 벡터를 저장합니다.</li>
    <li>새로운 검색: 새로운 입력 데이터가 들어오면 이를 벡터로 변환하고, 벡터 저장소에서 유사한 벡터를 검색합니다.</li>
    <li>AI 모델에 전달: 검색된 벡터와 관련된 데이터를 AI 모델에 전달하여 적절한 응답을 생성하거나 추가 분석을 수행합니다.</li>
  </ol>
</blockquote>

<h4 id="refs-1">Refs.</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://docs.spring.io/spring-ai/reference/api/vectordbs.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" id="Layer_1" viewBox="0 0 767.8 768" width="2499" height="2500" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><style>.st0{fill:#8a4baf}</style><path class="st0" d="M698.3 40c-10.8 25.8-24.5 50.3-41 72.8C585.1 40.6 487.1 0 385 0 173.8 0 0 174 0 385.5 0 491 43.2 592 119.6 664.8l14.2 12.6c69.4 58.5 157.3 90.7 248 90.7 200.8 0 369.6-157.4 383.9-358 10.5-98.2-18.3-222.4-67.4-370.1zm-524 627c-6.2 7.7-15.7 12.2-25.6 12.2-18.1 0-32.9-14.9-32.9-33s14.9-33 32.9-33c7.5 0 14.9 2.6 20.7 7.4 14.1 11.4 16.3 32.3 4.9 46.4zm522.4-115.4c-95 126.7-297.9 84-428 90.1 0 0-23.1 1.4-46.3 5.2 0 0 8.7-3.7 20-8 91.3-31.8 134.5-38 190-66.5 104.5-53.2 207.8-169.6 229.3-290.7C621.9 398.2 501.3 498.3 391.4 539c-75.3 27.8-211.3 54.8-211.3 54.8l-5.5-2.9C82 545.8 79.2 345.1 247.5 280.3c73.7-28.4 144.2-12.8 223.8-31.8 85-20.2 183.3-84 223.3-167.2 44.8 133.1 98.7 341.5 2.1 470.3z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Vector Databases :: Spring AI Reference</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">docs.spring.io</span>
        </div>
      </div>
    </a>
</div>

<h3 id="function-calling-api">Function Calling API</h3>

<p><img src="/assets/images/springai-05.jpg" alt="spring ai 05" /></p>

<p>위 처럼 Spring AI는 함수형을 지원하기 때문에, 개발자가 함수를 통해 내부를 건드리지 않고 로직을 실행 시킬 수 있습니다.</p>

<h3 id="etl-data-engineering">ETL Data Engineering</h3>

<p><img src="/assets/images/springai-06.jpg" alt="spring ai 06" /></p>

<p>데이터 엔지니어링을 위한 ETL 프레임워크는 다양한 외부 벡터 데이터를 벡터 데이터베이스에 로드할 수 있도록 해줍니다. 이를 통해서 AI 모델에 더 많고 벡터 데이터 전달할 수 있습니다.</p>

<h2 id="맺음">맺음</h2>

<p>Spring I/O 2024에 참여해서 직접 참여했던 세션인데요, 좋은 경험이었던 것 같습니다. 아래는 Spring AI 세션 Youtube 링크입니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://www.youtube.com/watch?v=umKbaXsiCOY" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Introducing Spring AI by Christian Tzolov / Mark Pollack @ Spring I/O 2024 - YouTube</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">www.youtube.com</span>
        </div>
      </div>
    </a>
</div>

<p>감사합니다.</p>
:ET
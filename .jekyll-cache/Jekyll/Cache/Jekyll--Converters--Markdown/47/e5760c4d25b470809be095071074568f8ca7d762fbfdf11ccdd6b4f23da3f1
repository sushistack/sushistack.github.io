I"*<p>스프링을 환경에서 개발하는 개발자들이라면 <code class="language-plaintext highlighter-rouge">application.properties</code> 또는 <code class="language-plaintext highlighter-rouge">application.yml</code> 설정파일을 아주 유용하게 사용하시고 계실 것입니다.</p>

<p>이런 설정파일을 사용하는 가장 큰 이유는 파라미터 설정만으로 서비스 환경을 구분하여 빌드하거나 서비스를 실행시킬 수 있기 때문입니다.</p>

<p>사용하기는 편리하지만, 보안적인 측면에서 봤을 때는 상당히 취약할 수가 있습니다. 그래서 이 글에서는 보안적으로 어떻게 취약하고, 이를 암호화할 수 있는 라이브러리를 소개해드리도록 하겠습니다.</p>

<h2 id="스프링-부트-설정파일properties-yml-암호화">스프링 부트 설정파일(properties, yml) 암호화</h2>

<p>누군가 서비스의 Jar 파일를 탈취하는데 성공했다면 디컴파일러를 이용하여 Jar 내부에 있는 설정파일을 얻어 낼 수 있습니다.</p>

<p>제가 생각하는 탈취된 설정파일에서 가장 취약한 정보는 아무래도 DB 접속 정보라고 생각합니다.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">com.mysql.cj.jdbc.Driver</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">jdbc:mysql://localhost:3306/test</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">root</span>
    <span class="na">password</span><span class="pi">:</span> <span class="m">1234</span>
</code></pre></div></div>

<p>위와 같이 설정파일에 접속과 관련된 정보들이 그대로 드러나기 때문에 만약 누군가 DB에 접근하여 DB 있는 정보들을 가져가거나 데이터를 조작할 수도 있습니다.</p>

<h3 id="jasypt">Jasypt</h3>

<p>설정파일의 보안을 위한 스프링 부트 자체 암호화 라이브러리는 없습니다. 따라서 <strong>Jasypt</strong> 라는 라이브러리를 이용하여 설정파일을 암호화 하는 방법에 대해서 소개하는 시간을 가져보겠습니다.</p>

<h4 id="의존성-추가">의존성 추가</h4>

<div class="language-gradle highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">dependencies</span> <span class="o">{</span>
  <span class="n">implementation</span><span class="o">(</span><span class="s2">"com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3"</span><span class="o">)</span>
  <span class="n">implementation</span><span class="o">(</span><span class="s2">"org.bouncycastle:bcprov-jdk15on:1.64"</span><span class="o">)</span>
<span class="o">}</span>
</code></pre></div></div>

<p>위 처럼 두 가지 의존성을 추가해줍니다.</p>

<blockquote>
  <p>라이브러리</p>
  <ul>
    <li>jasypt-spring-boot-starter: 설정파일 암호화</li>
    <li>bcprov-jdk15on: 암호 알고리즘 추가</li>
  </ul>
</blockquote>

<h4 id="설정">설정</h4>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">jasypt</span><span class="pi">:</span>
  <span class="na">encryptor</span><span class="pi">:</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">password</span> <span class="c1"># 암호화에 사용할 Passowrd 설정</span>
    <span class="na">bean</span><span class="pi">:</span> <span class="s">jasyptStringEncryptor</span> <span class="c1"># Bean 이름</span>
</code></pre></div></div>

<p>위 처럼 설정파일에 jasypt 관련한 설정을 해줍니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@Configuration</span>
<span class="kd">class</span> <span class="nc">JasyptConfig</span> <span class="p">{</span>

    <span class="nd">@Value</span><span class="p">(</span><span class="s">"\${jasypt.encryptor.password}"</span><span class="p">)</span>
    <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">password</span><span class="p">:</span> <span class="nc">String</span>

    <span class="nd">@Bean</span><span class="p">(</span><span class="s">"jasyptStringEncryptor"</span><span class="p">)</span>
    <span class="k">fun</span> <span class="nf">stringEncryptor</span><span class="p">()</span> <span class="p">=</span>
        <span class="nc">PooledPBEStringEncryptor</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">also</span> <span class="p">{</span>
                <span class="n">it</span><span class="p">.</span><span class="nf">setConfig</span><span class="p">(</span>
                    <span class="nc">SimpleStringPBEConfig</span><span class="p">().</span><span class="nf">also</span> <span class="p">{</span> <span class="n">conf</span> <span class="p">-&gt;</span>
                        <span class="n">conf</span><span class="p">.</span><span class="n">poolSize</span> <span class="p">=</span> <span class="mi">1</span>
                        <span class="n">conf</span><span class="p">.</span><span class="n">password</span> <span class="p">=</span> <span class="n">password</span>
                        <span class="n">conf</span><span class="p">.</span><span class="n">stringOutputType</span> <span class="p">=</span> <span class="s">"base64"</span>
                        <span class="n">conf</span><span class="p">.</span><span class="n">keyObtentionIterations</span> <span class="p">=</span> <span class="mi">1000</span>
                        <span class="n">conf</span><span class="p">.</span><span class="n">provider</span> <span class="p">=</span> <span class="nc">BouncyCastleProvider</span><span class="p">()</span>
                        <span class="n">conf</span><span class="p">.</span><span class="n">algorithm</span> <span class="p">=</span> <span class="s">"PBEWithSHA256And128BitAES-CBC-BC"</span>
                        <span class="n">conf</span><span class="p">.</span><span class="nf">setSaltGeneratorClassName</span><span class="p">(</span><span class="s">"org.jasypt.salt.RandomSaltGenerator"</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">)</span>
            <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>저 같은 경우, 개발 언어로 코틀린을 사용하였기 때문에 위처럼 설정을 해주었습니다. 설정은 서비스에 따라 다르게 적용하시면 될 것 같습니다.</p>

<p>여기서 <code class="language-plaintext highlighter-rouge">jasypt.encryptor.password</code> 값이 암호화되지 않아서 설정파일이 탈취되면 노출의 위험이 있습니다.</p>

<p>하지만 서비스를 시작할 때 파라미터로 <code class="language-plaintext highlighter-rouge">-Djasypt.encryptor.password=example</code> 같은 형태로 주시면 노출 없이 실행 가능합니다.</p>

<h4 id="암호화">암호화</h4>

<p>설정파일에 암호화하는 방법을 알아보겠습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nd">@ExtendWith</span><span class="p">(</span><span class="nc">SpringExtension</span><span class="o">::</span><span class="k">class</span><span class="p">)</span>
<span class="nd">@SpringBootTest</span><span class="p">(</span><span class="n">classes</span> <span class="p">=</span> <span class="p">[</span><span class="nc">ApiApplication</span><span class="o">::</span><span class="k">class</span><span class="p">])</span>
<span class="nd">@PropertySource</span><span class="p">(</span><span class="n">value</span> <span class="p">=</span> <span class="p">[</span><span class="s">"application.yml"</span><span class="p">])</span>
<span class="kd">class</span> <span class="nc">JasyptConfigTest</span> <span class="p">{</span>

    <span class="nd">@Autowired</span>
    <span class="nd">@Qualifier</span><span class="p">(</span><span class="s">"jasyptStringEncryptor"</span><span class="p">)</span>
    <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">stringEncrytor</span><span class="p">:</span> <span class="nc">StringEncryptor</span>

    <span class="nd">@Log</span>
    <span class="k">private</span> <span class="k">lateinit</span> <span class="kd">var</span> <span class="py">logger</span><span class="p">:</span> <span class="nc">Logger</span>

    <span class="nd">@Test</span>
    <span class="k">fun</span> <span class="nf">encrypt</span><span class="p">()</span> <span class="p">{</span>
      <span class="nf">assertThat</span><span class="p">(</span><span class="n">stringEncrytor</span><span class="p">).</span><span class="n">isNotNull</span>
      <span class="kd">val</span> <span class="py">text</span> <span class="p">=</span> <span class="s">"some text"</span>
      <span class="n">logger</span><span class="p">.</span><span class="nf">info</span><span class="p">(</span><span class="s">"ENC(${stringEncrytor.encrypt(text)})"</span><span class="p">)</span>
    <span class="p">}</span>
</code></pre></div></div>

<p>위와 같이 테스트를 만들어서 암호화하고 싶은 텍스트를 작성하여 암호화된 텍스트를 얻어냅니다.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">spring</span><span class="pi">:</span>
  <span class="na">datasource</span><span class="pi">:</span>
    <span class="na">driver-class-name</span><span class="pi">:</span> <span class="s">com.mysql.cj.jdbc.Driver</span>
    <span class="na">url</span><span class="pi">:</span> <span class="s">ENC(QHuRBWDOi8Uk7Q7NRgHrIDlhhfhfwRiOT00wy3xJLl463Q+r4vqJc2TTkuMVt19DWR44=)</span>
    <span class="na">username</span><span class="pi">:</span> <span class="s">ENC(OPGoF02MSB8+1Aks4GSuRg==)</span>
    <span class="na">password</span><span class="pi">:</span> <span class="s">ENC(RKqGd35KO1Cc5RxSiM1GoSG1PvcOeSiw)</span>
</code></pre></div></div>

<p>테스트를 통해 얻어낸 암호화된 텍스트를 위처럼 <code class="language-plaintext highlighter-rouge">ENC(암호화된 텍스트)</code>형태로 채워주시면 됩니다.</p>

<h2 id="맺음">맺음</h2>

<p>라이브러리를 이용하여 간단하게 설정파일을 암호화하는 방법에 대해서 알아보았습니다. 혹시 궁금하신 점이나 이상한 점이 있으면 댓글 부탁드리겠습니다.</p>

<p>감사합니다.</p>
:ET
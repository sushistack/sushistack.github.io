I"`R<p>자바스크립트를 사용하는 용도는 정말 다양합니다. 대표적인 예시로 사용자의 액션에 대한 이벤트를 처리하거나 비동기 통신 등이 있습니다.</p>

<p>위와 같은 기능들을 만들다보면 이벤트 처리나 비동기 통신을 통해 얻은 데이터를 <strong>일정 시간</strong>이 지난 후에 처리해야하는 요구사항들이 생기는 경우가 있습니다.</p>

<p>이번 글에서는 자바스크립트를 통해 시간을 제어할 수 있는 <strong>타이머 함수</strong>들에 대해서 소개드리도록 하겠습니다.</p>

<h2 id="타이머-함수란">타이머 함수란?</h2>

<p>자바스크립트에서 다루는 타이머 함수는 일정 시간이 지난 후 특정 코드 또는 함수가 실행될 수 있도록 해주는 함수와 일정 시간마다 함수가 실행될 수 있도록 해주는 함수를 말합니다.</p>

<blockquote>
  <p>타이머 함수</p>
  <ul>
    <li>setTimeout &amp; clearTimeout</li>
    <li>setInterval &amp; clearInterval</li>
  </ul>
</blockquote>

<p>일반적으로 사용하는 타이머 함수는 위의 두 종류입니다.</p>

<h3 id="settimeout">setTimeout</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">setTimeout</span><span class="p">(</span><span class="nx">함수</span><span class="o">/</span><span class="nx">코드</span><span class="p">[,</span> <span class="nx">지연시간</span><span class="p">,</span> <span class="nx">파라미터1</span><span class="p">,</span> <span class="nx">파라미터2</span><span class="p">,</span> <span class="p">...])</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">setTimeout</code>은 파라미터로 함수를 받고와 지연시간 그리고 추가적인 파라미터가 주어질 수 있습니다.</p>

<h4 id="함수">함수</h4>

<p>개발자가 작성한 함수로 <code class="language-plaintext highlighter-rouge">setimeout</code>에 지정한 지연시간이 만료된 이후에 실행됩니다.</p>

<h4 id="코드">코드</h4>

<p>setimeout의 첫 번째 파라미터로 함수 대신에 문자열이 들어갈 수 있습니다. 이 또한 시간이 만료되면 코드를 분석하여 실행하게 됩니다.</p>

<div class="hint-container danger">
  <div class="hint-type danger">
    <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor"><g><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path><line x1="12" y1="9" x2="12" y2="13"></line><line x1="12" y1="17" x2="12" y2="17"></line></g></svg>
  </div>
  <div class="hint-body-container">
    <div class="hint-body">
      
        <span class="hint-body-text">이 구문은 eval()를 사용하는 것과 마찬가지로 보안적으로 위험하기 때문에 사용 권장되지 않습니다.</span>
      
    </div>
  </div>
</div>

<h4 id="지연시간">지연시간</h4>

<p>ms 단위의 <strong>지연될 시간</strong>을 의미하고, 만약 이 파라미터를 생략하면 지연시간을 넣지 않으면 0ms의 후에 지정된 함수 또는 코드가 실행됩니다.</p>

<h4 id="파라미터n">파라미터N</h4>

<p>setTimeout에 지정된 함수로 전달되는 파라미터들입니다.</p>

<h4 id="반환-값">반환 값</h4>

<p>setTimeout 함수를 통해서 나오는 반환 값은 <strong>타이머의 ID</strong>입니다. 이 ID값과 하단에서 소개드릴 clearTimeout을 통해서 타이머를 취소할 수 있습니다.</p>

<h4 id="settimeout-예제">setTimeout 예제</h4>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">changeBackgroundColor</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">background</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span>
<span class="p">}</span>

<span class="c1">// 5초 후에 changeBackgroundColor 함수를 실행</span>
<span class="kd">var</span> <span class="nx">timeoutId</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">changeBackgroundColor</span><span class="p">,</span> <span class="mi">5000</span><span class="p">)</span>
</code></pre></div></div>

<p>위와 같은 코드로 작성을 하게되면, 페이지가 로드되면서 setTimeout 함수가 실행되는 시점으로부터 5초 후 <code class="language-plaintext highlighter-rouge">changeBackgroundColor</code> 함수가 실행되어 body 엘리먼트의 배경색이 빨간색으로 변경됩니다.</p>

<h3 id="cleartimeout">clearTimeout</h3>

<p>clearTimeout 함수는 setTimeout 함수가 시작하면서 반환한 <code class="language-plaintext highlighter-rouge">timeoutId</code>를 이용하여 예약된 타이머를 취소할 수 있는 기능을 가지고 있습니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">changeBackgroundColor</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">background</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">red</span><span class="dl">'</span>
<span class="p">}</span>

<span class="c1">// 5초 후에 changeBackgroundColor 함수를 실행</span>
<span class="kd">var</span> <span class="nx">timeoutId</span> <span class="o">=</span> <span class="nx">setTimeout</span><span class="p">(</span><span class="nx">changeBackgroundColor</span><span class="p">,</span> <span class="mi">5000</span><span class="p">)</span>

<span class="c1">// 시작된 타이머를 취소</span>
<span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">timeoutId</span><span class="p">);</span>
</code></pre></div></div>

<p>위 코드 처럼 구현할 경우, 타이머가 취소되기 때문에 배경색이 빨간색으로 변경되지 않습니다.</p>

<h3 id="setinterval">setInterval</h3>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">setInterval</span><span class="p">(</span><span class="nx">함수</span><span class="o">/</span><span class="nx">코드</span><span class="p">[,</span> <span class="nx">지연시간</span><span class="p">,</span> <span class="nx">파라미터1</span><span class="p">,</span> <span class="nx">파라미터2</span><span class="p">,</span> <span class="p">...])</span>
</code></pre></div></div>

<p><strong>setInterval</strong>은 setTimeout과는 다르게 주어진 지연시간마다 계속해서 지정한 함수를 수행합니다.</p>

<div class="hint-container info">
  <div class="hint-type info">
    <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke="none" class="icon-7f6730be--text-3f89f380"><g><path d="M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11" fill-rule="evenodd"></path></g></svg>
  </div>
  <div class="hint-body-container">
    <div class="hint-body">
      
        <span class="hint-body-text">setInterval에 사용되는 파라미터들은 setTimeout과 동일하기 때문에 생략하도록 하겠습니다.</span>
      
    </div>
  </div>
</div>

<h3 id="clearinterval">clearInterval</h3>

<p>clearInterval은 setInterval 함수의 반환값이 <code class="language-plaintext highlighter-rouge">intervalId</code>를 이용하여 해당 타이머를 취소 또는 종료할 수 있는 함수입니다.</p>

<div class="hint-container info">
  <div class="hint-type info">
    <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" stroke="none" class="icon-7f6730be--text-3f89f380"><g><path d="M12.2 8.98c.06-.01.12-.03.18-.06.06-.02.12-.05.18-.09l.15-.12c.18-.19.29-.45.29-.71 0-.06-.01-.13-.02-.19a.603.603 0 0 0-.06-.19.757.757 0 0 0-.09-.18c-.03-.05-.08-.1-.12-.15-.28-.27-.72-.37-1.09-.21-.13.05-.23.12-.33.21-.04.05-.09.1-.12.15-.04.06-.07.12-.09.18-.03.06-.05.12-.06.19-.01.06-.02.13-.02.19 0 .26.11.52.29.71.1.09.2.16.33.21.12.05.25.08.38.08.06 0 .13-.01.2-.02M13 16v-4a1 1 0 1 0-2 0v4a1 1 0 1 0 2 0M12 3c-4.962 0-9 4.038-9 9 0 4.963 4.038 9 9 9 4.963 0 9-4.037 9-9 0-4.962-4.037-9-9-9m0 20C5.935 23 1 18.065 1 12S5.935 1 12 1c6.066 0 11 4.935 11 11s-4.934 11-11 11" fill-rule="evenodd"></path></g></svg>
  </div>
  <div class="hint-body-container">
    <div class="hint-body">
      
        <span class="hint-body-text">setInterval 함수는 주기를 가지고 계속 실행되기 때문에 clearInterval을 이용하여 종료해주어야 합니다.</span>
      
    </div>
  </div>
</div>

<h3 id="setinterval-clearinterval-예제">setInterval, clearInterval 예제</h3>

<p>예제를 통해서 사용하는 방법을 소개해드리도록 하겠습니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">alertMessage</span> <span class="p">()</span> <span class="p">{</span>
  <span class="nx">alert</span><span class="p">(</span><span class="dl">"</span><span class="s2">I'm AlertMessage</span><span class="dl">"</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 5초마다 alertMessage 함수를 실행</span>
<span class="kd">var</span> <span class="nx">intervalId</span> <span class="o">=</span> <span class="nx">setInterval</span><span class="p">(</span><span class="nx">alertMessage</span><span class="p">,</span> <span class="mi">5000</span><span class="p">)</span>

<span class="kd">function</span> <span class="nx">stopInterval</span> <span class="p">(</span><span class="nx">intervalId</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">clearInterval</span><span class="p">(</span><span class="nx">intervalId</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">// 20초 후에 실행시켰던 interval 타이머를 종료</span>
<span class="nx">setTimeout</span><span class="p">(</span><span class="nx">stopInterval</span><span class="p">,</span> <span class="mi">20000</span><span class="p">,</span> <span class="nx">intervalId</span><span class="p">)</span>
</code></pre></div></div>

<p>setInterval과 clearInterval은 함께 사용하는 경우가 많기 때문에 위와 같은 예제를 준비하였습니다.</p>

<p>위 예제의 경우, 페이지 로드 후 5초마다 얼럿창을 띄우게 되고, 20초후부터는 얼럿창을 띄우는 타이머가 종료되어 더 이상 타이머가 얼럿이 뜨지 않게 됩니다.</p>

<h3 id="참고-사항">참고 사항</h3>

<p>setTimeout과 setInterval을 사용하면서 알아두면 좋을 것들을 중요도 순서대로 소개해보도록 하겠습니다.</p>

<h4 id="메모리-누수-memory-leak">메모리 누수 (Memory leak)</h4>

<p>자바스크립트는 JS 엔진에 의해서 메모리가 관리되고 있습니다.</p>

<p>JS 엔진은 더 이상 사용하지 않는 메모리를 추적하여 메모리를 해제하는 가비지 컬렉팅 (Garbage Collecting) 기능을 가지고 있습니다.</p>

<p>하지만 여러 개의 타이머 함수를 사용하는 페이지에서 정확히 <code class="language-plaintext highlighter-rouge">clear 함수</code>를 이용하여 해제해주지 않으면 <strong>GC를 통한 메모리 해제가 정상적으로 동작하지 않을</strong> 수 있습니다.</p>

<div class="hint-container warning">
  <div class="hint-type warning">
    <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor"><g><circle cx="12" cy="12" r="10"></circle><line x1="12" y1="8" x2="12" y2="12"></line><line x1="12" y1="16" x2="12" y2="16"></line></g></svg>
  </div>
  <div class="hint-body-container">
    <div class="hint-body">
      
        <span class="hint-body-text">요즘 인기를 얻고 있는 SPA (Single Page Application)은 실제로 페이지를 새로 로드하는 것이 아니기 때문에 타이머 함수 사용 시, 더욱더 주의를 기울여야합니다.</span>
      
    </div>
  </div>
</div>

<h4 id="클로져-이슈">클로져 이슈</h4>

<p>타이머 함수에 대한 클로저 이슈는 setTimeout, setInterval 둘 모두에 해당하므로 setTimeout으로 예제를 소개해보도록 하겠습니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span>
  <span class="p">},</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<p>위와 같은 코드를 실행했을 때, 결과 값으로 <code class="language-plaintext highlighter-rouge">0 ~ 4</code>까지 순차적으로 로그가 찍힌다고 생각하셨다면, 클로져에 대한 이해가 필요합니다.</p>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>5
5
5
5
5
</code></pre></div></div>

<p>예제에 대한 실제 로그는 위와 같은 형태로 모두 <code class="language-plaintext highlighter-rouge">4</code>로 찍히게됩니다. 그 이유는 setTimeout 모두는 <code class="language-plaintext highlighter-rouge">for</code> 문이 실행된 이후에 실행되기 때문입니다.</p>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="nx">i</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
  <span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span>
    <span class="p">},</span> <span class="nx">i</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">)</span>
  <span class="p">})(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-text highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0
1
2
3
4
</code></pre></div></div>

<p>위와 같은 방식으로 익명 함수로 래핑하여 변수를 익명 함수의 파라미터로 전달하게되면 <code class="language-plaintext highlighter-rouge">0 ~ 4</code>가 차례대로 출력되는 원하는 결과를 얻을 수 있습니다.</p>

<h4 id="clear-함수의-사용">Clear 함수의 사용</h4>

<p><code class="language-plaintext highlighter-rouge">setTimeout</code>과 <code class="language-plaintext highlighter-rouge">setInterval</code>의 리턴 값인 타이머ID는 같은 공간에서 관리되기 때문에 실행된 타이머를 <code class="language-plaintext highlighter-rouge">clearTimeout</code> 또는 <code class="language-plaintext highlighter-rouge">clearInterval</code> 둘 중 어느 것을 사용하여도 기술적으로 동일하게 동작합니다.</p>

<h3 id="참고-문서">참고 문서</h3>

<div class="related-link-wrap">
    <a class="related-link" href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" version="1.0" width="24" height="24" viewBox="0 0 200.000000 200.000000" preserveAspectRatio="xMidYMid meet"><g transform="translate(0.000000,200.000000) scale(0.100000,-0.100000)" fill="currentColor" stroke="none"><path d="M0 1000 l0 -1000 1000 0 1000 0 0 1000 0 1000 -1000 0 -1000 0 0 -1000z m1033 624 c58 -17 111 -26 142 -24 103 6 124 4 158 -15 34 -18 43 -32 81 -127 18 -44 39 -59 152 -104 144 -57 185 -77 195 -96 16 -29 22 -169 10 -214 -18 -67 -51 -106 -105 -125 -26 -10 -56 -25 -66 -34 -29 -26 -79 -28 -149 -6 -126 41 -235 19 -286 -58 -30 -45 -49 -155 -61 -348 l-7 -113 -26 6 c-99 23 -277 113 -363 184 -98 80 -136 118 -137 132 -1 9 12 50 28 90 l30 73 -100 3 c-54 1 -99 6 -99 10 0 4 30 39 66 77 l66 70 -121 3 c-67 1 -121 6 -121 10 0 4 32 42 71 84 l70 77 -121 3 -121 3 62 65 c287 303 316 326 453 372 106 35 180 36 299 2z" /></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">WindowOrWorkerGlobalScope.setTimeout() - JavaScript | MDN</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">developer.mozilla.org</span>
        </div>
      </div>
    </a>
</div>

<div class="related-link-wrap">
    <a class="related-link" href="https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setInterval" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" version="1.0" width="24" height="24" viewBox="0 0 200.000000 200.000000" preserveAspectRatio="xMidYMid meet"><g transform="translate(0.000000,200.000000) scale(0.100000,-0.100000)" fill="currentColor" stroke="none"><path d="M0 1000 l0 -1000 1000 0 1000 0 0 1000 0 1000 -1000 0 -1000 0 0 -1000z m1033 624 c58 -17 111 -26 142 -24 103 6 124 4 158 -15 34 -18 43 -32 81 -127 18 -44 39 -59 152 -104 144 -57 185 -77 195 -96 16 -29 22 -169 10 -214 -18 -67 -51 -106 -105 -125 -26 -10 -56 -25 -66 -34 -29 -26 -79 -28 -149 -6 -126 41 -235 19 -286 -58 -30 -45 -49 -155 -61 -348 l-7 -113 -26 6 c-99 23 -277 113 -363 184 -98 80 -136 118 -137 132 -1 9 12 50 28 90 l30 73 -100 3 c-54 1 -99 6 -99 10 0 4 30 39 66 77 l66 70 -121 3 c-67 1 -121 6 -121 10 0 4 32 42 71 84 l70 77 -121 3 -121 3 62 65 c287 303 316 326 453 372 106 35 180 36 299 2z" /></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">WindowOrWorkerGlobalScope.setInterval() - JavaScript | MDN</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">developer.mozilla.org</span>
        </div>
      </div>
    </a>
</div>

<h2 id="맺음">맺음</h2>

<p>이번 글에서는 자바스크립트에서 자주 사용하는 타이머 함수인 setTimeout, setInterval에 대해서 알아보고 예제를 통해 사용방법에 대해서 소개해드렸습니다.</p>

<p>혹시 궁금하신 점이나 이상한 점이 있으시면 댓글 부탁드리겠습니다.</p>

<p>감사합니다.</p>
:ET
I"O5<p>처음 자바를 배울 때는 C언어나 C++ 보다는 훨씬 편하고 쉽다고 생각했습니다. 그런데 요즘에 <strong>코틀린</strong>으로 개발을 하기 시작했는데, 제가 머릿속으로 생각한 로직이 정말 간단하게 표현할 수 있는 언어라고 느꼈습니다.</p>

<p>이 번 글에서는 추가적인 코드를 작성해야하는 java와는 달리 kotlin에서는 어떻게 <strong>equals</strong>, <strong>hashCode</strong>, <strong>toString</strong> 등을 간단하게 작성할 수 있는지에 대해서 알아보겠습니다.</p>

<h2 id="object-또는-any-객체의-기본-메소드">Object 또는 Any 객체의 기본 메소드</h2>

<p>우선적으로 Java와 kotlin의 최상위 객체인 Object와 Any의 기본적인 메소드들에 대해서 알아보도록 하겠습니다.</p>

<ul>
  <li>hashCode: 객체의 레퍼런스 값을 가지고 있습니다.</li>
  <li>equals: hashCode로 객체를 비교할 수 있도록 합니다.</li>
  <li>toString: 객체의 class name과 해시코드 값을 보여줍니다.</li>
</ul>

<h3 id="java에서-object-기본-메소드-사용하는-방법">Java에서 Object 기본 메소드 사용하는 방법</h3>

<p>Object 클래스의 내부를 보면 다음과 같이 되어있습니다.</p>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Object</span> <span class="o">{</span>

  <span class="kd">public</span> <span class="kd">native</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">();</span>

  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">obj</span><span class="o">);</span>
  <span class="o">}</span>

  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="nf">getClass</span><span class="o">().</span><span class="na">getName</span><span class="o">()</span> <span class="o">+</span> <span class="s">"@"</span> <span class="o">+</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">toHexString</span><span class="o">(</span><span class="n">hashCode</span><span class="o">());</span>
  <span class="o">}</span>

<span class="o">}</span>
</code></pre></div></div>

<p>기본적으로 객체의 비교를 하기 위해서, Object의 <code class="language-plaintext highlighter-rouge">equals</code> 메소드를 override해서 사용하고, 객체의 정보를 문자열 형태로 보기위해서 <code class="language-plaintext highlighter-rouge">toString</code> 메소드를 override해서 사용하게 됩니다.</p>

<p>아래의 예제를 통해서 알아보겠습니다.</p>

<h4 id="예제-코드">예제 코드</h4>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
  <span class="kd">private</span> <span class="nc">String</span> <span class="n">name</span><span class="o">;</span>
  <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">int</span> <span class="nf">hashCode</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">hashCode</span><span class="o">();</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">equals</span><span class="o">(</span><span class="nc">Object</span> <span class="n">obj</span><span class="o">)</span> <span class="o">{</span>
    <span class="nc">Person</span> <span class="n">other</span> <span class="o">=</span> <span class="o">(</span><span class="nc">Person</span><span class="o">)</span> <span class="n">obj</span><span class="o">;</span>
    <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">name</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">==</span> <span class="n">other</span><span class="o">.</span><span class="na">age</span><span class="o">;</span>
  <span class="o">}</span>

  <span class="nd">@Override</span>
  <span class="kd">public</span> <span class="nc">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="s">"Person(name=)"</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">+</span> <span class="s">", age="</span> <span class="o">+</span> <span class="k">this</span><span class="o">.</span><span class="na">age</span> <span class="o">+</span> <span class="s">")"</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p>Person이라는 클래스가 있고, 이 클래스는 name과 age라는 프로퍼티를 가지고 있습니다. 그리고 equals 메소드에서는 자기 자신과 비교대상의 name, age를 비교하도록 override하였고, toString 메소드에서는 이름과 나이를 문자열 형태로 보여주도록 override하였습니다.</p>

<h3 id="kotlin에서-any의-기본-메소드-사용하는-방법">Kotlin에서 Any의 기본 메소드 사용하는 방법</h3>

<p>코틀린에서도 자바에서 Object와 같은 최상위 클래스인 <strong>Any</strong> 클래스가 존재합니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">open</span> <span class="kd">class</span> <span class="nc">Any</span> <span class="p">{</span>

  <span class="k">public</span> <span class="k">open</span> <span class="k">operator</span> <span class="k">fun</span> <span class="nf">equals</span><span class="p">(</span><span class="n">other</span><span class="p">:</span> <span class="nc">Any</span><span class="p">?):</span> <span class="nc">Boolean</span>

  <span class="k">public</span> <span class="k">open</span> <span class="k">fun</span> <span class="nf">hashCode</span><span class="p">():</span> <span class="nc">Int</span>

  <span class="k">public</span> <span class="k">open</span> <span class="k">fun</span> <span class="nf">toString</span><span class="p">():</span> <span class="nc">String</span>

<span class="p">}</span>
</code></pre></div></div>

<p>코틀린에서는 굉장히 단순한 방법으로 자바에서 했던 과정을 <code class="language-plaintext highlighter-rouge">data classes</code>를 이용하여 생략할 수 있도록 지원해주고 있습니다. 다음 예제를 통해서 알아보도록 하겠습니다.</p>

<h4 id="예제-코드-1">예제 코드</h4>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">data class</span> <span class="nc">Person</span><span class="p">(</span>
  <span class="kd">val</span> <span class="py">name</span><span class="p">:</span> <span class="nc">String</span><span class="p">,</span>
  <span class="kd">val</span> <span class="py">age</span><span class="p">:</span> <span class="nc">Int</span>
<span class="p">)</span>
</code></pre></div></div>

<p>위와 같이 <strong>data class</strong>로 Person을 정의해줍니다. 그리고 결과를 다음과 같이 확인할 수 있습니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">val</span> <span class="py">personA</span> <span class="p">=</span> <span class="nc">Person</span><span class="p">(</span><span class="s">"name"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="kd">val</span> <span class="py">personB</span> <span class="p">=</span> <span class="nc">Person</span><span class="p">(</span><span class="s">"name"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  
  <span class="nf">println</span><span class="p">(</span><span class="n">personA</span> <span class="p">==</span> <span class="n">personB</span><span class="p">)</span>
  <span class="nf">println</span><span class="p">(</span><span class="n">personA</span><span class="p">.</span><span class="nf">toString</span><span class="p">())</span>

<span class="p">}</span>

<span class="cm">/*
data 키워드를 붙이지 않았을 때, 결과
false
Person@60e53b93

data 키워드를 붙였을 때, 결과
true
Person(name=name, age=1)
*/</span>
</code></pre></div></div>

<p>data 키워드를 붙이지 않았을 때는 personA와 personB가 객체 <code class="language-plaintext highlighter-rouge">레퍼런스 비교</code>를 했기때문에 <strong>false</strong>, data 키워드를 붙였을 때는 personA와 personB의 각 프로퍼티가 전부 같은지 비교를 하여 <strong>true</strong>가 출력되었습니다.</p>

<p>또한 data class의 경우, toString 또한 각 프로퍼티의 실제값을 알아볼 수 있도록 문자열로 출력되고 있는 것을 볼 수 있습니다.</p>

<h3 id="data-classes란">Data Classes란?</h3>

<p><code class="language-plaintext highlighter-rouge">data</code> 키워드가 붙은 클래스의 경우, 코틀린 컴파일러에서 자동으로 다음 메소드들을 추가해줍니다.</p>

<ul>
  <li>equals()</li>
  <li>hashCode()</li>
  <li>toString()</li>
  <li>componentN()</li>
  <li>copy()</li>
</ul>

<p>data 클래스가 되기 위한 조건은 4가지가 있습니다.</p>

<blockquote>
  <p>조건</p>
  <ol>
    <li>Primary Constructor에 하나 이상의 파라미터를 가지고 있어야 합니다.</li>
    <li>Primary Constructor 파라미터는 val 또는 var로 선언해야합니다.</li>
    <li>data 클래스는 abstract, open, seal, internal 등의 키워드를 사용할 수 없습니다.</li>
    <li>data 클래스는 interface만 구현할 수 있습니다. (1.1 이전)</li>
  </ol>
</blockquote>

<p>만약에 자동으로 추가되는 메소드를 명시적으로 구현했다면 컴파일 할 때, 자동으로 구현되지 않도록하여 명시적으로 정의한 메소드가 실행되도록 합니다.</p>

<h4 id="componentn-functions">componentN() functions</h4>

<p>다른 것들은 많이 보셨을 것 같지만 <code class="language-plaintext highlighter-rouge">ComponentN</code>은 생소하신 분들이 있을 것 같아 소개해드리겠습니다. 코틀린에서는 다음과 같은 형태로 코드를 작성할 수 있습니다. 이를 destructuring declarations라고 하는데 말 그대로 선언한 것을 분해하는 기능을 말합니다.</p>

<p>이 때 사용하는 것이 componentN 메소드입니다. 이는 각 프로퍼티의 값을 순서대로 component1(), component2() … 등으로 분해할 수 있도록 해줍니다.</p>

<div class="language-kotlin highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">fun</span> <span class="nf">main</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">val</span> <span class="p">(</span><span class="py">name</span><span class="p">,</span> <span class="py">age</span><span class="p">)</span> <span class="p">=</span> <span class="nc">Person</span><span class="p">(</span><span class="s">"name"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
  <span class="nf">print</span><span class="p">(</span><span class="s">"$name, $age"</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="맺음">맺음</h2>

<p>자바와 비교하여 코틀린의 data classes 와 equals, hashCode, toString에 대해서 알아보았습니다. 궁금하신 점이나 이상한 점 있으면 댓글 부탁드리겠습니다.</p>

<h4 id="ref">Ref</h4>

<div class="related-link-wrap">
    <a class="related-link" href="https://kotlinlang.org/docs/reference/data-classes.html" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Data Classes - Kotlin Programming Language</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">kotlinlang.org</span>
        </div>
      </div>
    </a>
</div>
:ET
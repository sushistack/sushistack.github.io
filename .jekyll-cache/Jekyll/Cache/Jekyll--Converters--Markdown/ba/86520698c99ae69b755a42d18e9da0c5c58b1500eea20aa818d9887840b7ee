I"S@<p>알고리즘 능력을 회복하기 위해 알고리즘 종류 별로 하루에 2~3개씩 풀어가려고합니다. 한 번 걸었던 길을 다시 걷는 길이라 회복하는데 오랜 시간이 걸릴 거라고 생각하지 않습니다.</p>

<p>이번 문제는 알고리즘의 기본 스킬 중에 기본이라고 할 수 있는 넓이 우선 탐색(bfs)을 활용한 문제 풀이를 하려고합니다.</p>

<h2 id="백준-7562-나이트의-이동">백준 7562: 나이트의 이동</h2>

<p>문제의 내용은 간단합니다. 체스판 위에는 나이트 1개가 놓여져 있고, 시작점에서 끝점으로 이동할 때, 최소한의 횟수는 얼마인지 찾는 문제입니다.</p>

<p>주의할 점은 일반적으로 상하좌우로 이동하는 반면, 이 문제의 경우는 (2,1), (1,2)와 같이 대각선으로 이동할 수 있습니다.</p>

<h3 id="풀이-핵심">풀이 핵심</h3>

<p>문제를 보고 탐색 문제라고 판단했다면, 무엇을 구하는지에 따라 dfs를 사용할 것인지 bfs를 사용할 것인지 결정해야합니다. 이 문제의 풀이 핵심은 <strong>최소 이동 횟수</strong>를 구하라는 것입니다. 일반적으로 <code class="language-plaintext highlighter-rouge">dfs</code>는 전체를 탐색해야하는 경우 사용하고, 최단 경로를 탐색하기 위해서는 <code class="language-plaintext highlighter-rouge">bfs</code>를 사용하게 됩니다.</p>

<p>따라서 이번 문제는 BFS를 사용해서 풀어야 함을 알 수 있습니다. 지금 부터 풀이 방법을 소개해보도록 하겠습니다.</p>

<h3 id="정답-코드-bfs">정답 코드 (BFS)</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.LinkedList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Queue</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Boj7562</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">n</span><span class="o">;</span> <span class="c1">// 테스트 케이스 개수</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">l</span><span class="o">;</span> <span class="c1">// 체스판 길이</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dx</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">};</span> <span class="c1">// x 이동 방향</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span><span class="o">[]</span> <span class="n">dy</span> <span class="o">=</span> <span class="o">{-</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mi">2</span><span class="o">,</span> <span class="o">-</span><span class="mi">1</span><span class="o">,</span> <span class="mi">2</span><span class="o">,</span> <span class="mi">1</span><span class="o">};</span> <span class="c1">// y 이동 방향</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">BufferedWriter</span> <span class="n">bw</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedWriter</span><span class="o">(</span><span class="k">new</span> <span class="nc">OutputStreamWriter</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">));</span>

        <span class="n">n</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
        <span class="nc">String</span><span class="o">[]</span> <span class="n">ins</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(</span><span class="n">n</span><span class="o">--</span> <span class="o">!=</span> <span class="mi">0</span><span class="o">)</span> <span class="o">{</span>
            <span class="n">l</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>
            <span class="n">ins</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
            <span class="nc">Point</span> <span class="n">start</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ins</span><span class="o">[</span><span class="mi">0</span><span class="o">]),</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ins</span><span class="o">[</span><span class="mi">1</span><span class="o">]),</span> <span class="mi">0</span><span class="o">);</span>

            <span class="n">ins</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">" "</span><span class="o">);</span>
            <span class="nc">Point</span> <span class="n">end</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ins</span><span class="o">[</span><span class="mi">0</span><span class="o">]),</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">ins</span><span class="o">[</span><span class="mi">1</span><span class="o">]),</span> <span class="mi">0</span><span class="o">);</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">write</span><span class="o">(</span><span class="n">bfs</span><span class="o">(</span><span class="n">start</span><span class="o">,</span> <span class="n">end</span><span class="o">)</span> <span class="o">+</span> <span class="s">"\n"</span><span class="o">);</span>
            <span class="n">bw</span><span class="o">.</span><span class="na">flush</span><span class="o">();</span>
        <span class="o">}</span>

        <span class="n">bw</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">int</span> <span class="nf">bfs</span> <span class="o">(</span><span class="nc">Point</span> <span class="n">start</span><span class="o">,</span> <span class="nc">Point</span> <span class="n">end</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// BFS를 위한 큐 생성</span>
        <span class="nc">Queue</span><span class="o">&lt;</span><span class="nc">Point</span><span class="o">&gt;</span> <span class="n">q</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">LinkedList</span><span class="o">&lt;&gt;();</span>
        
        <span class="c1">// 방문된 곳을 체크하기 위한 배열</span>
        <span class="kt">boolean</span><span class="o">[][]</span> <span class="n">visited</span> <span class="o">=</span> <span class="k">new</span> <span class="kt">boolean</span><span class="o">[</span><span class="mi">301</span><span class="o">][</span><span class="mi">301</span><span class="o">];</span>

        <span class="c1">// 큐에 시작점 삽입</span>
        <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="n">start</span><span class="o">);</span>
        <span class="kt">int</span> <span class="n">min</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">MAX_VALUE</span><span class="o">;</span>

        <span class="k">while</span> <span class="o">(!</span><span class="n">q</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span> <span class="o">{</span>
            <span class="nc">Point</span> <span class="n">curPos</span> <span class="o">=</span> <span class="n">q</span><span class="o">.</span><span class="na">poll</span><span class="o">();</span>  <span class="c1">// 현재 위치 조회</span>

            <span class="c1">// 끝지점에 도착한 경우, 지금까지 이동한 횟수와 지금까지의 최솟값을 비교해 업데이트</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">curPos</span><span class="o">.</span><span class="na">x</span> <span class="o">==</span> <span class="n">end</span><span class="o">.</span><span class="na">x</span> <span class="o">&amp;&amp;</span> <span class="n">curPos</span><span class="o">.</span><span class="na">y</span> <span class="o">==</span> <span class="n">end</span><span class="o">.</span><span class="na">y</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">min</span> <span class="o">=</span> <span class="nc">Math</span><span class="o">.</span><span class="na">min</span><span class="o">(</span><span class="n">min</span><span class="o">,</span> <span class="n">curPos</span><span class="o">.</span><span class="na">c</span><span class="o">);</span>
            <span class="o">}</span>

            <span class="k">for</span> <span class="o">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">8</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span> <span class="o">{</span>
                <span class="c1">// 다음 지점 설정</span>
                <span class="kt">int</span> <span class="n">nx</span> <span class="o">=</span> <span class="n">curPos</span><span class="o">.</span><span class="na">x</span> <span class="o">+</span> <span class="n">dx</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                <span class="kt">int</span> <span class="n">ny</span> <span class="o">=</span> <span class="n">curPos</span><span class="o">.</span><span class="na">y</span> <span class="o">+</span> <span class="n">dy</span><span class="o">[</span><span class="n">i</span><span class="o">];</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">nx</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">nx</span> <span class="o">&gt;</span> <span class="n">l</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">||</span> <span class="n">ny</span> <span class="o">&gt;</span> <span class="n">l</span> <span class="o">-</span> <span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
                    <span class="k">continue</span><span class="o">;</span>
                <span class="o">}</span>

                <span class="c1">// 다음 지점이 방문한 곳이 아니라면 새위치로 이동하면서 이동 횟수 + 1로 설정</span>
                <span class="c1">// 다음 지점은 방문할 예정이기 때문에 true로 설정</span>
                <span class="k">if</span> <span class="o">(!</span><span class="n">visited</span><span class="o">[</span><span class="n">nx</span><span class="o">][</span><span class="n">ny</span><span class="o">])</span> <span class="o">{</span>
                    <span class="n">q</span><span class="o">.</span><span class="na">offer</span><span class="o">(</span><span class="k">new</span> <span class="nc">Point</span><span class="o">(</span><span class="n">nx</span><span class="o">,</span> <span class="n">ny</span><span class="o">,</span> <span class="n">curPos</span><span class="o">.</span><span class="na">c</span> <span class="o">+</span> <span class="mi">1</span><span class="o">));</span>
                    <span class="n">visited</span><span class="o">[</span><span class="n">nx</span><span class="o">][</span><span class="n">ny</span><span class="o">]</span> <span class="o">=</span> <span class="kc">true</span><span class="o">;</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// 최소값 리턴</span>
        <span class="k">return</span> <span class="n">min</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">Point</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">x</span><span class="o">;</span>  <span class="c1">// x 위치</span>
        <span class="kt">int</span> <span class="n">y</span><span class="o">;</span>  <span class="c1">// y 위치</span>
        <span class="kt">int</span> <span class="n">c</span><span class="o">;</span>  <span class="c1">// 이동 횟수</span>
        <span class="nc">Point</span> <span class="o">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">,</span> <span class="kt">int</span> <span class="n">y</span><span class="o">,</span> <span class="kt">int</span> <span class="n">c</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">this</span><span class="o">.</span><span class="na">x</span> <span class="o">=</span> <span class="n">x</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">y</span> <span class="o">=</span> <span class="n">y</span><span class="o">;</span>
            <span class="k">this</span><span class="o">.</span><span class="na">c</span> <span class="o">=</span> <span class="n">c</span><span class="o">;</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="마무리">마무리</h2>

<p>일반적으로 코딩 테스트에서 쉬운 난이도로 자주 나오는 형태로 풀이 방법을 꼭 익혀서 손쉽게 문제를 풀 수 있었으면 좋겠습니다. 혹시 궁금하신 점이나 이상한 점이 있다면 댓글 부탁드리겠습니다.</p>

<p>감사합니다.</p>
:ET
I"Dl<p><strong>Jekyll</strong>과 <strong>Github Pages</strong>를 이용해서 간단하게 블로그를 개설할 수 있습니다. 보통의 경우, github repository의 master 브랜치에 빌드 전 상태의 프로젝트를 올려두면, github에서 자동으로 이 프로젝트를 빌드해서 웹서버를 띄워 줍니다.</p>

<h3 id="travis-ci로-github-pages-배포하기">Travis CI로 Github Pages 배포하기</h3>

<p>Jekins와 동일한 형태의 CI 툴인 Travis CI로 배포를 하게 된 이유는 Jekyll에 커스텀 플러그인을 적용하고 싶었기 때문입니다.</p>

<h3 id="plugins">Plugins</h3>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">plugins</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">jekyll-feed</span>
  <span class="pi">-</span> <span class="s">jekyll-optional-front-matter</span>
  <span class="pi">-</span> <span class="s">jekyll-paginate</span>
  <span class="pi">-</span> <span class="s">jekyll-readme-index</span>
  <span class="pi">-</span> <span class="s">jekyll-redirect-from</span>
  <span class="pi">-</span> <span class="s">jekyll-relative-links</span>
  <span class="pi">-</span> <span class="s">jekyll-seo-tag</span>
  <span class="pi">-</span> <span class="s">jekyll-sitemap</span>
  <span class="pi">-</span> <span class="s">jekyll-titles-from-headings</span>
  <span class="pi">-</span> <span class="s">amp-jekyll</span>
  <span class="pi">-</span> <span class="s">jekyll-liquify</span>
  <span class="pi">-</span> <span class="s">jekyll-include-cache</span>
</code></pre></div></div>

<p>저는 총 12개의 plugin 들을 사용 중 입니다. 하지만 이 상태로 repository에 셋업을 해놓으면 플러그인들이 적용되지 않은 상태로 블로그가 만들어지거나 아예 빌드가 실패할 수도 있습니다.</p>

<p>그 이유는 보안적인 이슈로 github에서 정해놓은 <strong>whitelisted plugins</strong>가 있기 때문입니다. 즉 화이트 리스트에 포함되지 않은 플러그인은 스킵하고 사이트 빌딩을 한다는 의미입니다. 아래 링크를 통해서 화이트 리스트에 포함된 플러그인들을 확인하실 수 있습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://pages.github.com/versions/" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" aria-hidden="true" focusable="false" data-prefix="fab" data-icon="github-alt" class="svg-inline--fa fa-github-alt fa-w-15" role="img" viewBox="0 0 480 512" style="&#10;    width: 24px;&#10;    height: 24px;&#10;    color: #8a4baf;&#10;"><path fill="currentColor" d="M186.1 328.7c0 20.9-10.9 55.1-36.7 55.1s-36.7-34.2-36.7-55.1 10.9-55.1 36.7-55.1 36.7 34.2 36.7 55.1zM480 278.2c0 31.9-3.2 65.7-17.5 95-37.9 76.6-142.1 74.8-216.7 74.8-75.8 0-186.2 2.7-225.6-74.8-14.6-29-20.2-63.1-20.2-95 0-41.9 13.9-81.5 41.5-113.6-5.2-15.8-7.7-32.4-7.7-48.8 0-21.5 4.9-32.3 14.6-51.8 45.3 0 74.3 9 108.8 36 29-6.9 58.8-10 88.7-10 27 0 54.2 2.9 80.4 9.2 34-26.7 63-35.2 107.8-35.2 9.8 19.5 14.6 30.3 14.6 51.8 0 16.4-2.6 32.7-7.7 48.2 27.5 32.4 39 72.3 39 114.2zm-64.3 50.5c0-43.9-26.7-82.6-73.5-82.6-18.9 0-37 3.4-56 6-14.9 2.3-29.8 3.2-45.1 3.2-15.2 0-30.1-.9-45.1-3.2-18.7-2.6-37-6-56-6-46.8 0-73.5 38.7-73.5 82.6 0 87.8 80.4 101.3 150.4 101.3h48.2c70.3 0 150.6-13.4 150.6-101.3zm-82.6-55.1c-25.8 0-36.7 34.2-36.7 55.1s10.9 55.1 36.7 55.1 36.7-34.2 36.7-55.1-10.9-55.1-36.7-55.1z" /></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Dependency versions | GitHub Pages</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">pages.github.com</span>
        </div>
      </div>
    </a>
</div>

<h3 id="custom-plugin이-적용된-사이트-배포">Custom plugin이 적용된 사이트 배포</h3>

<p>화이트 리스트에 포함되지 않은 플러그인을 블로그에 적용하여 배포할 수는 없는 것은 아닙니다.</p>

<blockquote>
  <p>Github pages는 repository 내용에 따라 다음과 같이 동작합니다.</p>
  <ol>
    <li>내용이 Jekyll 빌드 전 상태인 경우, 자동 빌드 및 배포 (커스텀 플러그인 X)</li>
    <li>내용이 Jekyll 빌드 완료 후 결과물인 경우, 그대로 웹 페이지 노출 (커스텀 플러그인 O)</li>
  </ol>
</blockquote>

<p>하지만 2번으로 적용할 경우에는 번거로움이 생길 수 있는데요. 왜냐하면 로컬에서 포스팅을 하나 쓰고, 빌드 후에 github 원격 저장소에 업로드를 해주어야합니다.</p>

<p>또한 위 작업을 해주기 위해서 master 브랜치와 빌드 전 브랜치로 <code class="language-plaintext highlighter-rouge">gh-pages</code>를 만들어서 사용합니다.</p>

<ul>
  <li>master: 빌드 완료 후 결과물로 실제 웹 페이지 문서들의 집합.</li>
  <li>gh-pages: 빌드 전, 실제로 글을 쓰거나 설정 등을 할 수 있는 공간.</li>
</ul>

<p>2번 내용의 작업이 단순하지만은 않기 때문에, 이를 자동화 해주는 작업이 필요합니다. 일반적으로 다음과 같은 방법을 사용합니다.</p>

<ol>
  <li>로컬에서 빌드 후, shell script를 이용한 배포 스크립트 작성</li>
  <li>Travis CI, Circle CI 등의 툴을 이용하여 배포 자동화</li>
  <li>Github Action의 workflow 작성하여 배포 자동화</li>
</ol>

<p>1번의 경우, 배포의 자동화와는 거리가 멀고 배포 과정이 조금 짧아지는 정도일 것 같습니다. 또한 ruby, gem 등이 없는 환경에서는 배포조차 할 수가 없는 상황이 생깁니다.</p>

<p>2번이 오늘 소개해드릴 CI(Continuous Integration)툴을 이용하여 배포 자동화하는 방법입니다.</p>

<hr />

<h3 id="travis-ci">Travis CI</h3>

<p>Travis CI는 배포 자동화 툴로 생각하시면 될 것 같습니다. 비슷한 툴로는 가장 유명한 Jenkins와 비교하시면 될 듯 합니다. 그럼 바로 Jekyll과 Travis CI를 이용하여 github pages 배포 자동화에 대해 소개를 해드리도록 하겠습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="https://travis-ci.org" target="_blank" rel="nofollow noopener noreferrer">
      <div class="related-link-icon">
        
        <svg preserveAspectRatio="xMidYMid meet" height="1em" width="1em" fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke="currentColor" class="icon-7f6730be--text-3f89f380"><g><line x1="5" y1="12" x2="19" y2="12"></line><polyline points="12 5 19 12 12 19"></polyline></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">Travis CI - Test and Deploy Your Code with Confidence</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">travis-ci.org</span>
        </div>
      </div>
    </a>
</div>

<h4 id="personal-access-tokens-in-github">Personal Access Tokens in Github</h4>

<p><img src="/assets/images/github-token1.png" alt="github-token1" />
<img src="/assets/images/github-token2.png" alt="github-token2" /></p>

<p>Github 계정의 Settings &gt; Developer Settings로 들어갑니다.</p>

<p><img src="/assets/images/github-token3.png" alt="github-token3" /></p>

<p>Developer Settings 영역은 개발자 설정을 할 수 있는 부분인데, Personal Access Tonkens &gt; <code class="language-plaintext highlighter-rouge">Generate new tokens</code> 버튼을 클릭합니다.</p>

<p>이 영역에서는 외부에서 git 명령어를 쓸 수 있도록 <code class="language-plaintext highlighter-rouge">Access Token</code>을 발행할 수 있습니다.</p>

<p><img src="/assets/images/github-token4.png" alt="github-token4" /></p>

<p>Note에서는 이 토큰이 어디에서 사용하는지 알아볼 수 있는 내용으로 넣어주시고, <code class="language-plaintext highlighter-rouge">repo</code>를 체크합니다.</p>

<p><img src="/assets/images/github-token5.png" alt="github-token5" /></p>

<p>다른 설정을 추가 또는 제외할 수있지만 바로 키를 생성하겠습니다.</p>

<p><img src="/assets/images/github-token6.png" alt="github-token6" /></p>

<p>이후, 생성된 키는 잘 복사해둡니다. 나중에 이 영역에 들어왔을 때, 재 성생은 가능하지만 다시는 동일한 키를 얻을 수 없습니다.</p>

<h4 id="travis-ci-설정">Travis CI 설정</h4>

<p><img src="/assets/images/travis-setting1.png" alt="travis-setting1" /></p>

<p>Travis CI에 접속한 후, 깃 아이디로 로그인을 해줍니다.</p>

<p><img src="/assets/images/travis-setting2.png" alt="travis-setting2" /></p>

<p>Travis CI와 github 연동에 대한 허용을 해줍니다.</p>

<p><img src="/assets/images/travis-setting3.png" alt="travis-setting3" /></p>

<p>이후, repository 사용에 대한 허용해주기 위해서 <code class="language-plaintext highlighter-rouge">ACTIVE ALL REPOSITORIES USING GITHUB APPS</code>를 클릭 해줍니다.</p>

<p><img src="/assets/images/travis-setting4.png" alt="travis-setting4" /></p>

<p>Travis CI에서 사용할 repository를 선택한 후, 승인 및 설치를 진행합니다.</p>

<p><img src="/assets/images/travis-setting5.png" alt="travis-setting5" /></p>

<p>이후 한 번더 Travis CI가 repository를 사용할 수 있도록 허가 해줍니다.</p>

<p><img src="/assets/images/travis-setting6.png" alt="travis-setting6" /></p>

<p>이후 다시 Travis CI로 돌아와서 repository 탭을 클릭한 후, 방금 설정했던 repository의 <strong>설정</strong> 화면으로 들어갑니다.</p>

<p><img src="/assets/images/travis-setting7.png" alt="travis-setting7" /></p>

<p>하단으로 내리다보면 환경 변수를 설정하는 부분이 있는데 이곳에 다음과 같은 변수를 추가해줍니다. 이 변수를 추가해주는 이유는 Jekyll가 빌드될 때 proction 모드로 빌드될 수 있도록 해주기 위해서입니다.</p>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">JEKYLL_ENV</span>
<span class="na">value</span><span class="pi">:</span> <span class="s">production</span>
</code></pre></div></div>

<p>이 것으로 Travis CI에서 설정하는 것은 끝났습니다.</p>

<h4 id="jeykll-설정">Jeykll 설정</h4>

<p>이제 마지막으로 Jekyll에서도 다음과 같은 설정이 필요합니다.</p>

<blockquote>
  <p>Jekyll 설정</p>
  <ul>
    <li>Ruby gem의 rake Package 설치</li>
    <li>.travis.yml 생성</li>
    <li>Travis Secure 변수 생성</li>
    <li>Rakefile 생성</li>
    <li>_config.yml 수정</li>
  </ul>
</blockquote>

<h5 id="ruby-gem의-rake-package-설치">Ruby gem의 rake Package 설치</h5>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="nb">install </span>rake
</code></pre></div></div>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">gem "jekyll", '4.1.0'
</span><span class="gi">+ gem 'rake'
</span></code></pre></div></div>

<p>Gemfile에 다음과 같이 rake 패키지를 등록해줍니다. 이후 <code class="language-plaintext highlighter-rouge">bundle update</code>를 실행한 후, <code class="language-plaintext highlighter-rouge">.lock</code> 파일에도 업데이트가 될 수 있도록 해줍니다.</p>

<h5 id="travisyml-생성">.travis.yml 생성</h5>

<div class="language-yml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># 루비를 이용하여 빌드.</span>
<span class="na">language</span><span class="pi">:</span> <span class="s">ruby</span>

<span class="c1"># 번들러의 캐시 기능을 사용.</span>
<span class="na">cache</span><span class="pi">:</span> <span class="s">bundler</span>

<span class="c1"># 빌드에 필요한 gem 파일들을 다운로드.</span>
<span class="na">install</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">bundle install</span>

<span class="c1"># rake를 이용하여 jekyll 실행.</span>
<span class="na">script</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">bundle exec rake site:deploy --quiet</span>

<span class="c1"># gh-pages 브랜치의 push 또는 pull request 이벤트에 대해서 실행.</span>
<span class="na">branches</span><span class="pi">:</span>
  <span class="na">only</span><span class="pi">:</span>
    <span class="pi">-</span> <span class="s">gh-pages</span>

<span class="c1"># rvm 버전을 설정</span>
<span class="na">rvm</span><span class="pi">:</span>
  <span class="pi">-</span> <span class="s">2.6.3</span>

<span class="c1"># travis encrypt 'GIT_NAME="YOUR_USERNAME" GIT_EMAIL="YOUR_EMAIL" GH_TOKEN=YOUR_TOKEN'</span>
<span class="na">env</span><span class="pi">:</span>
  <span class="na">global</span><span class="pi">:</span>
    <span class="na">secure</span><span class="pi">:</span> <span class="s">&lt;your_secure_code&gt;</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">.travis.yml</code>파일을 프로젝트 루트 밑에 생성해줍니다.</p>

<h5 id="travis-secure-변수-생성">Travis Secure 변수 생성</h5>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">gem</span> <span class="n">install</span> <span class="n">travis</span>
</code></pre></div></div>

<p>Travis Secure 변수를 생성해주기 위해서는 ruby gem의 <code class="language-plaintext highlighter-rouge">travis</code> 패키지가 필요합니다.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>travis encrypt <span class="s1">'GIT_NAME="YOUR_USERNAME" GIT_EMAIL="YOUR_EMAIL" GH_TOKEN=YOUR_TOKEN'</span>

<span class="c"># GH_TOKEN에 들어가는 YOUR_TOKEN은 앞서 설명했던 GITHUB_ACCESS_TOKEN을 넣으시면 됩니다.</span>
</code></pre></div></div>

<p>위 명령어를 실행해서 나오는 값(더블 쿼트 제외)을 <strong>.travis.yml</strong>의 <code class="language-plaintext highlighter-rouge">&lt;your_secure_code&gt;</code>에 대체해 줍니다.</p>

<h5 id="rakefile-생성">Rakefile 생성</h5>

<div class="language-ruby highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">#############################################################################</span>
<span class="c1">#</span>
<span class="c1"># Modified version of jekyllrb Rakefile</span>
<span class="c1"># https://github.com/jekyll/jekyll/blob/master/Rakefile</span>
<span class="c1">#</span>
<span class="c1">#############################################################################</span>

<span class="nb">require</span> <span class="s1">'rake'</span>
<span class="nb">require</span> <span class="s1">'date'</span>
<span class="nb">require</span> <span class="s1">'yaml'</span>


<span class="no">CONFIG</span> <span class="o">=</span> <span class="no">YAML</span><span class="p">.</span><span class="nf">load</span><span class="p">(</span><span class="no">File</span><span class="p">.</span><span class="nf">read</span><span class="p">(</span><span class="s1">'_config.yml'</span><span class="p">))</span>
<span class="no">USERNAME</span> <span class="o">=</span> <span class="no">CONFIG</span><span class="p">[</span><span class="s2">"username"</span><span class="p">]</span>
<span class="no">REPO</span> <span class="o">=</span> <span class="no">CONFIG</span><span class="p">[</span><span class="s2">"repo"</span><span class="p">]</span>
<span class="no">SOURCE_BRANCH</span> <span class="o">=</span> <span class="no">CONFIG</span><span class="p">[</span><span class="s2">"branch"</span><span class="p">]</span>
<span class="no">DESTINATION_BRANCH</span> <span class="o">=</span> <span class="s2">"gh-pages"</span>

<span class="k">def</span> <span class="nf">check_destination</span>
  <span class="k">unless</span> <span class="no">Dir</span><span class="p">.</span><span class="nf">exist?</span> <span class="no">CONFIG</span><span class="p">[</span><span class="s2">"destination"</span><span class="p">]</span>
    <span class="n">sh</span> <span class="s2">"git clone https://$GIT_NAME:$GH_TOKEN@github.com/</span><span class="si">#{</span><span class="no">USERNAME</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">REPO</span><span class="si">}</span><span class="s2">.git </span><span class="si">#{</span><span class="no">CONFIG</span><span class="p">[</span><span class="s2">"destination"</span><span class="p">]</span><span class="si">}</span><span class="s2">"</span>
  <span class="k">end</span>
<span class="k">end</span>

<span class="n">namespace</span> <span class="ss">:site</span> <span class="k">do</span>
  <span class="n">desc</span> <span class="s2">"Generate the site"</span>
  <span class="n">task</span> <span class="ss">:build</span> <span class="k">do</span>
    <span class="n">check_destination</span>
    <span class="n">sh</span> <span class="s2">"bundle exec jekyll build"</span>
  <span class="k">end</span>

  <span class="n">desc</span> <span class="s2">"Generate the site and serve locally"</span>
  <span class="n">task</span> <span class="ss">:serve</span> <span class="k">do</span>
    <span class="n">check_destination</span>
    <span class="n">sh</span> <span class="s2">"bundle exec jekyll serve"</span>
  <span class="k">end</span>

  <span class="n">desc</span> <span class="s2">"Generate the site, serve locally and watch for changes"</span>
  <span class="n">task</span> <span class="ss">:watch</span> <span class="k">do</span>
    <span class="n">sh</span> <span class="s2">"bundle exec jekyll serve --watch"</span>
  <span class="k">end</span>

  <span class="n">desc</span> <span class="s2">"Generate the site and push changes to remote origin"</span>
  <span class="n">task</span> <span class="ss">:deploy</span> <span class="k">do</span>
    <span class="c1"># Detect pull request</span>
    <span class="k">if</span> <span class="no">ENV</span><span class="p">[</span><span class="s1">'TRAVIS_PULL_REQUEST'</span><span class="p">].</span><span class="nf">to_s</span><span class="p">.</span><span class="nf">to_i</span> <span class="o">&gt;</span> <span class="mi">0</span>
      <span class="nb">puts</span> <span class="s1">'Pull request detected. Not proceeding with deploy.'</span>
      <span class="nb">exit</span>
    <span class="k">end</span>

    <span class="c1"># Configure git if this is run in Travis CI</span>
    <span class="k">if</span> <span class="no">ENV</span><span class="p">[</span><span class="s2">"TRAVIS"</span><span class="p">]</span>
      <span class="n">sh</span> <span class="s2">"git config --global user.name $GIT_NAME"</span>
      <span class="n">sh</span> <span class="s2">"git config --global user.email $GIT_EMAIL"</span>
      <span class="n">sh</span> <span class="s2">"git config --global push.default simple"</span>
    <span class="k">end</span>

    <span class="c1"># Make sure destination folder exists as git repo</span>
    <span class="n">check_destination</span>

    <span class="n">sh</span> <span class="s2">"git checkout </span><span class="si">#{</span><span class="no">SOURCE_BRANCH</span><span class="si">}</span><span class="s2">"</span>
    <span class="no">Dir</span><span class="p">.</span><span class="nf">chdir</span><span class="p">(</span><span class="no">CONFIG</span><span class="p">[</span><span class="s2">"destination"</span><span class="p">])</span> <span class="p">{</span> <span class="n">sh</span> <span class="s2">"git checkout </span><span class="si">#{</span><span class="no">DESTINATION_BRANCH</span><span class="si">}</span><span class="s2">"</span> <span class="p">}</span>

    <span class="c1"># Generate the site</span>
    <span class="n">sh</span> <span class="s2">"bundle exec jekyll build"</span>

    <span class="c1"># Commit and push to github</span>
    <span class="n">sha</span> <span class="o">=</span> <span class="sb">`git log`</span><span class="p">.</span><span class="nf">match</span><span class="p">(</span><span class="sr">/[a-z0-9]{40}/</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span>
    <span class="no">Dir</span><span class="p">.</span><span class="nf">chdir</span><span class="p">(</span><span class="no">CONFIG</span><span class="p">[</span><span class="s2">"destination"</span><span class="p">])</span> <span class="k">do</span>

      <span class="c1"># check if there is anything to add and commit, and pushes it</span>
      <span class="n">sh</span> <span class="s2">"if [ -n '$(git status)' ]; then
            git add --all .;
            git commit -m 'Updating to </span><span class="si">#{</span><span class="no">USERNAME</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="no">REPO</span><span class="si">}</span><span class="s2">@</span><span class="si">#{</span><span class="n">sha</span><span class="si">}</span><span class="s2">.';
            git push --quiet origin </span><span class="si">#{</span><span class="no">DESTINATION_BRANCH</span><span class="si">}</span><span class="s2">;
         fi"</span>
      <span class="nb">puts</span> <span class="s2">"Pushed updated branch </span><span class="si">#{</span><span class="no">DESTINATION_BRANCH</span><span class="si">}</span><span class="s2"> to GitHub Pages"</span>
    <span class="k">end</span>
  <span class="k">end</span>
<span class="k">end</span>
</code></pre></div></div>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gd">- DESTINATION_BRANCH = "gh-pages"
</span><span class="gi">+ DESTINATION_BRANCH = "master"
</span></code></pre></div></div>

<p>Jekyll에서 제공하는 Rakefile의 원본입니다. 코드 상단에 링크가 있으니 참고하시면 됩니다. 한 가지 고칠 부분이 있는데요. destination-branch가 <code class="language-plaintext highlighter-rouge">gh-pages</code>로 되어있기 때문에 이를 <code class="language-plaintext highlighter-rouge">master</code>로 변경해주셔야 합니다.</p>

<h5 id="_configyml-수정">_config.yml 수정</h5>

<div class="language-diff highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gi">+ username: &lt;username&gt;
+ repo: &lt;username&gt;.github.io
+ branch: gh-pages
+ destination: _site
</span></code></pre></div></div>

<p>Rakefile에서 사용할 설정 변수들을 추가해줍니다. 이 것으로 모든 설정이 끝났습니다. 이제 gh-pages에 push 했을 때, <code class="language-plaintext highlighter-rouge">Travis CI</code>에서 정상 작동하는지 확인만 해보면 되겠습니다.</p>

<h4 id="travis-확인">Travis 확인</h4>

<p><img src="/assets/images/travis-check1.png" alt="travis-check1" /></p>

<p>실행 시간이 약 4분 30초 정도 걸렸고, 상태는 정상인 것으로 보입니다.</p>

<p><img src="/assets/images/travis-check2.png" alt="travis-check2" /></p>

<p>하단에 <code class="language-plaintext highlighter-rouge">Job log</code> 탭을 보시면 위와 같이 실시간으로 작업 로그들을 볼 수 있어서 디버깅을 하실 수 있습니다.</p>

<p><img src="/assets/images/travis-check2-1.png" alt="travis-check2-1" /></p>

<p>또한 view Config를 통해서 현재 어떤 설정으로 Job이 실행되고 있는지 확인하실 수 있습니다.</p>

<p><img src="/assets/images/travis-check3.png" alt="travis-check3" />
<img src="/assets/images/travis-check4.png" alt="travis-check4" /></p>

<p>그리고 간혹 실행이 안되는 경우가 발생할 수 있는데요. 위와 같이 <code class="language-plaintext highlighter-rouge">Requests</code>를 클릭하면 어떤 이유 때문에 잡이 실행이 되지 않았는지도 확인이 가능합니다.</p>

<h2 id="맺음">맺음</h2>

<p>이렇게 좀 다소 길지만, Travis CI를 통한 Github Pages 배포 자동화에 대해서 알아보았습니다. 여담이지만 저는 현재 Travis를 사용하고 있지 않습니다. 그 이유는 <code class="language-plaintext highlighter-rouge">Github Action</code>이라는 아주 간단하고 빠른 도구가 나왔기 때문인데요.</p>

<p>Travis에서 아무리 찾아봐도 <code class="language-plaintext highlighter-rouge">cache</code>가 잘 동작하지 않는 이슈가 있는 것 같았습니다. 그래서 속도가 너무 느리다고 생각이 되어서 <code class="language-plaintext highlighter-rouge">Github Action</code>을 사용 중입니다. 깃허브 액션에서는 캐시가 잘 동작하는 것 같아서 배포가 완료 될 때까지 약 <code class="language-plaintext highlighter-rouge">1m 30s</code> 정도 걸리는 것을 확인했습니다.</p>

<p><strong>Github Action</strong>을 이용하여 Jekyll Github Page 배포 자동화 하는 방법에 대해서 아래 링크를 통해서 확인하실 수 있습니다.</p>

<div class="related-link-wrap">
    <a class="related-link" href="/tools/git/github-pages-github-action" target="_self" rel="noopener noreferrer">
      <div class="related-link-icon">
         <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" version="1.1" id="Calque_1" width="32" height="32" viewBox="0 0 70 70" style="overflow:visible" xml:space="preserve"><g><g transform="translate(-186.000000, -128.000000)"><path id="GitBook_logo_blue" style="fill:#8a4baf;" d="M217.505,179.83c1.129,0,2.048,0.919,2.048,2.047    c0,1.129-0.919,2.047-2.048,2.047c-1.129,0-2.047-0.919-2.047-2.047C215.457,180.749,216.376,179.83,217.505,179.83     M249.659,167.149c-1.129,0-2.048-0.919-2.048-2.047c0-1.129,0.919-2.048,2.048-2.048c1.129,0,2.047,0.919,2.047,2.048    C251.707,166.23,250.788,167.149,249.659,167.149 M249.659,158.761c-3.496,0-6.341,2.844-6.341,6.341    c0,0.681,0.113,1.359,0.336,2.018l-20.946,11.15c-1.19-1.715-3.119-2.731-5.205-2.731c-2.417,0-4.62,1.383-5.686,3.544    l-18.818-9.921c-1.988-1.045-3.476-4.32-3.318-7.3c0.082-1.555,0.619-2.761,1.437-3.227c0.519-0.295,1.144-0.269,1.807,0.078    l0.126,0.066c4.985,2.627,21.304,11.222,21.991,11.541c1.06,0.49,1.65,0.689,3.456-0.167l33.732-17.543    c0.494-0.187,1.071-0.66,1.071-1.38c0-0.998-1.032-1.391-1.035-1.391c-1.918-0.92-4.867-2.301-7.744-3.647    c-6.148-2.879-13.116-6.141-16.176-7.744c-2.642-1.383-4.768-0.217-5.148,0.019l-0.737,0.365    c-13.772,6.811-32.203,15.939-33.253,16.577c-1.879,1.143-3.043,3.421-3.193,6.249c-0.235,4.483,2.052,9.156,5.321,10.871    l19.898,10.262c0.448,3.105,3.121,5.429,6.27,5.429c3.464,0,6.288-2.792,6.34-6.244l21.915-11.877    c1.111,0.868,2.489,1.345,3.9,1.345c3.496,0,6.341-2.845,6.341-6.341S253.155,158.761,249.659,158.761" /></g></g></svg>
        
      </div>
      <div class="link-title-wrap">
        <div class="link-title">
          <div class="link-title-text">[Jekyll] Github Action으로 Github Pages 배포 자동화 하는 방법</div>
        </div>
      </div>
      <div class="display-link-wrap">
        <div class="display-link">
          <span class="display-link-text">deeplify.dev</span>
        </div>
      </div>
    </a>
</div>

<p>감사합니다.</p>
:ET